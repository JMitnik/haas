/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as APIContext from "../types/APIContext"
import * as prisma from "@prisma/client"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Upload";
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AdjustedImageInput: { // input type
    bucket?: string | null; // String
    id?: string | null; // String
    key?: string | null; // String
    reset?: boolean | null; // Boolean
  }
  AppendToInteractionInput: { // input type
    data?: NexusGenInputs['NodeEntryDataInput'] | null; // NodeEntryDataInput
    edgeId?: string | null; // String
    nodeId?: string | null; // String
    sessionId?: string | null; // ID
  }
  CTALinkInputObjectType: { // input type
    backgroundColor?: string | null; // String
    iconUrl?: string | null; // String
    id?: string | null; // String
    title?: string | null; // String
    type?: NexusGenEnums['LinkTypeEnumType'] | null; // LinkTypeEnumType
    url?: string | null; // String
  }
  CTALinksInputType: { // input type
    linkTypes?: NexusGenInputs['CTALinkInputObjectType'][] | null; // [CTALinkInputObjectType!]
  }
  CTAShareInputObjectType: { // input type
    id?: string | null; // String
    title?: string | null; // String
    tooltip?: string | null; // String
    url?: string | null; // String
  }
  ChoiceNodeEntryInput: { // input type
    value?: string | null; // String
  }
  CreateBatchDeliveriesInputType: { // input type
    batchScheduledAt?: string | null; // String
    campaignId?: string | null; // ID
    uploadedCsv?: any | null; // Upload
    workspaceId?: string | null; // String
  }
  CreateCTAInputType: { // input type
    customerSlug?: string | null; // String
    dialogueSlug?: string | null; // String
    form?: NexusGenInputs['FormNodeInputType'] | null; // FormNodeInputType
    links?: NexusGenInputs['CTALinksInputType'] | null; // CTALinksInputType
    share?: NexusGenInputs['ShareNodeInputType'] | null; // ShareNodeInputType
    title?: string | null; // String
    type?: string | null; // String
  }
  CreateCampaignInputType: { // input type
    label?: string | null; // String
    variants?: NexusGenInputs['CreateCampaignVariantInputType'][] | null; // [CreateCampaignVariantInputType!]
    workspaceId: string; // ID!
  }
  CreateCampaignVariantInputType: { // input type
    body?: string | null; // String
    dialogueId: string; // ID!
    from?: string | null; // String
    label?: string | null; // String
    subject?: string | null; // String
    type: NexusGenEnums['CampaignVariantEnum']; // CampaignVariantEnum!
    weight?: number | null; // Float
    workspaceId: string; // ID!
  }
  CreateDialogueInputType: { // input type
    contentType?: string | null; // String
    customerSlug?: string | null; // String
    description?: string | null; // String
    dialogueSlug?: string | null; // String
    isSeed?: boolean | null; // Boolean
    language?: NexusGenEnums['LanguageEnumType'] | null; // LanguageEnumType
    publicTitle?: string | null; // String
    tags?: NexusGenInputs['TagsInputObjectType'] | null; // TagsInputObjectType
    templateDialogueId?: string | null; // String
    title?: string | null; // String
  }
  CreateQuestionNodeInputType: { // input type
    customerId?: string | null; // ID
    dialogueSlug?: string | null; // String
    edgeCondition?: NexusGenInputs['EdgeConditionInputType'] | null; // EdgeConditionInputType
    extraContent?: string | null; // String
    happyText?: string | null; // String
    optionEntries?: NexusGenInputs['OptionsInputType'] | null; // OptionsInputType
    overrideLeafId?: string | null; // ID
    parentQuestionId?: string | null; // ID
    title?: string | null; // String
    type?: string | null; // String
    unhappyText?: string | null; // String
  }
  CreateTriggerInputType: { // input type
    customerSlug?: string | null; // String
    recipients?: NexusGenInputs['RecipientsInputType'] | null; // RecipientsInputType
    trigger?: NexusGenInputs['TriggerInputType'] | null; // TriggerInputType
  }
  CreateWorkspaceInput: { // input type
    isSeed?: boolean | null; // Boolean
    logo?: string | null; // String
    logoOpacity?: number | null; // Int
    name: string; // String!
    primaryColour: string; // String!
    slug: string; // String!
    willGenerateFakeData?: boolean | null; // Boolean
  }
  CustomFieldInputType: { // input type
    key?: string | null; // String
    value?: string | null; // String
  }
  CustomerWhereUniqueInput: { // input type
    id: string; // ID!
  }
  DeleteDialogueInputType: { // input type
    customerSlug?: string | null; // String
    id?: string | null; // ID
  }
  DeleteNodeInputType: { // input type
    customerId?: string | null; // ID
    dialogueSlug?: string | null; // String
    id?: string | null; // String
  }
  DeleteUserInput: { // input type
    customerId?: string | null; // ID
    userId?: string | null; // ID
  }
  DeliveryConnectionFilter: { // input type
    campaignId?: string | null; // String
    campaignVariantId?: string | null; // ID
    paginationFilter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
    status?: NexusGenEnums['DeliveryStatusEnum'] | null; // DeliveryStatusEnum
  }
  DialogueFilterInputType: { // input type
    endDate?: string | null; // String
    searchTerm?: string | null; // String
    startDate?: string | null; // String
  }
  DialogueWhereUniqueInput: { // input type
    id?: string | null; // ID
    slug?: string | null; // String
  }
  EdgeConditionInputType: { // input type
    conditionType?: string | null; // String
    id?: number | null; // Int
    matchValue?: string | null; // String
    renderMax?: number | null; // Int
    renderMin?: number | null; // Int
  }
  EditUserInput: { // input type
    customerId?: string | null; // String
    email: string; // String!
    firstName?: string | null; // String
    lastName?: string | null; // String
    phone?: string | null; // String
    roleId?: string | null; // String
  }
  EditWorkspaceInput: { // input type
    customerSlug: string; // String!
    id: string; // ID!
    logo?: string | null; // String
    logoOpacity?: number | null; // Int
    name: string; // String!
    primaryColour: string; // String!
    slug: string; // String!
  }
  FormNodeEntryFieldInput: { // input type
    email?: string | null; // String
    longText?: string | null; // String
    number?: number | null; // Int
    phoneNumber?: string | null; // String
    relatedFieldId?: string | null; // ID
    shortText?: string | null; // String
    url?: string | null; // String
  }
  FormNodeEntryInput: { // input type
    values?: NexusGenInputs['FormNodeEntryFieldInput'][] | null; // [FormNodeEntryFieldInput!]
  }
  FormNodeFieldInput: { // input type
    id?: string | null; // ID
    isRequired?: boolean | null; // Boolean
    label?: string | null; // String
    placeholder?: string | null; // String
    position?: number | null; // Int
    type?: NexusGenEnums['FormNodeFieldTypeEnum'] | null; // FormNodeFieldTypeEnum
  }
  FormNodeInputType: { // input type
    fields?: NexusGenInputs['FormNodeFieldInput'][] | null; // [FormNodeFieldInput!]
    helperText?: string | null; // String
    id?: string | null; // String
  }
  GenerateAutodeckInput: { // input type
    answer1?: string | null; // String
    answer2?: string | null; // String
    answer3?: string | null; // String
    answer4?: string | null; // String
    companyName?: string | null; // String
    customFields?: NexusGenInputs['CustomFieldInputType'][] | null; // [CustomFieldInputType!]
    emailContent?: string | null; // String
    firstName?: string | null; // String
    id: string; // String!
    isGenerateWorkspace?: boolean | null; // Boolean
    jobLocationId?: string | null; // String
    logo?: string | null; // String
    name?: string | null; // String
    newCustomFields?: NexusGenInputs['CustomFieldInputType'][] | null; // [CustomFieldInputType!]
    primaryColour?: string | null; // String
    requiresColorExtraction: boolean; // Boolean!
    requiresRembgLambda: boolean; // Boolean!
    requiresWebsiteScreenshot: boolean; // Boolean!
    reward?: string | null; // String
    slug?: string | null; // String
    sorryAboutX?: string | null; // String
    standardFields?: NexusGenInputs['CustomFieldInputType'][] | null; // [CustomFieldInputType!]
    textMessage?: string | null; // String
    usesAdjustedLogo: boolean; // Boolean!
    website?: string | null; // String
    youLoveX?: string | null; // String
  }
  GetCampaignsInput: { // input type
    customerSlug?: string | null; // String
  }
  InviteUserInput: { // input type
    customerId: string; // String!
    email: string; // String!
    roleId: string; // String!
  }
  LoginInput: { // input type
    email: string; // String!
  }
  NodeEntryDataInput: { // input type
    choice?: NexusGenInputs['ChoiceNodeEntryInput'] | null; // ChoiceNodeEntryInput
    form?: NexusGenInputs['FormNodeEntryInput'] | null; // FormNodeEntryInput
    register?: NexusGenInputs['RegisterNodeEntryInput'] | null; // RegisterNodeEntryInput
    slider?: NexusGenInputs['SliderNodeEntryInput'] | null; // SliderNodeEntryInput
    textbox?: NexusGenInputs['TextboxNodeEntryInput'] | null; // TextboxNodeEntryInput
    video?: NexusGenInputs['VideoNodeEntryInput'] | null; // VideoNodeEntryInput
  }
  NodeEntryInput: { // input type
    data?: NexusGenInputs['NodeEntryDataInput'] | null; // NodeEntryDataInput
    depth?: number | null; // Int
    edgeId?: string | null; // String
    nodeId?: string | null; // String
  }
  OptionInputType: { // input type
    id?: number | null; // Int
    overrideLeafId?: string | null; // String
    position: number; // Int!
    publicValue?: string | null; // String
    value?: string | null; // String
  }
  OptionsInputType: { // input type
    options?: NexusGenInputs['OptionInputType'][] | null; // [OptionInputType!]
  }
  PaginationSortInput: { // input type
    by: NexusGenEnums['PaginationSortByEnum']; // PaginationSortByEnum!
    desc?: boolean | null; // Boolean
  }
  PaginationWhereInput: { // input type
    endDate?: string | null; // String
    limit?: number | null; // Int
    offset?: number | null; // Int
    orderBy?: NexusGenInputs['PaginationSortInput'][] | null; // [PaginationSortInput!]
    pageIndex?: number | null; // Int
    search?: string | null; // String
    searchTerm?: string | null; // String
    startDate?: string | null; // String
  }
  PermissionIdsInput: { // input type
    ids?: string[] | null; // [String!]
  }
  PermissionInput: { // input type
    customerId?: string | null; // String
    description?: string | null; // String
    name?: string | null; // String
  }
  QuestionNodeWhereInputType: { // input type
    id?: string | null; // ID
    isRoot?: boolean | null; // Boolean
  }
  QuestionNodeWhereUniqueInput: { // input type
    id: string; // String!
  }
  RecipientsInputType: { // input type
    ids?: string[] | null; // [String!]
  }
  RegisterInput: { // input type
    customerId: string; // String!
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
    roleId?: string | null; // String
  }
  RegisterNodeEntryInput: { // input type
    value?: string | null; // String
  }
  RemovePixelRangeInput: { // input type
    blue?: number | null; // Int
    bucket?: string | null; // String
    green?: number | null; // Int
    key?: string | null; // String
    range?: number | null; // Int
    red?: number | null; // Int
  }
  RequestInviteInput: { // input type
    email: string; // String!
  }
  RoleDataInput: { // input type
    description?: string | null; // String
    name?: string | null; // String
  }
  RoleInput: { // input type
    customerId?: string | null; // String
    description?: string | null; // String
    name?: string | null; // String
    permissions?: NexusGenEnums['SystemPermission'][] | null; // [SystemPermission!]
  }
  SessionInput: { // input type
    deliveryId?: string | null; // String
    device?: string | null; // String
    dialogueId: string; // String!
    entries?: NexusGenInputs['NodeEntryInput'][] | null; // [NodeEntryInput!]
    originUrl?: string | null; // String
    totalTimeInSec?: number | null; // Int
  }
  SessionWhereUniqueInput: { // input type
    dialogueId?: string | null; // ID
    id?: string | null; // ID
  }
  ShareNodeInputType: { // input type
    id?: string | null; // String
    title?: string | null; // String
    tooltip?: string | null; // String
    url?: string | null; // String
  }
  SlideNodeMarkerInput: { // input type
    id?: string | null; // ID
    label: string; // String!
    range?: NexusGenInputs['SliderNodeRangeInputType'] | null; // SliderNodeRangeInputType
    subLabel: string; // String!
  }
  SliderNodeEntryInput: { // input type
    value?: number | null; // Int
  }
  SliderNodeInputType: { // input type
    id?: string | null; // ID
    markers?: NexusGenInputs['SlideNodeMarkerInput'][] | null; // [SlideNodeMarkerInput!]
  }
  SliderNodeRangeInputType: { // input type
    end?: number | null; // Float
    start?: number | null; // Float
  }
  SocialNodeEntryInput: { // input type
    visitedLink?: string | null; // String
  }
  TagsInputObjectType: { // input type
    entries?: string[] | null; // [String!]
  }
  TextboxNodeEntryInput: { // input type
    value?: string | null; // String
  }
  TriggerConditionInputType: { // input type
    id?: number | null; // Int
    maxValue?: number | null; // Int
    minValue?: number | null; // Int
    questionId?: string | null; // String
    textValue?: string | null; // String
    type?: NexusGenEnums['TriggerConditionEnum'] | null; // TriggerConditionEnum
  }
  TriggerInputType: { // input type
    conditions?: NexusGenInputs['TriggerConditionInputType'][] | null; // [TriggerConditionInputType!]
    medium?: NexusGenEnums['TriggerMediumEnum'] | null; // TriggerMediumEnum
    name?: string | null; // String
    type?: NexusGenEnums['TriggerTypeEnum'] | null; // TriggerTypeEnum
  }
  UpdateCTAInputType: { // input type
    customerId?: string | null; // ID
    form?: NexusGenInputs['FormNodeInputType'] | null; // FormNodeInputType
    id?: string | null; // String
    links?: NexusGenInputs['CTALinksInputType'] | null; // CTALinksInputType
    share?: NexusGenInputs['ShareNodeInputType'] | null; // ShareNodeInputType
    title?: string | null; // String
    type?: NexusGenEnums['QuestionNodeTypeEnum'] | null; // QuestionNodeTypeEnum
  }
  UpdateQuestionNodeInputType: { // input type
    customerId?: string | null; // ID
    edgeCondition?: NexusGenInputs['EdgeConditionInputType'] | null; // EdgeConditionInputType
    edgeId?: string | null; // ID
    extraContent?: string | null; // String
    happyText?: string | null; // String
    id: string; // ID!
    optionEntries?: NexusGenInputs['OptionsInputType'] | null; // OptionsInputType
    overrideLeafId?: string | null; // ID
    sliderNode?: NexusGenInputs['SliderNodeInputType'] | null; // SliderNodeInputType
    title?: string | null; // String
    type?: string | null; // String
    unhappyText?: string | null; // String
  }
  UserInput: { // input type
    customerId?: string | null; // String
    email: string; // String!
    firstName?: string | null; // String
    lastName?: string | null; // String
    password?: string | null; // String
    phone?: string | null; // String
    roleId?: string | null; // String
  }
  UserOfCustomerInput: { // input type
    customerId?: string | null; // String
    customerSlug?: string | null; // String
    userId?: string | null; // String
  }
  VideoNodeEntryInput: { // input type
    value?: string | null; // String
  }
  createJobProcessLocationInput: { // input type
    name?: string | null; // String
    path?: string | null; // String
    type?: NexusGenEnums['JobProcessLocationType'] | null; // JobProcessLocationType
  }
}

export interface NexusGenEnums {
  CampaignVariantEnum: "EMAIL" | "QUEUE" | "SMS"
  CloudReferenceType: prisma.CloudReferenceType
  DeliveryStatusEnum: "DEPLOYED" | "FINISHED" | "OPENED" | "SCHEDULED" | "SENT"
  FormNodeFieldTypeEnum: "email" | "longText" | "number" | "phoneNumber" | "shortText" | "url"
  JobProcessLocationType: prisma.JobProcessLocationType
  JobStatusType: prisma.JobStatusType
  LanguageEnumType: "DUTCH" | "ENGLISH" | "GERMAN"
  LinkTypeEnumType: "API" | "FACEBOOK" | "INSTAGRAM" | "LINKEDIN" | "SOCIAL" | "TWITTER" | "WHATSAPP"
  PaginationSearchEnum: "email" | "firstName" | "lastName" | "name" | "publicTitle" | "title"
  PaginationSortByEnum: "createdAt" | "email" | "firstName" | "id" | "lastName" | "medium" | "name" | "paths" | "role" | "scheduledAt" | "score" | "type" | "updatedAt" | "user" | "when"
  QuestionNodeTypeEnum: "CHOICE" | "FORM" | "GENERIC" | "LINK" | "REGISTRATION" | "SHARE" | "SLIDER" | "TEXTBOX" | "VIDEO_EMBEDDED"
  SystemPermission: "CAN_ACCESS_ADMIN_PANEL" | "CAN_ADD_USERS" | "CAN_BUILD_DIALOGUE" | "CAN_CREATE_CAMPAIGNS" | "CAN_CREATE_DELIVERIES" | "CAN_CREATE_TRIGGERS" | "CAN_DELETE_DIALOGUE" | "CAN_DELETE_TRIGGERS" | "CAN_DELETE_USERS" | "CAN_DELETE_WORKSPACE" | "CAN_EDIT_DIALOGUE" | "CAN_EDIT_USERS" | "CAN_EDIT_WORKSPACE" | "CAN_VIEW_CAMPAIGNS" | "CAN_VIEW_DIALOGUE" | "CAN_VIEW_DIALOGUE_ANALYTICS" | "CAN_VIEW_USERS"
  TagTypeEnum: "AGENT" | "DEFAULT" | "LOCATION"
  TriggerConditionEnum: prisma.TriggerConditionEnum
  TriggerMediumEnum: "BOTH" | "EMAIL" | "PHONE"
  TriggerTypeEnum: "QUESTION" | "SCHEDULED"
  UploadImageEnumType: "LOGO" | "WEBSITE_SCREENSHOT"
}

export interface NexusGenRootTypes {
  AWSImageType: { // root type
    encoding?: string | null; // String
    filename?: string | null; // String
    mimetype?: string | null; // String
    url?: string | null; // String
  }
  AutodeckConnectionType: { // root type
    endDate?: string | null; // String
    jobs: NexusGenRootTypes['CreateWorkspaceJobType'][]; // [CreateWorkspaceJobType!]!
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    startDate?: string | null; // String
  }
  CampaignType: { // root type
    id: string; // ID!
    label: string; // String!
    variants: NexusGenRootTypes['CampaignVariantType'][]; // [CampaignVariantType!]!
  }
  CampaignVariantType: { // root type
    body: string; // String!
    deliveryConnection?: NexusGenRootTypes['DeliveryConnectionType'] | null; // DeliveryConnectionType
    dialogue: NexusGenRootTypes['Dialogue']; // Dialogue!
    id: string; // ID!
    label: string; // String!
    type: NexusGenEnums['CampaignVariantEnum']; // CampaignVariantEnum!
    weight: number; // Int!
    workspace: NexusGenRootTypes['Customer']; // Customer!
  }
  ColourSettings: prisma.ColourSettings;
  CreateBatchDeliveriesOutputType: { // root type
    failedDeliveries: NexusGenRootTypes['FailedDeliveryModel'][]; // [FailedDeliveryModel!]!
    nrDeliveries: number; // Int!
  }
  CreateWorkspaceJobType: { // root type
    createdAt: string; // String!
    errorMessage?: string | null; // String
    id: string; // String!
    message?: string | null; // String
    name: string; // String!
    referenceId?: string | null; // String
    referenceType: NexusGenEnums['CloudReferenceType']; // CloudReferenceType!
    requiresColorExtraction: boolean; // Boolean!
    requiresRembg: boolean; // Boolean!
    requiresScreenshot: boolean; // Boolean!
    resourcesUrl?: string | null; // String
    status: NexusGenEnums['JobStatusType']; // JobStatusType!
    updatedAt?: string | null; // String
  }
  CustomFieldType: { // root type
    id: string; // String!
    jobProcessLocationId: string; // String!
    key: string; // String!
    value?: string | null; // String
  }
  Customer: prisma.Customer;
  CustomerSettings: prisma.CustomerSettings;
  DeleteUserOutput: { // root type
    deletedUser: boolean; // Boolean!
  }
  DeliveryConnectionType: { // root type
    deliveries: NexusGenRootTypes['DeliveryType'][]; // [DeliveryType!]!
    endDate?: string | null; // String
    limit: number; // Int!
    nrFinished: number; // Int!
    nrOpened: number; // Int!
    nrSent: number; // Int!
    nrTotal: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    startDate?: string | null; // String
  }
  DeliveryEventType: { // root type
    createdAt: string; // String!
    id: string; // ID!
    status: NexusGenEnums['DeliveryStatusEnum']; // DeliveryStatusEnum!
  }
  DeliveryType: { // root type
    currentStatus: NexusGenEnums['DeliveryStatusEnum']; // DeliveryStatusEnum!
    deliveryRecipientEmail?: string | null; // String
    deliveryRecipientFirstName?: string | null; // String
    deliveryRecipientLastName?: string | null; // String
    deliveryRecipientPhone?: string | null; // String
    events: NexusGenRootTypes['DeliveryEventType'][]; // [DeliveryEventType!]!
    id: string; // ID!
    scheduledAt?: string | null; // String
    updatedAt?: string | null; // String
  }
  Dialogue: prisma.Dialogue;
  DialogueFinisherObjectType: { // root type
    header: string; // String!
    id: string; // ID!
    subtext: string; // String!
  }
  DialogueStatistics: { // root type
    history?: NexusGenRootTypes['lineChartDataType'][] | null; // [lineChartDataType!]
    mostPopularPath?: NexusGenRootTypes['topPathType'] | null; // topPathType
    nrInteractions: number; // Int!
    topNegativePath?: NexusGenRootTypes['topPathType'][] | null; // [topPathType!]
    topPositivePath?: NexusGenRootTypes['topPathType'][] | null; // [topPathType!]
  }
  Edge: prisma.Edge;
  EdgeCondition: { // root type
    conditionType: string; // String!
    edgeId?: string | null; // String
    id: number; // Int!
    matchValue?: string | null; // String
    renderMax?: number | null; // Int
    renderMin?: number | null; // Int
  }
  FailedDeliveryModel: { // root type
    error: string; // String!
    record: string; // String!
  }
  FontSettings: prisma.FontSettings;
  FormNodeEntryType: { // root type
    id: number; // Int!
    values: NexusGenRootTypes['FormNodeEntryValueType'][]; // [FormNodeEntryValueType!]!
  }
  FormNodeEntryValueType: { // root type
    email?: string | null; // String
    longText?: string | null; // String
    number?: number | null; // Int
    phoneNumber?: string | null; // String
    relatedField: NexusGenRootTypes['FormNodeField']; // FormNodeField!
    shortText?: string | null; // String
    url?: string | null; // String
  }
  FormNodeField: prisma.FormNodeField;
  FormNodeType: { // root type
    fields: NexusGenRootTypes['FormNodeField'][]; // [FormNodeField!]!
    helperText?: string | null; // String
    id?: string | null; // String
  }
  ImageType: { // root type
    encoding?: string | null; // String
    filename?: string | null; // String
    mimetype?: string | null; // String
    url?: string | null; // String
  }
  InviteUserOutput: { // root type
    didAlreadyExist: boolean; // Boolean!
    didInvite: boolean; // Boolean!
  }
  JobObjectType: { // root type
    createdAt: string; // String!
    createWorkspaceJob?: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    createWorkspaceJobId: string; // String!
    id: string; // String!
    updatedAt: string; // String!
  }
  JobProcessLocation: prisma.JobProcessLocation;
  JobProcessLocations: { // root type
    jobProcessLocations: NexusGenRootTypes['JobProcessLocation'][]; // [JobProcessLocation!]!
  }
  LinkType: { // root type
    backgroundColor?: string | null; // String
    iconUrl?: string | null; // String
    id: string; // String!
    questionNodeId?: string | null; // String
    title?: string | null; // String
    type: string; // String!
    url: string; // String!
  }
  LoginOutput: { // root type
    expiryDate: number; // Int!
    token: string; // String!
    user: NexusGenRootTypes['UserType']; // UserType!
  }
  Mutation: {};
  NodeEntry: prisma.NodeEntry;
  NodeEntryValue: { // root type
    choiceNodeEntry?: string | null; // String
    formNodeEntry?: NexusGenRootTypes['FormNodeEntryType'] | null; // FormNodeEntryType
    linkNodeEntry?: string | null; // String
    registrationNodeEntry?: string | null; // String
    sliderNodeEntry?: number | null; // Int
    textboxNodeEntry?: string | null; // String
    videoNodeEntry?: string | null; // String
  }
  PaginationPageInfo: { // root type
    nrPages: number; // Int!
    pageIndex: number; // Int!
  }
  PermssionType: { // root type
    customer?: NexusGenRootTypes['Customer'] | null; // Customer
    description?: string | null; // String
    id: string; // ID!
    name: string; // String!
  }
  PreviewDataType: { // root type
    colors: string[]; // [String!]!
    rembgLogoUrl: string; // String!
    websiteScreenshotUrl: string; // String!
  }
  Query: {};
  QuestionNode: prisma.QuestionNode;
  QuestionOption: prisma.QuestionOption;
  RefreshAccessTokenOutput: { // root type
    accessToken: string; // String!
  }
  RequestInviteOutput: { // root type
    didInvite: boolean; // Boolean!
    userExists: boolean; // Boolean!
  }
  RoleConnection: { // root type
    endDate?: string | null; // String
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    roles: NexusGenRootTypes['RoleType'][]; // [RoleType!]!
    startDate?: string | null; // String
  }
  RoleType: { // root type
    customerId?: string | null; // String
    id: string; // ID!
    name: string; // String!
    nrPermissions?: number | null; // Int
    roleId?: string | null; // String
  }
  Session: prisma.Session;
  SessionConnection: { // root type
    endDate?: string | null; // String
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    startDate?: string | null; // String
  }
  ShareNodeType: { // root type
    createdAt?: string | null; // String
    id: string; // String!
    title: string; // String!
    tooltip?: string | null; // String
    updatedAt?: string | null; // String
    url: string; // String!
  }
  SliderNodeMarkerType: { // root type
    id: string; // ID!
    label: string; // String!
    subLabel: string; // String!
  }
  SliderNodeRangeType: { // root type
    end?: number | null; // Float
    id: string; // ID!
    start?: number | null; // Float
  }
  SliderNodeType: { // root type
    happyText?: string | null; // String
    id?: string | null; // ID
    unhappyText?: string | null; // String
  }
  Tag: prisma.Tag;
  TriggerConditionType: { // root type
    id: number; // Int!
    maxValue?: number | null; // Int
    minValue?: number | null; // Int
    textValue?: string | null; // String
    triggerId: string; // String!
    type: NexusGenEnums['TriggerConditionEnum']; // TriggerConditionEnum!
  }
  TriggerConnectionType: { // root type
    endDate?: string | null; // String
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    startDate?: string | null; // String
    triggers: NexusGenRootTypes['TriggerType'][]; // [TriggerType!]!
  }
  TriggerType: { // root type
    id: string; // String!
    medium: NexusGenEnums['TriggerMediumEnum']; // TriggerMediumEnum!
    name: string; // String!
    relatedNodeId?: string | null; // String
    type: NexusGenEnums['TriggerTypeEnum']; // TriggerTypeEnum!
  }
  UserConnection: { // root type
    endDate?: string | null; // String
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    startDate?: string | null; // String
    userCustomers: NexusGenRootTypes['UserCustomer'][]; // [UserCustomer!]!
  }
  UserCustomer: { // root type
    customer: NexusGenRootTypes['Customer']; // Customer!
    role: NexusGenRootTypes['RoleType']; // RoleType!
    user: NexusGenRootTypes['UserType']; // UserType!
  }
  UserType: { // root type
    email: string; // String!
    firstName?: string | null; // String
    id: string; // ID!
    lastName?: string | null; // String
    phone?: string | null; // String
    roleId?: string | null; // String
  }
  VerifyUserTokenOutput: { // root type
    accessToken: string; // String!
    accessTokenExpiry: number; // Int!
    userData: NexusGenRootTypes['UserType']; // UserType!
  }
  lineChartDataType: { // root type
    entryId?: string | null; // String
    x?: string | null; // String
    y?: number | null; // Int
  }
  topPathType: { // root type
    answer?: string | null; // String
    basicSentiment?: string | null; // String
    quantity?: number | null; // Int
  }
  ConnectionInterface: NexusGenRootTypes['DeliveryConnectionType'] | NexusGenRootTypes['SessionConnection'] | NexusGenRootTypes['UserConnection'] | NexusGenRootTypes['AutodeckConnectionType'] | NexusGenRootTypes['RoleConnection'] | NexusGenRootTypes['TriggerConnectionType'];
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: any;
  Upload: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  AdjustedImageInput: NexusGenInputs['AdjustedImageInput'];
  AppendToInteractionInput: NexusGenInputs['AppendToInteractionInput'];
  CTALinkInputObjectType: NexusGenInputs['CTALinkInputObjectType'];
  CTALinksInputType: NexusGenInputs['CTALinksInputType'];
  CTAShareInputObjectType: NexusGenInputs['CTAShareInputObjectType'];
  ChoiceNodeEntryInput: NexusGenInputs['ChoiceNodeEntryInput'];
  CreateBatchDeliveriesInputType: NexusGenInputs['CreateBatchDeliveriesInputType'];
  CreateCTAInputType: NexusGenInputs['CreateCTAInputType'];
  CreateCampaignInputType: NexusGenInputs['CreateCampaignInputType'];
  CreateCampaignVariantInputType: NexusGenInputs['CreateCampaignVariantInputType'];
  CreateDialogueInputType: NexusGenInputs['CreateDialogueInputType'];
  CreateQuestionNodeInputType: NexusGenInputs['CreateQuestionNodeInputType'];
  CreateTriggerInputType: NexusGenInputs['CreateTriggerInputType'];
  CreateWorkspaceInput: NexusGenInputs['CreateWorkspaceInput'];
  CustomFieldInputType: NexusGenInputs['CustomFieldInputType'];
  CustomerWhereUniqueInput: NexusGenInputs['CustomerWhereUniqueInput'];
  DeleteDialogueInputType: NexusGenInputs['DeleteDialogueInputType'];
  DeleteNodeInputType: NexusGenInputs['DeleteNodeInputType'];
  DeleteUserInput: NexusGenInputs['DeleteUserInput'];
  DeliveryConnectionFilter: NexusGenInputs['DeliveryConnectionFilter'];
  DialogueFilterInputType: NexusGenInputs['DialogueFilterInputType'];
  DialogueWhereUniqueInput: NexusGenInputs['DialogueWhereUniqueInput'];
  EdgeConditionInputType: NexusGenInputs['EdgeConditionInputType'];
  EditUserInput: NexusGenInputs['EditUserInput'];
  EditWorkspaceInput: NexusGenInputs['EditWorkspaceInput'];
  FormNodeEntryFieldInput: NexusGenInputs['FormNodeEntryFieldInput'];
  FormNodeEntryInput: NexusGenInputs['FormNodeEntryInput'];
  FormNodeFieldInput: NexusGenInputs['FormNodeFieldInput'];
  FormNodeInputType: NexusGenInputs['FormNodeInputType'];
  GenerateAutodeckInput: NexusGenInputs['GenerateAutodeckInput'];
  GetCampaignsInput: NexusGenInputs['GetCampaignsInput'];
  InviteUserInput: NexusGenInputs['InviteUserInput'];
  LoginInput: NexusGenInputs['LoginInput'];
  NodeEntryDataInput: NexusGenInputs['NodeEntryDataInput'];
  NodeEntryInput: NexusGenInputs['NodeEntryInput'];
  OptionInputType: NexusGenInputs['OptionInputType'];
  OptionsInputType: NexusGenInputs['OptionsInputType'];
  PaginationSortInput: NexusGenInputs['PaginationSortInput'];
  PaginationWhereInput: NexusGenInputs['PaginationWhereInput'];
  PermissionIdsInput: NexusGenInputs['PermissionIdsInput'];
  PermissionInput: NexusGenInputs['PermissionInput'];
  QuestionNodeWhereInputType: NexusGenInputs['QuestionNodeWhereInputType'];
  QuestionNodeWhereUniqueInput: NexusGenInputs['QuestionNodeWhereUniqueInput'];
  RecipientsInputType: NexusGenInputs['RecipientsInputType'];
  RegisterInput: NexusGenInputs['RegisterInput'];
  RegisterNodeEntryInput: NexusGenInputs['RegisterNodeEntryInput'];
  RemovePixelRangeInput: NexusGenInputs['RemovePixelRangeInput'];
  RequestInviteInput: NexusGenInputs['RequestInviteInput'];
  RoleDataInput: NexusGenInputs['RoleDataInput'];
  RoleInput: NexusGenInputs['RoleInput'];
  SessionInput: NexusGenInputs['SessionInput'];
  SessionWhereUniqueInput: NexusGenInputs['SessionWhereUniqueInput'];
  ShareNodeInputType: NexusGenInputs['ShareNodeInputType'];
  SlideNodeMarkerInput: NexusGenInputs['SlideNodeMarkerInput'];
  SliderNodeEntryInput: NexusGenInputs['SliderNodeEntryInput'];
  SliderNodeInputType: NexusGenInputs['SliderNodeInputType'];
  SliderNodeRangeInputType: NexusGenInputs['SliderNodeRangeInputType'];
  SocialNodeEntryInput: NexusGenInputs['SocialNodeEntryInput'];
  TagsInputObjectType: NexusGenInputs['TagsInputObjectType'];
  TextboxNodeEntryInput: NexusGenInputs['TextboxNodeEntryInput'];
  TriggerConditionInputType: NexusGenInputs['TriggerConditionInputType'];
  TriggerInputType: NexusGenInputs['TriggerInputType'];
  UpdateCTAInputType: NexusGenInputs['UpdateCTAInputType'];
  UpdateQuestionNodeInputType: NexusGenInputs['UpdateQuestionNodeInputType'];
  UserInput: NexusGenInputs['UserInput'];
  UserOfCustomerInput: NexusGenInputs['UserOfCustomerInput'];
  VideoNodeEntryInput: NexusGenInputs['VideoNodeEntryInput'];
  createJobProcessLocationInput: NexusGenInputs['createJobProcessLocationInput'];
  CampaignVariantEnum: NexusGenEnums['CampaignVariantEnum'];
  CloudReferenceType: NexusGenEnums['CloudReferenceType'];
  DeliveryStatusEnum: NexusGenEnums['DeliveryStatusEnum'];
  FormNodeFieldTypeEnum: NexusGenEnums['FormNodeFieldTypeEnum'];
  JobProcessLocationType: NexusGenEnums['JobProcessLocationType'];
  JobStatusType: NexusGenEnums['JobStatusType'];
  LanguageEnumType: NexusGenEnums['LanguageEnumType'];
  LinkTypeEnumType: NexusGenEnums['LinkTypeEnumType'];
  PaginationSearchEnum: NexusGenEnums['PaginationSearchEnum'];
  PaginationSortByEnum: NexusGenEnums['PaginationSortByEnum'];
  QuestionNodeTypeEnum: NexusGenEnums['QuestionNodeTypeEnum'];
  SystemPermission: NexusGenEnums['SystemPermission'];
  TagTypeEnum: NexusGenEnums['TagTypeEnum'];
  TriggerConditionEnum: NexusGenEnums['TriggerConditionEnum'];
  TriggerMediumEnum: NexusGenEnums['TriggerMediumEnum'];
  TriggerTypeEnum: NexusGenEnums['TriggerTypeEnum'];
  UploadImageEnumType: NexusGenEnums['UploadImageEnumType'];
}

export interface NexusGenFieldTypes {
  AWSImageType: { // field return type
    encoding: string | null; // String
    filename: string | null; // String
    mimetype: string | null; // String
    url: string | null; // String
  }
  AutodeckConnectionType: { // field return type
    endDate: string | null; // String
    jobs: NexusGenRootTypes['CreateWorkspaceJobType'][]; // [CreateWorkspaceJobType!]!
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    startDate: string | null; // String
  }
  CampaignType: { // field return type
    deliveryConnection: NexusGenRootTypes['DeliveryConnectionType'] | null; // DeliveryConnectionType
    id: string; // ID!
    label: string; // String!
    variants: NexusGenRootTypes['CampaignVariantType'][]; // [CampaignVariantType!]!
  }
  CampaignVariantType: { // field return type
    body: string; // String!
    deliveryConnection: NexusGenRootTypes['DeliveryConnectionType'] | null; // DeliveryConnectionType
    dialogue: NexusGenRootTypes['Dialogue']; // Dialogue!
    id: string; // ID!
    label: string; // String!
    type: NexusGenEnums['CampaignVariantEnum']; // CampaignVariantEnum!
    weight: number; // Int!
    workspace: NexusGenRootTypes['Customer']; // Customer!
  }
  ColourSettings: { // field return type
    id: string; // ID!
    primary: string; // String!
    primaryAlt: string | null; // String
    secondary: string | null; // String
  }
  CreateBatchDeliveriesOutputType: { // field return type
    failedDeliveries: NexusGenRootTypes['FailedDeliveryModel'][]; // [FailedDeliveryModel!]!
    nrDeliveries: number; // Int!
  }
  CreateWorkspaceJobType: { // field return type
    createdAt: string; // String!
    errorMessage: string | null; // String
    id: string; // String!
    message: string | null; // String
    name: string; // String!
    processLocation: NexusGenRootTypes['JobProcessLocation'] | null; // JobProcessLocation
    referenceId: string | null; // String
    referenceType: NexusGenEnums['CloudReferenceType']; // CloudReferenceType!
    requiresColorExtraction: boolean; // Boolean!
    requiresRembg: boolean; // Boolean!
    requiresScreenshot: boolean; // Boolean!
    resourcesUrl: string | null; // String
    status: NexusGenEnums['JobStatusType']; // JobStatusType!
    updatedAt: string | null; // String
  }
  CustomFieldType: { // field return type
    id: string; // String!
    jobProcessLocationId: string; // String!
    key: string; // String!
    value: string | null; // String
  }
  Customer: { // field return type
    campaign: NexusGenRootTypes['CampaignType'] | null; // CampaignType
    campaigns: NexusGenRootTypes['CampaignType'][]; // [CampaignType!]!
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogues: NexusGenRootTypes['Dialogue'][] | null; // [Dialogue!]
    id: string; // ID!
    name: string; // String!
    settings: NexusGenRootTypes['CustomerSettings'] | null; // CustomerSettings
    slug: string; // String!
    users: NexusGenRootTypes['UserType'][] | null; // [UserType!]
    usersConnection: NexusGenRootTypes['UserConnection'] | null; // UserConnection
  }
  CustomerSettings: { // field return type
    colourSettings: NexusGenRootTypes['ColourSettings'] | null; // ColourSettings
    fontSettings: NexusGenRootTypes['FontSettings'] | null; // FontSettings
    id: string; // ID!
    logoOpacity: number | null; // Int
    logoUrl: string | null; // String
  }
  DeleteUserOutput: { // field return type
    deletedUser: boolean; // Boolean!
  }
  DeliveryConnectionType: { // field return type
    deliveries: NexusGenRootTypes['DeliveryType'][]; // [DeliveryType!]!
    endDate: string | null; // String
    limit: number; // Int!
    nrFinished: number; // Int!
    nrOpened: number; // Int!
    nrSent: number; // Int!
    nrTotal: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    startDate: string | null; // String
  }
  DeliveryEventType: { // field return type
    createdAt: string; // String!
    id: string; // ID!
    status: NexusGenEnums['DeliveryStatusEnum']; // DeliveryStatusEnum!
  }
  DeliveryType: { // field return type
    campaignVariant: NexusGenRootTypes['CampaignVariantType'] | null; // CampaignVariantType
    currentStatus: NexusGenEnums['DeliveryStatusEnum']; // DeliveryStatusEnum!
    deliveryRecipientEmail: string | null; // String
    deliveryRecipientFirstName: string | null; // String
    deliveryRecipientLastName: string | null; // String
    deliveryRecipientPhone: string | null; // String
    events: NexusGenRootTypes['DeliveryEventType'][]; // [DeliveryEventType!]!
    id: string; // ID!
    scheduledAt: string | null; // String
    updatedAt: string | null; // String
  }
  Dialogue: { // field return type
    averageScore: number; // Float!
    creationDate: string | null; // String
    customer: NexusGenRootTypes['Customer'] | null; // Customer
    customerId: string; // String!
    description: string; // String!
    edges: NexusGenRootTypes['Edge'][]; // [Edge!]!
    id: string; // ID!
    isWithoutGenData: boolean; // Boolean!
    language: NexusGenEnums['LanguageEnumType']; // LanguageEnumType!
    leafs: NexusGenRootTypes['QuestionNode'][]; // [QuestionNode!]!
    postLeafNode: NexusGenRootTypes['DialogueFinisherObjectType'] | null; // DialogueFinisherObjectType
    publicTitle: string | null; // String
    questions: NexusGenRootTypes['QuestionNode'][]; // [QuestionNode!]!
    rootQuestion: NexusGenRootTypes['QuestionNode']; // QuestionNode!
    sessionConnection: NexusGenRootTypes['SessionConnection'] | null; // SessionConnection
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    slug: string; // String!
    statistics: NexusGenRootTypes['DialogueStatistics'] | null; // DialogueStatistics
    tags: NexusGenRootTypes['Tag'][] | null; // [Tag!]
    title: string; // String!
    updatedAt: string | null; // String
    wasGeneratedWithGenData: boolean; // Boolean!
  }
  DialogueFinisherObjectType: { // field return type
    header: string; // String!
    id: string; // ID!
    subtext: string; // String!
  }
  DialogueStatistics: { // field return type
    history: NexusGenRootTypes['lineChartDataType'][] | null; // [lineChartDataType!]
    mostPopularPath: NexusGenRootTypes['topPathType'] | null; // topPathType
    nrInteractions: number; // Int!
    topNegativePath: NexusGenRootTypes['topPathType'][] | null; // [topPathType!]
    topPositivePath: NexusGenRootTypes['topPathType'][] | null; // [topPathType!]
  }
  Edge: { // field return type
    childNode: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    childNodeId: string; // String!
    conditions: NexusGenRootTypes['EdgeCondition'][] | null; // [EdgeCondition!]
    createdAt: string; // String!
    id: string; // ID!
    parentNode: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    parentNodeId: string; // String!
    updatedAt: string; // String!
  }
  EdgeCondition: { // field return type
    conditionType: string; // String!
    edgeId: string | null; // String
    id: number; // Int!
    matchValue: string | null; // String
    renderMax: number | null; // Int
    renderMin: number | null; // Int
  }
  FailedDeliveryModel: { // field return type
    error: string; // String!
    record: string; // String!
  }
  FontSettings: { // field return type
    id: string; // ID!
  }
  FormNodeEntryType: { // field return type
    id: number; // Int!
    values: NexusGenRootTypes['FormNodeEntryValueType'][]; // [FormNodeEntryValueType!]!
  }
  FormNodeEntryValueType: { // field return type
    email: string | null; // String
    longText: string | null; // String
    number: number | null; // Int
    phoneNumber: string | null; // String
    relatedField: NexusGenRootTypes['FormNodeField']; // FormNodeField!
    shortText: string | null; // String
    url: string | null; // String
  }
  FormNodeField: { // field return type
    id: string; // ID!
    isRequired: boolean; // Boolean!
    label: string; // String!
    placeholder: string | null; // String
    position: number; // Int!
    type: NexusGenEnums['FormNodeFieldTypeEnum']; // FormNodeFieldTypeEnum!
  }
  FormNodeType: { // field return type
    fields: NexusGenRootTypes['FormNodeField'][]; // [FormNodeField!]!
    helperText: string | null; // String
    id: string | null; // String
  }
  ImageType: { // field return type
    encoding: string | null; // String
    filename: string | null; // String
    mimetype: string | null; // String
    url: string | null; // String
  }
  InviteUserOutput: { // field return type
    didAlreadyExist: boolean; // Boolean!
    didInvite: boolean; // Boolean!
  }
  JobObjectType: { // field return type
    createdAt: string; // String!
    createWorkspaceJob: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    createWorkspaceJobId: string; // String!
    id: string; // String!
    updatedAt: string; // String!
  }
  JobProcessLocation: { // field return type
    customFields: NexusGenRootTypes['CustomFieldType'][] | null; // [CustomFieldType!]
    id: string; // String!
    name: string; // String!
    path: string; // String!
    type: NexusGenEnums['JobProcessLocationType']; // JobProcessLocationType!
    xMaterialDimension: number; // Int!
    yMaterialDimension: number; // Int!
  }
  JobProcessLocations: { // field return type
    jobProcessLocations: NexusGenRootTypes['JobProcessLocation'][]; // [JobProcessLocation!]!
  }
  LinkType: { // field return type
    backgroundColor: string | null; // String
    iconUrl: string | null; // String
    id: string; // String!
    questionNode: NexusGenRootTypes['QuestionNode']; // QuestionNode!
    questionNodeId: string | null; // String
    title: string | null; // String
    type: string; // String!
    url: string; // String!
  }
  LoginOutput: { // field return type
    expiryDate: number; // Int!
    token: string; // String!
    user: NexusGenRootTypes['UserType']; // UserType!
  }
  Mutation: { // field return type
    appendToInteraction: NexusGenRootTypes['Session']; // Session!
    assignTags: NexusGenRootTypes['Dialogue']; // Dialogue!
    confirmCreateWorkspaceJob: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    copyDialogue: NexusGenRootTypes['Dialogue']; // Dialogue!
    createBatchDeliveries: NexusGenRootTypes['CreateBatchDeliveriesOutputType']; // CreateBatchDeliveriesOutputType!
    createCampaign: NexusGenRootTypes['CampaignType']; // CampaignType!
    createCTA: NexusGenRootTypes['QuestionNode']; // QuestionNode!
    createDialogue: NexusGenRootTypes['Dialogue']; // Dialogue!
    createJobProcessLocation: NexusGenRootTypes['JobProcessLocation']; // JobProcessLocation!
    createPermission: NexusGenRootTypes['PermssionType'] | null; // PermssionType
    createQuestion: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    createRole: NexusGenRootTypes['RoleType']; // RoleType!
    createSession: NexusGenRootTypes['Session']; // Session!
    createTag: NexusGenRootTypes['Tag']; // Tag!
    createTrigger: NexusGenRootTypes['TriggerType']; // TriggerType!
    createWorkspace: NexusGenRootTypes['Customer']; // Customer!
    deleteCTA: NexusGenRootTypes['QuestionNode']; // QuestionNode!
    deleteCustomer: NexusGenRootTypes['Customer'] | null; // Customer
    deleteDialogue: NexusGenRootTypes['Dialogue']; // Dialogue!
    deleteQuestion: NexusGenRootTypes['QuestionNode']; // QuestionNode!
    deleteTag: NexusGenRootTypes['Tag']; // Tag!
    deleteTrigger: NexusGenRootTypes['TriggerType'] | null; // TriggerType
    deleteUser: NexusGenRootTypes['DeleteUserOutput']; // DeleteUserOutput!
    duplicateQuestion: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    editDialogue: NexusGenRootTypes['Dialogue']; // Dialogue!
    editTrigger: NexusGenRootTypes['TriggerType']; // TriggerType!
    editUser: NexusGenRootTypes['UserType']; // UserType!
    editWorkspace: NexusGenRootTypes['Customer']; // Customer!
    generateAutodeck: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    inviteUser: NexusGenRootTypes['InviteUserOutput']; // InviteUserOutput!
    logout: string; // String!
    register: string | null; // String
    removePixelRange: NexusGenRootTypes['AWSImageType'] | null; // AWSImageType
    requestInvite: NexusGenRootTypes['RequestInviteOutput']; // RequestInviteOutput!
    retryAutodeckJob: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    singleUpload: NexusGenRootTypes['ImageType']; // ImageType!
    updateCreateWorkspaceJob: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    updateCTA: NexusGenRootTypes['QuestionNode']; // QuestionNode!
    updateDeliveryStatus: string; // String!
    updateQuestion: NexusGenRootTypes['QuestionNode']; // QuestionNode!
    updateRoles: NexusGenRootTypes['RoleType']; // RoleType!
    uploadJobImage: NexusGenRootTypes['AWSImageType'] | null; // AWSImageType
    verifyUserToken: NexusGenRootTypes['VerifyUserTokenOutput']; // VerifyUserTokenOutput!
    whitifyImage: NexusGenRootTypes['AWSImageType'] | null; // AWSImageType
  }
  NodeEntry: { // field return type
    creationDate: string; // String!
    depth: number | null; // Int
    id: string | null; // ID
    relatedEdgeId: string | null; // String
    relatedNode: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    relatedNodeId: string | null; // String
    value: NexusGenRootTypes['NodeEntryValue'] | null; // NodeEntryValue
  }
  NodeEntryValue: { // field return type
    choiceNodeEntry: string | null; // String
    formNodeEntry: NexusGenRootTypes['FormNodeEntryType'] | null; // FormNodeEntryType
    linkNodeEntry: string | null; // String
    registrationNodeEntry: string | null; // String
    sliderNodeEntry: number | null; // Int
    textboxNodeEntry: string | null; // String
    videoNodeEntry: string | null; // String
  }
  PaginationPageInfo: { // field return type
    nrPages: number; // Int!
    pageIndex: number; // Int!
  }
  PermssionType: { // field return type
    customer: NexusGenRootTypes['Customer'] | null; // Customer
    description: string | null; // String
    id: string; // ID!
    name: string; // String!
  }
  PreviewDataType: { // field return type
    colors: string[]; // [String!]!
    rembgLogoUrl: string; // String!
    websiteScreenshotUrl: string; // String!
  }
  Query: { // field return type
    customer: NexusGenRootTypes['Customer'] | null; // Customer
    customers: NexusGenRootTypes['Customer'][]; // [Customer!]!
    delivery: NexusGenRootTypes['DeliveryType'] | null; // DeliveryType
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogues: NexusGenRootTypes['Dialogue'][]; // [Dialogue!]!
    edge: NexusGenRootTypes['Edge'] | null; // Edge
    getAdjustedLogo: NexusGenRootTypes['AWSImageType'] | null; // AWSImageType
    getAutodeckJobs: NexusGenRootTypes['AutodeckConnectionType']; // AutodeckConnectionType!
    getJob: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    getJobProcessLocations: NexusGenRootTypes['JobProcessLocations']; // JobProcessLocations!
    getPreviewData: NexusGenRootTypes['PreviewDataType'] | null; // PreviewDataType
    lineChartData: NexusGenRootTypes['lineChartDataType'][]; // [lineChartDataType!]!
    me: NexusGenRootTypes['UserType']; // UserType!
    refreshAccessToken: NexusGenRootTypes['RefreshAccessTokenOutput']; // RefreshAccessTokenOutput!
    roleConnection: NexusGenRootTypes['RoleConnection']; // RoleConnection!
    session: NexusGenRootTypes['Session'] | null; // Session
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
    trigger: NexusGenRootTypes['TriggerType'] | null; // TriggerType
    triggerConnection: NexusGenRootTypes['TriggerConnectionType'] | null; // TriggerConnectionType
    triggers: NexusGenRootTypes['TriggerType'][]; // [TriggerType!]!
    user: NexusGenRootTypes['UserType'] | null; // UserType
    UserOfCustomer: NexusGenRootTypes['UserCustomer'] | null; // UserCustomer
    users: NexusGenRootTypes['UserType'][]; // [UserType!]!
  }
  QuestionNode: { // field return type
    children: NexusGenRootTypes['Edge'][]; // [Edge!]!
    creationDate: string | null; // String
    extraContent: string | null; // String
    form: NexusGenRootTypes['FormNodeType'] | null; // FormNodeType
    id: string; // ID!
    isLeaf: boolean; // Boolean!
    isRoot: boolean; // Boolean!
    links: NexusGenRootTypes['LinkType'][]; // [LinkType!]!
    options: NexusGenRootTypes['QuestionOption'][]; // [QuestionOption!]!
    overrideLeaf: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    overrideLeafId: string | null; // String
    questionDialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    questionDialogueId: string | null; // String
    share: NexusGenRootTypes['ShareNodeType'] | null; // ShareNodeType
    sliderNode: NexusGenRootTypes['SliderNodeType'] | null; // SliderNodeType
    title: string; // String!
    type: NexusGenEnums['QuestionNodeTypeEnum']; // QuestionNodeTypeEnum!
    updatedAt: string | null; // String
  }
  QuestionOption: { // field return type
    id: number; // Int!
    overrideLeaf: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    position: number | null; // Int
    publicValue: string | null; // String
    questionId: string | null; // String
    value: string; // String!
  }
  RefreshAccessTokenOutput: { // field return type
    accessToken: string; // String!
  }
  RequestInviteOutput: { // field return type
    didInvite: boolean; // Boolean!
    userExists: boolean; // Boolean!
  }
  RoleConnection: { // field return type
    endDate: string | null; // String
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    roles: NexusGenRootTypes['RoleType'][]; // [RoleType!]!
    startDate: string | null; // String
  }
  RoleType: { // field return type
    customerId: string | null; // String
    id: string; // ID!
    name: string; // String!
    nrPermissions: number | null; // Int
    permissions: NexusGenEnums['SystemPermission'][] | null; // [SystemPermission!]
    roleId: string | null; // String
  }
  Session: { // field return type
    createdAt: any; // Date!
    delivery: NexusGenRootTypes['DeliveryType'] | null; // DeliveryType
    deliveryId: string | null; // String
    device: string | null; // String
    dialogueId: string; // String!
    id: string; // ID!
    nodeEntries: NexusGenRootTypes['NodeEntry'][]; // [NodeEntry!]!
    originUrl: string | null; // String
    paths: number; // Int!
    score: number; // Float!
    totalTimeInSec: number | null; // Int
  }
  SessionConnection: { // field return type
    endDate: string | null; // String
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    startDate: string | null; // String
  }
  ShareNodeType: { // field return type
    createdAt: string | null; // String
    id: string; // String!
    title: string; // String!
    tooltip: string | null; // String
    updatedAt: string | null; // String
    url: string; // String!
  }
  SliderNodeMarkerType: { // field return type
    id: string; // ID!
    label: string; // String!
    range: NexusGenRootTypes['SliderNodeRangeType'] | null; // SliderNodeRangeType
    subLabel: string; // String!
  }
  SliderNodeRangeType: { // field return type
    end: number | null; // Float
    id: string; // ID!
    start: number | null; // Float
  }
  SliderNodeType: { // field return type
    happyText: string | null; // String
    id: string | null; // ID
    markers: NexusGenRootTypes['SliderNodeMarkerType'][] | null; // [SliderNodeMarkerType!]
    unhappyText: string | null; // String
  }
  Tag: { // field return type
    customerId: string; // String!
    id: string; // ID!
    name: string; // String!
    type: NexusGenEnums['TagTypeEnum']; // TagTypeEnum!
  }
  TriggerConditionType: { // field return type
    id: number; // Int!
    maxValue: number | null; // Int
    minValue: number | null; // Int
    question: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    textValue: string | null; // String
    triggerId: string; // String!
    type: NexusGenEnums['TriggerConditionEnum']; // TriggerConditionEnum!
  }
  TriggerConnectionType: { // field return type
    endDate: string | null; // String
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    startDate: string | null; // String
    triggers: NexusGenRootTypes['TriggerType'][]; // [TriggerType!]!
  }
  TriggerType: { // field return type
    conditions: NexusGenRootTypes['TriggerConditionType'][]; // [TriggerConditionType!]!
    id: string; // String!
    medium: NexusGenEnums['TriggerMediumEnum']; // TriggerMediumEnum!
    name: string; // String!
    recipients: NexusGenRootTypes['UserType'][]; // [UserType!]!
    relatedDialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    relatedNodeId: string | null; // String
    type: NexusGenEnums['TriggerTypeEnum']; // TriggerTypeEnum!
  }
  UserConnection: { // field return type
    endDate: string | null; // String
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    startDate: string | null; // String
    userCustomers: NexusGenRootTypes['UserCustomer'][]; // [UserCustomer!]!
  }
  UserCustomer: { // field return type
    customer: NexusGenRootTypes['Customer']; // Customer!
    role: NexusGenRootTypes['RoleType']; // RoleType!
    user: NexusGenRootTypes['UserType']; // UserType!
  }
  UserType: { // field return type
    customers: NexusGenRootTypes['Customer'][]; // [Customer!]!
    email: string; // String!
    firstName: string | null; // String
    globalPermissions: NexusGenEnums['SystemPermission'][] | null; // [SystemPermission!]
    id: string; // ID!
    lastName: string | null; // String
    phone: string | null; // String
    role: NexusGenRootTypes['RoleType'] | null; // RoleType
    roleId: string | null; // String
    userCustomers: NexusGenRootTypes['UserCustomer'][]; // [UserCustomer!]!
  }
  VerifyUserTokenOutput: { // field return type
    accessToken: string; // String!
    accessTokenExpiry: number; // Int!
    userData: NexusGenRootTypes['UserType']; // UserType!
  }
  lineChartDataType: { // field return type
    entryId: string | null; // String
    x: string | null; // String
    y: number | null; // Int
  }
  topPathType: { // field return type
    answer: string | null; // String
    basicSentiment: string | null; // String
    quantity: number | null; // Int
  }
  ConnectionInterface: { // field return type
    endDate: string | null; // String
    limit: number; // Int!
    offset: number; // Int!
    pageInfo: NexusGenRootTypes['PaginationPageInfo']; // PaginationPageInfo!
    startDate: string | null; // String
  }
}

export interface NexusGenArgTypes {
  CampaignType: {
    deliveryConnection: { // args
      filter?: NexusGenInputs['DeliveryConnectionFilter'] | null; // DeliveryConnectionFilter
    }
  }
  Customer: {
    campaign: { // args
      campaignId?: string | null; // String
    }
    dialogue: { // args
      where?: NexusGenInputs['DialogueWhereUniqueInput'] | null; // DialogueWhereUniqueInput
    }
    dialogues: { // args
      filter?: NexusGenInputs['DialogueFilterInputType'] | null; // DialogueFilterInputType
    }
    usersConnection: { // args
      customerSlug?: string | null; // String
      filter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
    }
  }
  Dialogue: {
    averageScore: { // args
      input?: NexusGenInputs['DialogueFilterInputType'] | null; // DialogueFilterInputType
    }
    leafs: { // args
      searchTerm?: string | null; // String
    }
    sessionConnection: { // args
      filter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
    }
    sessions: { // args
      take?: number | null; // Int
    }
    statistics: { // args
      input?: NexusGenInputs['DialogueFilterInputType'] | null; // DialogueFilterInputType
    }
  }
  Mutation: {
    appendToInteraction: { // args
      input?: NexusGenInputs['AppendToInteractionInput'] | null; // AppendToInteractionInput
    }
    assignTags: { // args
      dialogueId?: string | null; // String
      tags?: NexusGenInputs['TagsInputObjectType'] | null; // TagsInputObjectType
    }
    confirmCreateWorkspaceJob: { // args
      input?: NexusGenInputs['GenerateAutodeckInput'] | null; // GenerateAutodeckInput
    }
    copyDialogue: { // args
      input?: NexusGenInputs['CreateDialogueInputType'] | null; // CreateDialogueInputType
    }
    createBatchDeliveries: { // args
      input?: NexusGenInputs['CreateBatchDeliveriesInputType'] | null; // CreateBatchDeliveriesInputType
    }
    createCampaign: { // args
      input?: NexusGenInputs['CreateCampaignInputType'] | null; // CreateCampaignInputType
    }
    createCTA: { // args
      input?: NexusGenInputs['CreateCTAInputType'] | null; // CreateCTAInputType
    }
    createDialogue: { // args
      input?: NexusGenInputs['CreateDialogueInputType'] | null; // CreateDialogueInputType
    }
    createJobProcessLocation: { // args
      input?: NexusGenInputs['createJobProcessLocationInput'] | null; // createJobProcessLocationInput
    }
    createPermission: { // args
      data?: NexusGenInputs['PermissionInput'] | null; // PermissionInput
    }
    createQuestion: { // args
      input?: NexusGenInputs['CreateQuestionNodeInputType'] | null; // CreateQuestionNodeInputType
    }
    createRole: { // args
      data?: NexusGenInputs['RoleInput'] | null; // RoleInput
    }
    createSession: { // args
      input?: NexusGenInputs['SessionInput'] | null; // SessionInput
    }
    createTag: { // args
      customerSlug?: string | null; // String
      name?: string | null; // String
      type?: NexusGenEnums['TagTypeEnum'] | null; // TagTypeEnum
    }
    createTrigger: { // args
      input?: NexusGenInputs['CreateTriggerInputType'] | null; // CreateTriggerInputType
    }
    createWorkspace: { // args
      input?: NexusGenInputs['CreateWorkspaceInput'] | null; // CreateWorkspaceInput
    }
    deleteCTA: { // args
      input?: NexusGenInputs['DeleteNodeInputType'] | null; // DeleteNodeInputType
    }
    deleteCustomer: { // args
      where?: NexusGenInputs['CustomerWhereUniqueInput'] | null; // CustomerWhereUniqueInput
    }
    deleteDialogue: { // args
      input?: NexusGenInputs['DeleteDialogueInputType'] | null; // DeleteDialogueInputType
    }
    deleteQuestion: { // args
      input?: NexusGenInputs['DeleteNodeInputType'] | null; // DeleteNodeInputType
    }
    deleteTag: { // args
      tagId?: string | null; // String
    }
    deleteTrigger: { // args
      customerSlug?: string | null; // String
      id?: string | null; // String
    }
    deleteUser: { // args
      input?: NexusGenInputs['DeleteUserInput'] | null; // DeleteUserInput
    }
    duplicateQuestion: { // args
      questionId?: string | null; // String
    }
    editDialogue: { // args
      customerSlug?: string | null; // String
      description?: string | null; // String
      dialogueFinisherHeading?: string | null; // String
      dialogueFinisherSubheading?: string | null; // String
      dialogueSlug?: string | null; // String
      isWithoutGenData?: boolean | null; // Boolean
      language?: NexusGenEnums['LanguageEnumType'] | null; // LanguageEnumType
      publicTitle?: string | null; // String
      tags?: NexusGenInputs['TagsInputObjectType'] | null; // TagsInputObjectType
      title?: string | null; // String
    }
    editTrigger: { // args
      customerSlug?: string | null; // String
      recipients?: NexusGenInputs['RecipientsInputType'] | null; // RecipientsInputType
      trigger?: NexusGenInputs['TriggerInputType'] | null; // TriggerInputType
      triggerId?: string | null; // String
    }
    editUser: { // args
      input?: NexusGenInputs['EditUserInput'] | null; // EditUserInput
      userId?: string | null; // String
    }
    editWorkspace: { // args
      input?: NexusGenInputs['EditWorkspaceInput'] | null; // EditWorkspaceInput
    }
    generateAutodeck: { // args
      input?: NexusGenInputs['GenerateAutodeckInput'] | null; // GenerateAutodeckInput
    }
    inviteUser: { // args
      input?: NexusGenInputs['InviteUserInput'] | null; // InviteUserInput
    }
    register: { // args
      input?: NexusGenInputs['RegisterInput'] | null; // RegisterInput
    }
    removePixelRange: { // args
      input?: NexusGenInputs['RemovePixelRangeInput'] | null; // RemovePixelRangeInput
    }
    requestInvite: { // args
      input?: NexusGenInputs['RequestInviteInput'] | null; // RequestInviteInput
    }
    retryAutodeckJob: { // args
      jobId?: string | null; // String
    }
    singleUpload: { // args
      file?: any | null; // Upload
    }
    updateCreateWorkspaceJob: { // args
      errorMessage?: string | null; // String
      id?: string | null; // String
      referenceId?: string | null; // String
      resourceUrl?: string | null; // String
      status?: NexusGenEnums['JobStatusType'] | null; // JobStatusType
    }
    updateCTA: { // args
      input?: NexusGenInputs['UpdateCTAInputType'] | null; // UpdateCTAInputType
    }
    updateDeliveryStatus: { // args
      deliveryId?: string | null; // String
      status?: NexusGenEnums['DeliveryStatusEnum'] | null; // DeliveryStatusEnum
    }
    updateQuestion: { // args
      input?: NexusGenInputs['UpdateQuestionNodeInputType'] | null; // UpdateQuestionNodeInputType
    }
    updateRoles: { // args
      permissions?: NexusGenInputs['PermissionIdsInput'] | null; // PermissionIdsInput
      roleId?: string | null; // String
    }
    uploadJobImage: { // args
      disapproved?: boolean | null; // Boolean
      file?: any | null; // Upload
      jobId?: string | null; // String
      type?: NexusGenEnums['UploadImageEnumType'] | null; // UploadImageEnumType
    }
    verifyUserToken: { // args
      token?: string | null; // String
    }
    whitifyImage: { // args
      input?: NexusGenInputs['AdjustedImageInput'] | null; // AdjustedImageInput
    }
  }
  Query: {
    customer: { // args
      id?: string | null; // ID
      slug?: string | null; // String
    }
    delivery: { // args
      deliveryId?: string | null; // String
    }
    dialogue: { // args
      where?: NexusGenInputs['DialogueWhereUniqueInput'] | null; // DialogueWhereUniqueInput
    }
    dialogues: { // args
      filter?: NexusGenInputs['DialogueFilterInputType'] | null; // DialogueFilterInputType
    }
    edge: { // args
      id?: string | null; // String
    }
    getAdjustedLogo: { // args
      input?: NexusGenInputs['AdjustedImageInput'] | null; // AdjustedImageInput
    }
    getAutodeckJobs: { // args
      filter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
    }
    getJob: { // args
      id?: string | null; // String
    }
    getPreviewData: { // args
      id?: string | null; // String
    }
    lineChartData: { // args
      dialogueId?: string | null; // String
      limit?: number | null; // Int
      numberOfDaysBack?: number | null; // Int
      offset?: number | null; // Int
    }
    roleConnection: { // args
      customerId?: string | null; // String
      filter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
    }
    session: { // args
      where?: NexusGenInputs['SessionWhereUniqueInput'] | null; // SessionWhereUniqueInput
    }
    sessions: { // args
      where?: NexusGenInputs['SessionWhereUniqueInput'] | null; // SessionWhereUniqueInput
    }
    tags: { // args
      customerSlug?: string | null; // String
      dialogueId?: string | null; // String
    }
    trigger: { // args
      triggerId?: string | null; // String
    }
    triggerConnection: { // args
      customerSlug?: string | null; // String
      filter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
    }
    triggers: { // args
      customerSlug?: string | null; // String
      dialogueId?: string | null; // String
      filter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
      userId?: string | null; // String
    }
    user: { // args
      userId?: string | null; // String
    }
    UserOfCustomer: { // args
      input?: NexusGenInputs['UserOfCustomerInput'] | null; // UserOfCustomerInput
    }
    users: { // args
      customerSlug?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  ConnectionInterface: "DeliveryConnectionType" | "SessionConnection" | "UserConnection" | "AutodeckConnectionType" | "RoleConnection" | "TriggerConnectionType"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AWSImageType" | "AutodeckConnectionType" | "CampaignType" | "CampaignVariantType" | "ColourSettings" | "CreateBatchDeliveriesOutputType" | "CreateWorkspaceJobType" | "CustomFieldType" | "Customer" | "CustomerSettings" | "DeleteUserOutput" | "DeliveryConnectionType" | "DeliveryEventType" | "DeliveryType" | "Dialogue" | "DialogueFinisherObjectType" | "DialogueStatistics" | "Edge" | "EdgeCondition" | "FailedDeliveryModel" | "FontSettings" | "FormNodeEntryType" | "FormNodeEntryValueType" | "FormNodeField" | "FormNodeType" | "ImageType" | "InviteUserOutput" | "JobObjectType" | "JobProcessLocation" | "JobProcessLocations" | "LinkType" | "LoginOutput" | "Mutation" | "NodeEntry" | "NodeEntryValue" | "PaginationPageInfo" | "PermssionType" | "PreviewDataType" | "Query" | "QuestionNode" | "QuestionOption" | "RefreshAccessTokenOutput" | "RequestInviteOutput" | "RoleConnection" | "RoleType" | "Session" | "SessionConnection" | "ShareNodeType" | "SliderNodeMarkerType" | "SliderNodeRangeType" | "SliderNodeType" | "Tag" | "TriggerConditionType" | "TriggerConnectionType" | "TriggerType" | "UserConnection" | "UserCustomer" | "UserType" | "VerifyUserTokenOutput" | "lineChartDataType" | "topPathType";

export type NexusGenInputNames = "AdjustedImageInput" | "AppendToInteractionInput" | "CTALinkInputObjectType" | "CTALinksInputType" | "CTAShareInputObjectType" | "ChoiceNodeEntryInput" | "CreateBatchDeliveriesInputType" | "CreateCTAInputType" | "CreateCampaignInputType" | "CreateCampaignVariantInputType" | "CreateDialogueInputType" | "CreateQuestionNodeInputType" | "CreateTriggerInputType" | "CreateWorkspaceInput" | "CustomFieldInputType" | "CustomerWhereUniqueInput" | "DeleteDialogueInputType" | "DeleteNodeInputType" | "DeleteUserInput" | "DeliveryConnectionFilter" | "DialogueFilterInputType" | "DialogueWhereUniqueInput" | "EdgeConditionInputType" | "EditUserInput" | "EditWorkspaceInput" | "FormNodeEntryFieldInput" | "FormNodeEntryInput" | "FormNodeFieldInput" | "FormNodeInputType" | "GenerateAutodeckInput" | "GetCampaignsInput" | "InviteUserInput" | "LoginInput" | "NodeEntryDataInput" | "NodeEntryInput" | "OptionInputType" | "OptionsInputType" | "PaginationSortInput" | "PaginationWhereInput" | "PermissionIdsInput" | "PermissionInput" | "QuestionNodeWhereInputType" | "QuestionNodeWhereUniqueInput" | "RecipientsInputType" | "RegisterInput" | "RegisterNodeEntryInput" | "RemovePixelRangeInput" | "RequestInviteInput" | "RoleDataInput" | "RoleInput" | "SessionInput" | "SessionWhereUniqueInput" | "ShareNodeInputType" | "SlideNodeMarkerInput" | "SliderNodeEntryInput" | "SliderNodeInputType" | "SliderNodeRangeInputType" | "SocialNodeEntryInput" | "TagsInputObjectType" | "TextboxNodeEntryInput" | "TriggerConditionInputType" | "TriggerInputType" | "UpdateCTAInputType" | "UpdateQuestionNodeInputType" | "UserInput" | "UserOfCustomerInput" | "VideoNodeEntryInput" | "createJobProcessLocationInput";

export type NexusGenEnumNames = "CampaignVariantEnum" | "CloudReferenceType" | "DeliveryStatusEnum" | "FormNodeFieldTypeEnum" | "JobProcessLocationType" | "JobStatusType" | "LanguageEnumType" | "LinkTypeEnumType" | "PaginationSearchEnum" | "PaginationSortByEnum" | "QuestionNodeTypeEnum" | "SystemPermission" | "TagTypeEnum" | "TriggerConditionEnum" | "TriggerMediumEnum" | "TriggerTypeEnum" | "UploadImageEnumType";

export type NexusGenInterfaceNames = "ConnectionInterface";

export type NexusGenScalarNames = "Boolean" | "Date" | "Float" | "ID" | "Int" | "String" | "Upload";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: APIContext.APIContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}