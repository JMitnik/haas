/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as prisma from "@prisma/client"
import type { APIContext } from "./../types/APIContext"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-string follows format "dd-MM-yyyy HH:mm", "dd-MM-yyyy" or ISO format, and is resolved to a relevant Date object.
     */
    dateString<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateString";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSONObject";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-string follows format "dd-MM-yyyy HH:mm", "dd-MM-yyyy" or ISO format, and is resolved to a relevant Date object.
     */
    dateString<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateString";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSONObject";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AdjustedImageInput: { // input type
    bucket?: string | null; // String
    id?: string | null; // String
    key?: string | null; // String
    reset?: boolean | null; // Boolean
  }
  AppendToInteractionInput: { // input type
    data?: NexusGenInputs['NodeEntryDataInput'] | null; // NodeEntryDataInput
    edgeId?: string | null; // String
    nodeId?: string | null; // String
    sessionId?: string | null; // ID
  }
  AssignUserToDialoguesInput: { // input type
    assignedDialogueIds?: string[] | null; // [String!]
    userId: string; // String!
    workspaceId: string; // String!
  }
  AuthenticateLambdaInput: { // input type
    authenticateEmail?: string | null; // String
    workspaceEmail?: string | null; // String
  }
  AutomationActionChannelInput: { // input type
    id?: string | null; // ID
  }
  AutomationActionInput: { // input type
    apiKey?: string | null; // String
    channels?: Array<NexusGenInputs['AutomationActionChannelInput'] | null> | null; // [AutomationActionChannelInput]
    endpoint?: string | null; // String
    id?: string | null; // ID
    payload?: NexusGenScalars['JSONObject'] | null; // JSONObject
    type?: NexusGenEnums['AutomationActionType'] | null; // AutomationActionType
  }
  AutomationConditionBuilderInput: { // input type
    childConditionBuilder?: NexusGenInputs['AutomationConditionBuilderInput'] | null; // AutomationConditionBuilderInput
    conditions?: Array<NexusGenInputs['CreateAutomationCondition'] | null> | null; // [CreateAutomationCondition]
    id?: string | null; // ID
    type?: NexusGenEnums['AutomationConditionBuilderType'] | null; // AutomationConditionBuilderType
  }
  AutomationConnectionFilterInput: { // input type
    label?: string | null; // String
    offset?: number | null; // Int
    orderBy?: NexusGenInputs['AutomationConnectionOrderByInput'] | null; // AutomationConnectionOrderByInput
    perPage: number | null; // Int
    search?: string | null; // String
    type?: NexusGenEnums['AutomationType'] | null; // AutomationType
  }
  AutomationConnectionOrderByInput: { // input type
    by: NexusGenEnums['AutomationConnectionOrderType']; // AutomationConnectionOrderType!
    desc: boolean | null; // Boolean
  }
  AutomationEventInput: { // input type
    dialogueId?: string | null; // String
    eventType?: NexusGenEnums['AutomationEventType'] | null; // AutomationEventType
    id?: string | null; // ID
    questionId?: string | null; // String
  }
  AutomationScheduleInput: { // input type
    dayOfMonth: string; // String!
    dayOfWeek: string; // String!
    dialogueId?: string | null; // String
    hours: string; // String!
    id?: string | null; // ID
    minutes: string; // String!
    month: string; // String!
    type: NexusGenEnums['RecurringPeriodType']; // RecurringPeriodType!
  }
  CTALinkInputObjectType: { // input type
    backgroundColor?: string | null; // String
    buttonText?: string | null; // String
    header?: string | null; // String
    iconUrl?: string | null; // String
    id?: string | null; // String
    imageUrl?: string | null; // String
    subHeader?: string | null; // String
    title?: string | null; // String
    type?: NexusGenEnums['LinkTypeEnumType'] | null; // LinkTypeEnumType
    url?: string | null; // String
  }
  CTALinksInputType: { // input type
    linkTypes?: Array<NexusGenInputs['CTALinkInputObjectType'] | null> | null; // [CTALinkInputObjectType]
  }
  CTAShareInputObjectType: { // input type
    id?: string | null; // String
    title?: string | null; // String
    tooltip?: string | null; // String
    url?: string | null; // String
  }
  ChoiceNodeEntryInput: { // input type
    value?: string | null; // String
  }
  ConditionDialogueScopeInput: { // input type
    aggregate?: NexusGenInputs['ConditionPropertyAggregateInput'] | null; // ConditionPropertyAggregateInput
    aspect?: NexusGenEnums['DialogueAspectType'] | null; // DialogueAspectType
    id?: string | null; // ID
  }
  ConditionPropertyAggregateInput: { // input type
    endDate?: string | null; // String
    id?: string | null; // ID
    latest?: number | null; // Int
    startDate?: string | null; // String
    type?: NexusGenEnums['ConditionPropertyAggregateType'] | null; // ConditionPropertyAggregateType
  }
  ConditionQuestionScopeInput: { // input type
    aggregate?: NexusGenInputs['ConditionPropertyAggregateInput'] | null; // ConditionPropertyAggregateInput
    aspect?: NexusGenEnums['QuestionAspectType'] | null; // QuestionAspectType
    id?: string | null; // ID
  }
  ConditionScopeInput: { // input type
    dialogueScope?: NexusGenInputs['ConditionDialogueScopeInput'] | null; // ConditionDialogueScopeInput
    id?: string | null; // ID
    questionScope?: NexusGenInputs['ConditionQuestionScopeInput'] | null; // ConditionQuestionScopeInput
    type?: NexusGenEnums['AutomationConditionScopeType'] | null; // AutomationConditionScopeType
    workspaceScope?: NexusGenInputs['ConditionWorkspaceScopeInput'] | null; // ConditionWorkspaceScopeInput
  }
  ConditionWorkspaceScopeInput: { // input type
    aggregate?: NexusGenInputs['ConditionPropertyAggregateInput'] | null; // ConditionPropertyAggregateInput
    aspect?: NexusGenEnums['WorkspaceAspectType'] | null; // WorkspaceAspectType
    id?: string | null; // ID
  }
  CreateAutomationCondition: { // input type
    dialogueId?: string | null; // String
    id?: string | null; // ID
    operands?: Array<NexusGenInputs['CreateAutomationOperandInput'] | null> | null; // [CreateAutomationOperandInput]
    operator?: NexusGenEnums['AutomationConditionOperatorType'] | null; // AutomationConditionOperatorType
    questionId?: string | null; // String
    scope?: NexusGenInputs['ConditionScopeInput'] | null; // ConditionScopeInput
    workspaceId?: string | null; // String
  }
  CreateAutomationInput: { // input type
    actions?: Array<NexusGenInputs['AutomationActionInput'] | null> | null; // [AutomationActionInput]
    automationType?: NexusGenEnums['AutomationType'] | null; // AutomationType
    description?: string | null; // String
    event?: NexusGenInputs['AutomationEventInput'] | null; // AutomationEventInput
    id?: string | null; // ID
    label?: string | null; // String
    schedule?: NexusGenInputs['AutomationScheduleInput'] | null; // AutomationScheduleInput
    workspaceId?: string | null; // String
  }
  CreateAutomationOperandInput: { // input type
    dateTimeValue?: string | null; // String
    id?: string | null; // ID
    numberValue?: number | null; // Int
    operandType?: NexusGenEnums['OperandType'] | null; // OperandType
    textValue?: string | null; // String
  }
  CreateBatchDeliveriesInputType: { // input type
    batchScheduledAt?: string | null; // String
    campaignId?: string | null; // ID
    uploadedCsv?: NexusGenScalars['Upload'] | null; // Upload
    workspaceId?: string | null; // String
  }
  CreateCTAInputType: { // input type
    customerSlug?: string | null; // String
    dialogueSlug?: string | null; // String
    form?: NexusGenInputs['FormNodeInputType'] | null; // FormNodeInputType
    links?: NexusGenInputs['CTALinksInputType'] | null; // CTALinksInputType
    questionId?: string | null; // String
    share?: NexusGenInputs['ShareNodeInputType'] | null; // ShareNodeInputType
    title?: string | null; // String
    type?: string | null; // String
  }
  CreateCampaignCustomVariable: { // input type
    key?: string | null; // String
  }
  CreateCampaignInputType: { // input type
    label?: string | null; // String
    variants?: Array<NexusGenInputs['CreateCampaignVariantInputType'] | null> | null; // [CreateCampaignVariantInputType]
    workspaceId: string; // ID!
  }
  CreateCampaignVariantInputType: { // input type
    body?: string | null; // String
    customVariables?: Array<NexusGenInputs['CreateCampaignCustomVariable'] | null> | null; // [CreateCampaignCustomVariable]
    dialogueId: string; // ID!
    from?: string | null; // String
    label?: string | null; // String
    subject?: string | null; // String
    type: NexusGenEnums['CampaignVariantEnum']; // CampaignVariantEnum!
    weight?: number | null; // Float
    workspaceId: string; // ID!
  }
  CreateDialogueInputType: { // input type
    contentType?: string | null; // String
    customerSlug?: string | null; // String
    description?: string | null; // String
    dialogueSlug?: string | null; // String
    isSeed?: boolean | null; // Boolean
    language?: NexusGenEnums['LanguageEnumType'] | null; // LanguageEnumType
    publicTitle?: string | null; // String
    tags?: NexusGenInputs['TagsInputObjectType'] | null; // TagsInputObjectType
    templateDialogueId?: string | null; // String
    title?: string | null; // String
  }
  CreateQuestionNodeInputType: { // input type
    customerId?: string | null; // ID
    dialogueSlug?: string | null; // String
    edgeCondition?: NexusGenInputs['EdgeConditionInputType'] | null; // EdgeConditionInputType
    extraContent?: string | null; // String
    happyText?: string | null; // String
    optionEntries?: NexusGenInputs['OptionsInputType'] | null; // OptionsInputType
    overrideLeafId?: string | null; // ID
    parentQuestionId?: string | null; // ID
    title?: string | null; // String
    type?: string | null; // String
    unhappyText?: string | null; // String
  }
  CreateTriggerInputType: { // input type
    customerSlug?: string | null; // String
    recipients?: NexusGenInputs['RecipientsInputType'] | null; // RecipientsInputType
    trigger?: NexusGenInputs['TriggerInputType'] | null; // TriggerInputType
  }
  CreateWorkspaceInput: { // input type
    isDemo?: boolean | null; // Boolean
    isSeed?: boolean | null; // Boolean
    logo?: string | null; // String
    logoOpacity?: number | null; // Int
    name: string; // String!
    primaryColour: string; // String!
    slug: string; // String!
    willGenerateFakeData?: boolean | null; // Boolean
  }
  CustomFieldInputType: { // input type
    key?: string | null; // String
    value?: string | null; // String
  }
  CustomerWhereUniqueInput: { // input type
    id: string; // ID!
  }
  DeleteAutomationInput: { // input type
    automationId: string; // String!
    workspaceId: string; // String!
  }
  DeleteDialogueInputType: { // input type
    customerSlug?: string | null; // String
    id?: string | null; // ID
  }
  DeleteNodeInputType: { // input type
    customerId?: string | null; // ID
    dialogueSlug?: string | null; // String
    id?: string | null; // String
  }
  DeleteUserInput: { // input type
    customerId?: string | null; // ID
    userId?: string | null; // ID
  }
  DeliveryConnectionFilterInput: { // input type
    campaignVariantId?: string | null; // String
    endDate?: string | null; // String
    offset?: number | null; // Int
    orderBy?: NexusGenInputs['DeliveryConnectionOrderByInput'] | null; // DeliveryConnectionOrderByInput
    perPage: number | null; // Int
    recipientEmail?: string | null; // String
    recipientFirstName?: string | null; // String
    recipientLastName?: string | null; // String
    recipientPhoneNumber?: string | null; // String
    search?: string | null; // String
    startDate?: string | null; // String
    status?: NexusGenEnums['DeliveryStatusEnum'] | null; // DeliveryStatusEnum
  }
  DeliveryConnectionOrderByInput: { // input type
    by: NexusGenEnums['DeliveryConnectionOrder']; // DeliveryConnectionOrder!
    desc: boolean | null; // Boolean
  }
  DeselectTopicInput: { // input type
    topic: string; // String!
    workspaceId: string; // ID!
  }
  DialogueConnectionFilterInput: { // input type
    endDate?: string | null; // String
    offset?: number | null; // Int
    orderBy?: NexusGenInputs['DialogueConnectionOrderByInput'] | null; // DialogueConnectionOrderByInput
    perPage: number | null; // Int
    searchTerm?: string | null; // String
    startDate?: string | null; // String
  }
  DialogueConnectionOrderByInput: { // input type
    by: NexusGenEnums['DialogueConnectionOrder']; // DialogueConnectionOrder!
    desc: boolean | null; // Boolean
  }
  DialogueFilterInputType: { // input type
    endDate?: string | null; // String
    searchTerm?: string | null; // String
    startDate?: string | null; // String
  }
  DialogueStatisticsSummaryFilterInput: { // input type
    cutoff?: number | null; // Int
    endDateTime?: string | null; // String
    impactType: NexusGenEnums['DialogueImpactScoreType']; // DialogueImpactScoreType!
    refresh?: boolean | null; // Boolean
    startDateTime: string; // String!
    topicsFilter?: NexusGenInputs['TopicFilterInput'] | null; // TopicFilterInput
  }
  DialogueWhereUniqueInput: { // input type
    id?: string | null; // ID
    slug?: string | null; // String
  }
  EdgeConditionInputType: { // input type
    conditionType?: string | null; // String
    id?: number | null; // Int
    matchValue?: string | null; // String
    renderMax?: number | null; // Int
    renderMin?: number | null; // Int
  }
  EditUserInput: { // input type
    customerId?: string | null; // String
    email: string; // String!
    firstName?: string | null; // String
    lastName?: string | null; // String
    phone?: string | null; // String
    roleId?: string | null; // String
  }
  EditWorkspaceInput: { // input type
    customerSlug: string; // String!
    id: string; // ID!
    logo?: string | null; // String
    logoOpacity?: number | null; // Int
    name: string; // String!
    primaryColour: string; // String!
    slug: string; // String!
  }
  EnableAutomationInput: { // input type
    automationId: string; // String!
    state: boolean; // Boolean!
    workspaceId: string; // String!
  }
  FindRoleInput: { // input type
    roleId?: string | null; // String
    userId?: string | null; // String
  }
  FormNodeEntryFieldInput: { // input type
    contacts?: string | null; // String
    email?: string | null; // String
    longText?: string | null; // String
    number?: number | null; // Int
    phoneNumber?: string | null; // String
    relatedFieldId?: string | null; // ID
    shortText?: string | null; // String
    url?: string | null; // String
  }
  FormNodeEntryInput: { // input type
    values?: Array<NexusGenInputs['FormNodeEntryFieldInput'] | null> | null; // [FormNodeEntryFieldInput]
  }
  FormNodeFieldInput: { // input type
    id?: string | null; // ID
    isRequired?: boolean | null; // Boolean
    label?: string | null; // String
    placeholder?: string | null; // String
    position?: number | null; // Int
    type?: NexusGenEnums['FormNodeFieldTypeEnum'] | null; // FormNodeFieldTypeEnum
    userIds?: Array<string | null> | null; // [String]
  }
  FormNodeInputType: { // input type
    fields?: NexusGenInputs['FormNodeFieldInput'][] | null; // [FormNodeFieldInput!]
    helperText?: string | null; // String
    id?: string | null; // String
  }
  GenerateAutodeckInput: { // input type
    answer1?: string | null; // String
    answer2?: string | null; // String
    answer3?: string | null; // String
    answer4?: string | null; // String
    companyName?: string | null; // String
    customFields?: Array<NexusGenInputs['CustomFieldInputType'] | null> | null; // [CustomFieldInputType]
    emailContent?: string | null; // String
    firstName?: string | null; // String
    id: string; // String!
    isGenerateWorkspace?: boolean | null; // Boolean
    jobLocationId?: string | null; // String
    logo?: string | null; // String
    name?: string | null; // String
    newCustomFields?: Array<NexusGenInputs['CustomFieldInputType'] | null> | null; // [CustomFieldInputType]
    primaryColour?: string | null; // String
    requiresColorExtraction: boolean; // Boolean!
    requiresRembgLambda: boolean; // Boolean!
    requiresWebsiteScreenshot: boolean; // Boolean!
    reward?: string | null; // String
    slug?: string | null; // String
    sorryAboutX?: string | null; // String
    standardFields?: Array<NexusGenInputs['CustomFieldInputType'] | null> | null; // [CustomFieldInputType]
    textMessage?: string | null; // String
    usesAdjustedLogo: boolean; // Boolean!
    website?: string | null; // String
    youLoveX?: string | null; // String
  }
  GenerateWorkspaceCSVInputType: { // input type
    generateDemoData?: boolean | null; // Boolean
    isDemo: boolean; // Boolean!
    managerCsv?: NexusGenScalars['Upload'] | null; // Upload
    type: string; // String!
    uploadedCsv?: NexusGenScalars['Upload'] | null; // Upload
    workspaceSlug: string; // String!
    workspaceTitle: string; // String!
  }
  GetAutomationInput: { // input type
    id?: string | null; // String
  }
  GetAutomationsByWorkspaceInput: { // input type
    workspaceId?: string | null; // String
  }
  GetCampaignsInput: { // input type
    customerSlug?: string | null; // String
  }
  HandleUserStateInWorkspaceInput: { // input type
    isActive?: boolean | null; // Boolean
    userId?: string | null; // String
    workspaceId?: string | null; // String
  }
  HealthScoreInput: { // input type
    endDateTime?: string | null; // String
    startDateTime: string; // String!
    threshold: number | null; // Float
    topicFilter?: NexusGenInputs['TopicFilterInput'] | null; // TopicFilterInput
  }
  InviteUserInput: { // input type
    customerId: string; // String!
    email: string; // String!
    roleId: string; // String!
  }
  IssueFilterInput: { // input type
    dialogueStrings?: string[] | null; // [String!]
    endDate?: string | null; // String
    startDate?: string | null; // String
    topicStrings?: string[] | null; // [String!]
  }
  LoginInput: { // input type
    email: string; // String!
  }
  MassSeedInput: { // input type
    customerId: string; // String!
    maxGroups: number; // Int!
    maxSessions: number; // Int!
    maxTeams: number; // Int!
  }
  NodeEntryDataInput: { // input type
    choice?: NexusGenInputs['ChoiceNodeEntryInput'] | null; // ChoiceNodeEntryInput
    form?: NexusGenInputs['FormNodeEntryInput'] | null; // FormNodeEntryInput
    register?: NexusGenInputs['RegisterNodeEntryInput'] | null; // RegisterNodeEntryInput
    slider?: NexusGenInputs['SliderNodeEntryInput'] | null; // SliderNodeEntryInput
    textbox?: NexusGenInputs['TextboxNodeEntryInput'] | null; // TextboxNodeEntryInput
    video?: NexusGenInputs['VideoNodeEntryInput'] | null; // VideoNodeEntryInput
  }
  NodeEntryInput: { // input type
    data?: NexusGenInputs['NodeEntryDataInput'] | null; // NodeEntryDataInput
    depth?: number | null; // Int
    edgeId?: string | null; // String
    nodeId?: string | null; // String
  }
  OptionInputType: { // input type
    id?: number | null; // Int
    isTopic?: boolean | null; // Boolean
    overrideLeafId?: string | null; // String
    position: number; // Int!
    publicValue?: string | null; // String
    value?: string | null; // String
  }
  OptionsInputType: { // input type
    options?: Array<NexusGenInputs['OptionInputType'] | null> | null; // [OptionInputType]
  }
  PaginationSortInput: { // input type
    by: NexusGenEnums['PaginationSortByEnum']; // PaginationSortByEnum!
    desc: boolean | null; // Boolean
  }
  PaginationWhereInput: { // input type
    cursor?: string | null; // String
    endDate?: string | null; // String
    limit?: number | null; // Int
    offset?: number | null; // Int
    orderBy?: Array<NexusGenInputs['PaginationSortInput'] | null> | null; // [PaginationSortInput]
    pageIndex?: number | null; // Int
    search?: string | null; // String
    searchTerm?: string | null; // String
    startDate?: string | null; // String
  }
  PathedSessionsInput: { // input type
    endDateTime?: string | null; // String
    issueOnly?: boolean | null; // Boolean
    path?: string[] | null; // [String!]
    refresh?: boolean | null; // Boolean
    startDateTime: string; // String!
  }
  PermissionIdsInput: { // input type
    ids?: Array<string | null> | null; // [String]
  }
  PermissionInput: { // input type
    customerId?: string | null; // String
    description?: string | null; // String
    name?: string | null; // String
  }
  PickerEntryInput: { // input type
    label: string; // String!
    type: string; // String!
    value: string; // String!
  }
  QuestionNodeWhereInputType: { // input type
    id?: string | null; // ID
    isRoot?: boolean | null; // Boolean
  }
  QuestionNodeWhereUniqueInput: { // input type
    id: string; // String!
  }
  QuestionStatisticsSummaryFilterInput: { // input type
    endDateTime?: string | null; // String
    impactTreshold?: number | null; // Int
    impactType: NexusGenEnums['QuestionImpactScoreType']; // QuestionImpactScoreType!
    refresh?: boolean | null; // Boolean
    startDateTime: string; // String!
  }
  QuestionWhereUniqueInput: { // input type
    id: string; // ID!
  }
  RecipientsInputType: { // input type
    ids?: Array<string | null> | null; // [String]
  }
  RegisterInput: { // input type
    customerId: string; // String!
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
    roleId?: string | null; // String
  }
  RegisterNodeEntryInput: { // input type
    value?: string | null; // String
  }
  RemovePixelRangeInput: { // input type
    blue?: number | null; // Int
    bucket?: string | null; // String
    green?: number | null; // Int
    key?: string | null; // String
    range?: number | null; // Int
    red?: number | null; // Int
  }
  RequestInviteInput: { // input type
    email: string; // String!
  }
  RoleDataInput: { // input type
    description?: string | null; // String
    name?: string | null; // String
  }
  RoleInput: { // input type
    customerId?: string | null; // String
    description?: string | null; // String
    name?: string | null; // String
    permissions?: Array<NexusGenEnums['SystemPermission'] | null> | null; // [SystemPermission]
  }
  SandboxInput: { // input type
    name?: string | null; // String
    onlyGet?: boolean | null; // Boolean
    value?: number | null; // Int
  }
  SendAutomationDialogueLinkInput: { // input type
    automationActionId: string; // String!
    workspaceSlug: string; // String!
  }
  SendAutomationReportInput: { // input type
    automationActionId: string; // String!
    reportUrl: string; // String!
    workspaceSlug: string; // String!
  }
  SessionConnectionFilterInput: { // input type
    campaignVariantId?: string | null; // String
    deliveryType?: NexusGenEnums['SessionDeliveryType'] | null; // SessionDeliveryType
    dialogueIds?: string[] | null; // [String!]
    endDate?: NexusGenScalars['DateString'] | null; // DateString
    offset?: number | null; // Int
    orderBy?: NexusGenInputs['SessionConnectionOrderByInput'] | null; // SessionConnectionOrderByInput
    perPage: number | null; // Int
    scoreRange?: NexusGenInputs['SessionScoreRangeFilter'] | null; // SessionScoreRangeFilter
    search?: string | null; // String
    startDate?: NexusGenScalars['DateString'] | null; // DateString
    withFollowUpAction?: boolean | null; // Boolean
  }
  SessionConnectionOrderByInput: { // input type
    by: NexusGenEnums['SessionConnectionOrder']; // SessionConnectionOrder!
    desc: boolean | null; // Boolean
  }
  SessionInput: { // input type
    createdAt?: string | null; // String
    deliveryId?: string | null; // String
    device?: string | null; // String
    dialogueId: string; // String!
    entries?: Array<NexusGenInputs['NodeEntryInput'] | null> | null; // [NodeEntryInput]
    originUrl?: string | null; // String
    totalTimeInSec?: number | null; // Int
  }
  SessionScoreRangeFilter: { // input type
    max?: number | null; // Int
    min?: number | null; // Int
  }
  SessionWhereUniqueInput: { // input type
    dialogueId?: string | null; // ID
    id?: string | null; // ID
  }
  SetDialoguePrivacyInput: { // input type
    customerId: string; // String!
    dialogueSlug: string; // String!
    state: boolean; // Boolean!
  }
  ShareNodeInputType: { // input type
    id?: string | null; // String
    title?: string | null; // String
    tooltip?: string | null; // String
    url?: string | null; // String
  }
  SlideNodeMarkerInput: { // input type
    id?: string | null; // ID
    label: string; // String!
    range?: NexusGenInputs['SliderNodeRangeInputType'] | null; // SliderNodeRangeInputType
    subLabel: string; // String!
  }
  SliderNodeEntryInput: { // input type
    value?: number | null; // Int
  }
  SliderNodeInputType: { // input type
    id?: string | null; // ID
    markers?: NexusGenInputs['SlideNodeMarkerInput'][] | null; // [SlideNodeMarkerInput!]
  }
  SliderNodeRangeInputType: { // input type
    end?: number | null; // Float
    start?: number | null; // Float
  }
  SocialNodeEntryInput: { // input type
    visitedLink?: string | null; // String
  }
  TagsInputObjectType: { // input type
    entries?: Array<string | null> | null; // [String]
  }
  TextboxNodeEntryInput: { // input type
    value?: string | null; // String
  }
  TopicFilterInput: { // input type
    dialogueStrings?: string[] | null; // [String!]
    relatedSessionScoreLowerThreshold?: number | null; // Float
    topicStrings?: string[] | null; // [String!]
  }
  TopicInputType: { // input type
    endDateTime?: string | null; // String
    impactScoreType: NexusGenEnums['DialogueImpactScoreType']; // DialogueImpactScoreType!
    isRoot?: boolean | null; // Boolean
    refresh?: boolean | null; // Boolean
    startDateTime: string; // String!
    value: string; // String!
  }
  TriggerConditionInputType: { // input type
    id?: number | null; // Int
    maxValue?: number | null; // Int
    minValue?: number | null; // Int
    questionId?: string | null; // String
    textValue?: string | null; // String
    type?: NexusGenEnums['TriggerConditionEnum'] | null; // TriggerConditionEnum
  }
  TriggerInputType: { // input type
    conditions?: Array<NexusGenInputs['TriggerConditionInputType'] | null> | null; // [TriggerConditionInputType]
    medium?: NexusGenEnums['TriggerMediumEnum'] | null; // TriggerMediumEnum
    name?: string | null; // String
    type?: NexusGenEnums['TriggerTypeEnum'] | null; // TriggerTypeEnum
  }
  UpdateCTAInputType: { // input type
    customerId?: string | null; // ID
    customerSlug: string; // String!
    form?: NexusGenInputs['FormNodeInputType'] | null; // FormNodeInputType
    id?: string | null; // String
    links?: NexusGenInputs['CTALinksInputType'] | null; // CTALinksInputType
    share?: NexusGenInputs['ShareNodeInputType'] | null; // ShareNodeInputType
    title?: string | null; // String
    type?: NexusGenEnums['QuestionNodeTypeEnum'] | null; // QuestionNodeTypeEnum
  }
  UpdatePermissionsInput: { // input type
    permissions?: Array<NexusGenEnums['SystemPermission'] | null> | null; // [SystemPermission]
    roleId?: string | null; // String
  }
  UpdateQuestionNodeInputType: { // input type
    customerId?: string | null; // ID
    edgeCondition?: NexusGenInputs['EdgeConditionInputType'] | null; // EdgeConditionInputType
    edgeId?: string | null; // ID
    extraContent?: string | null; // String
    happyText?: string | null; // String
    id: string; // ID!
    optionEntries?: NexusGenInputs['OptionsInputType'] | null; // OptionsInputType
    overrideLeafId?: string | null; // ID
    sliderNode?: NexusGenInputs['SliderNodeInputType'] | null; // SliderNodeInputType
    title?: string | null; // String
    type?: string | null; // String
    unhappyText?: string | null; // String
  }
  UploadSellImageInputType: { // input type
    file?: NexusGenScalars['Upload'] | null; // Upload
    workspaceId?: string | null; // String
  }
  UserConnectionFilterInput: { // input type
    email?: string | null; // String
    endDate?: string | null; // String
    firstName?: string | null; // String
    lastName?: string | null; // String
    offset?: number | null; // Int
    orderBy?: NexusGenInputs['UserConnectionOrderByInput'] | null; // UserConnectionOrderByInput
    perPage: number | null; // Int
    role?: string | null; // String
    search?: string | null; // String
    startDate?: string | null; // String
  }
  UserConnectionOrderByInput: { // input type
    by: NexusGenEnums['UserConnectionOrder']; // UserConnectionOrder!
    desc: boolean | null; // Boolean
  }
  UserInput: { // input type
    customerId?: string | null; // String
    email: string; // String!
    firstName?: string | null; // String
    lastName?: string | null; // String
    password?: string | null; // String
    phone?: string | null; // String
    roleId?: string | null; // String
  }
  UserOfCustomerInput: { // input type
    customerId?: string | null; // String
    customerSlug?: string | null; // String
    userId?: string | null; // String
    workspaceId?: string | null; // String
  }
  VideoNodeEntryInput: { // input type
    value?: string | null; // String
  }
  createJobProcessLocationInput: { // input type
    name?: string | null; // String
    path?: string | null; // String
    type?: NexusGenEnums['JobProcessLocationType'] | null; // JobProcessLocationType
  }
}

export interface NexusGenEnums {
  AutomationActionChannelType: prisma.AutomationActionChannelType
  AutomationActionType: prisma.AutomationActionType
  AutomationConditionBuilderType: prisma.AutomationConditionBuilderType
  AutomationConditionOperatorType: prisma.AutomationConditionOperatorType
  AutomationConditionScopeType: prisma.AutomationConditionScopeType
  AutomationConnectionOrderType: "createdAt" | "type" | "updatedAt"
  AutomationEventType: prisma.AutomationEventType
  AutomationType: prisma.AutomationType
  CampaignVariantEnum: "EMAIL" | "QUEUE" | "SMS"
  CloudReferenceType: prisma.CloudReferenceType
  ConditionPropertyAggregateType: prisma.ConditionPropertyAggregateType
  DeliveryConnectionOrder: "createdAt"
  DeliveryStatusEnum: "DELIVERED" | "DEPLOYED" | "FAILED" | "FINISHED" | "OPENED" | "SCHEDULED" | "SENT"
  DialogueAspectType: "GENERAL_SCORE" | "LATEST_SCORE" | "NR_INTERACTIONS" | "NR_VISITORS"
  DialogueConnectionOrder: "createdAt"
  DialogueImpactScoreType: "AVERAGE"
  DialogueTemplateType: prisma.DialogueTemplateType
  FormNodeFieldTypeEnum: "contacts" | "email" | "longText" | "number" | "phoneNumber" | "shortText" | "url"
  JobProcessLocationType: prisma.JobProcessLocationType
  JobStatusType: prisma.JobStatusType
  LanguageEnumType: "DUTCH" | "ENGLISH" | "GERMAN"
  LinkTypeEnumType: "API" | "FACEBOOK" | "INSTAGRAM" | "LINKEDIN" | "SINGLE" | "SOCIAL" | "TWITTER" | "WHATSAPP"
  OperandType: prisma.OperandType
  OrganizationLayerType: "DIALOGUE" | "GROUP" | "INTERACTION"
  PaginationSearchEnum: "email" | "firstName" | "lastName" | "name" | "publicTitle" | "title"
  PaginationSortByEnum: "createdAt" | "email" | "firstName" | "id" | "lastName" | "medium" | "name" | "paths" | "role" | "scheduledAt" | "score" | "type" | "updatedAt" | "user" | "when"
  QuestionAspectType: "ANSWER_SPEED" | "NODE_VALUE"
  QuestionImpactScoreType: "PERCENTAGE"
  QuestionNodeTypeEnum: "CHOICE" | "FORM" | "GENERIC" | "LINK" | "REGISTRATION" | "SHARE" | "SLIDER" | "TEXTBOX" | "VIDEO_EMBEDDED"
  RecurringPeriodType: prisma.RecurringPeriodType
  SessionActionType: "CONTACT"
  SessionConnectionOrder: "createdAt" | "dialogueId"
  SessionDeliveryType: "campaigns" | "noCampaigns"
  StatusType: "CLOSED" | "IN_PROGRESS" | "OPEN"
  SystemPermission: "CAN_ACCESS_ADMIN_PANEL" | "CAN_ACCESS_REPORT_PAGE" | "CAN_ADD_USERS" | "CAN_ASSIGN_USERS_TO_DIALOGUE" | "CAN_BUILD_DIALOGUE" | "CAN_CREATE_AUTOMATIONS" | "CAN_CREATE_CAMPAIGNS" | "CAN_CREATE_DELIVERIES" | "CAN_CREATE_TRIGGERS" | "CAN_DELETE_DIALOGUE" | "CAN_DELETE_TRIGGERS" | "CAN_DELETE_USERS" | "CAN_DELETE_WORKSPACE" | "CAN_DOWNLOAD_REPORTS" | "CAN_EDIT_DIALOGUE" | "CAN_EDIT_USERS" | "CAN_EDIT_WORKSPACE" | "CAN_GENERATE_WORKSPACE_FROM_CSV" | "CAN_RESET_WORKSPACE_DATA" | "CAN_UPDATE_AUTOMATIONS" | "CAN_VIEW_AUTOMATIONS" | "CAN_VIEW_CAMPAIGNS" | "CAN_VIEW_DIALOGUE" | "CAN_VIEW_DIALOGUE_ANALYTICS" | "CAN_VIEW_USERS"
  TagTypeEnum: "AGENT" | "DEFAULT" | "LOCATION"
  TriggerConditionEnum: prisma.TriggerConditionEnum
  TriggerMediumEnum: "BOTH" | "EMAIL" | "PHONE"
  TriggerTypeEnum: "QUESTION" | "SCHEDULED"
  UploadImageEnumType: "LOGO" | "WEBSITE_SCREENSHOT"
  UserConnectionOrder: "createdAt" | "email" | "firstName" | "isActive" | "lastActivity" | "lastName" | "role"
  WorkspaceAspectType: "GENERAL_SCORE" | "NR_INTERACTIONS" | "NR_VISITORS"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateString: any
  JSONObject: any
  Upload: any
}

export interface NexusGenObjects {
  AWSImageType: { // root type
    encoding?: string | null; // String
    filename?: string | null; // String
    mimetype?: string | null; // String
    url?: string | null; // String
  }
  AssignedDialogues: { // root type
    assignedDialogues?: NexusGenRootTypes['Dialogue'][] | null; // [Dialogue!]
    privateWorkspaceDialogues?: NexusGenRootTypes['Dialogue'][] | null; // [Dialogue!]
  }
  AutodeckConnectionType: { // root type
    cursor?: string | null; // String
    endDate?: string | null; // String
    jobs?: Array<NexusGenRootTypes['CreateWorkspaceJobType'] | null> | null; // [CreateWorkspaceJobType]
    limit?: number | null; // Int
    offset?: number | null; // Int
    pageInfo?: NexusGenRootTypes['DeprecatedPaginationPageInfo'] | null; // DeprecatedPaginationPageInfo
    startDate?: string | null; // String
  }
  AutomationActionChannel: prisma.AutomationActionChannel;
  AutomationActionModel: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    id?: string | null; // ID
    payload?: NexusGenScalars['JSONObject'] | null; // JSONObject
    type?: NexusGenEnums['AutomationActionType'] | null; // AutomationActionType
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  AutomationConditionBuilderModel: { // root type
    childConditionBuilderId?: string | null; // String
    conditions?: Array<NexusGenRootTypes['AutomationConditionModel'] | null> | null; // [AutomationConditionModel]
    id?: string | null; // ID
    type?: NexusGenEnums['AutomationConditionBuilderType'] | null; // AutomationConditionBuilderType
  }
  AutomationConditionModel: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    dialogue?: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogueScope?: NexusGenRootTypes['DialogueConditionScopeModel'] | null; // DialogueConditionScopeModel
    id?: string | null; // ID
    operands?: Array<NexusGenRootTypes['AutomationConditionOperandModel'] | null> | null; // [AutomationConditionOperandModel]
    operator?: NexusGenEnums['AutomationConditionOperatorType'] | null; // AutomationConditionOperatorType
    question?: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    questionScope?: NexusGenRootTypes['QuestionConditionScopeModel'] | null; // QuestionConditionScopeModel
    scope?: NexusGenEnums['AutomationConditionScopeType'] | null; // AutomationConditionScopeType
    updatedAt?: NexusGenScalars['Date'] | null; // Date
    workspaceScope?: NexusGenRootTypes['WorkspaceConditionScopeModel'] | null; // WorkspaceConditionScopeModel
  }
  AutomationConditionOperandModel: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    dateTimeValue?: string | null; // String
    id?: string | null; // ID
    numberValue?: number | null; // Int
    textValue?: string | null; // String
    type?: NexusGenEnums['OperandType'] | null; // OperandType
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  AutomationConnection: { // root type
    automations?: Array<NexusGenRootTypes['AutomationModel'] | null> | null; // [AutomationModel]
    pageInfo?: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages?: number | null; // Int
  }
  AutomationEventModel: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    dialogue?: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    endDate?: string | null; // String
    id?: string | null; // ID
    periodType?: NexusGenEnums['RecurringPeriodType'] | null; // RecurringPeriodType
    question?: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    startDate?: string | null; // String
    type?: NexusGenEnums['AutomationEventType'] | null; // AutomationEventType
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  AutomationModel: { // root type
    automationScheduled?: NexusGenRootTypes['AutomationScheduledModel'] | null; // AutomationScheduledModel
    automationTrigger?: NexusGenRootTypes['AutomationTriggerModel'] | null; // AutomationTriggerModel
    createdAt?: NexusGenScalars['Date'] | null; // Date
    description?: string | null; // String
    id?: string | null; // ID
    isActive?: boolean | null; // Boolean
    label?: string | null; // String
    type?: NexusGenEnums['AutomationType'] | null; // AutomationType
    updatedAt?: NexusGenScalars['Date'] | null; // Date
    workspace?: NexusGenRootTypes['Customer'] | null; // Customer
  }
  AutomationScheduledModel: { // root type
    actions?: Array<NexusGenRootTypes['AutomationActionModel'] | null> | null; // [AutomationActionModel]
    createdAt?: NexusGenScalars['Date'] | null; // Date
    dayOfMonth?: string | null; // String
    dayOfWeek?: string | null; // String
    dayRange?: Array<NexusGenRootTypes['DayRange'] | null> | null; // [DayRange]
    dialogueId?: string | null; // String
    frequency?: string | null; // String
    hours?: string | null; // String
    id?: string | null; // ID
    minutes?: string | null; // String
    month?: string | null; // String
    time?: string | null; // String
    type?: NexusGenEnums['RecurringPeriodType'] | null; // RecurringPeriodType
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  AutomationTriggerModel: { // root type
    actions?: Array<NexusGenRootTypes['AutomationActionModel'] | null> | null; // [AutomationActionModel]
    conditionBuilder?: NexusGenRootTypes['AutomationConditionBuilderModel'] | null; // AutomationConditionBuilderModel
    createdAt?: NexusGenScalars['Date'] | null; // Date
    event?: NexusGenRootTypes['AutomationEventModel'] | null; // AutomationEventModel
    id?: string | null; // ID
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  BasicStatistics: { // root type
    average: number; // Float!
    responseCount: number; // Int!
  }
  CampaignType: { // root type
    id?: string | null; // ID
    label?: string | null; // String
    variants?: Array<NexusGenRootTypes['CampaignVariantType'] | null> | null; // [CampaignVariantType]
  }
  CampaignVariantCustomVariableType: { // root type
    id?: string | null; // ID
    key?: string | null; // String
  }
  CampaignVariantType: { // root type
    body?: string | null; // String
    customVariables?: Array<NexusGenRootTypes['CampaignVariantCustomVariableType'] | null> | null; // [CampaignVariantCustomVariableType]
    deliveryConnection?: NexusGenRootTypes['DeliveryConnectionType'] | null; // DeliveryConnectionType
    from?: string | null; // String
    id: string; // ID!
    label: string; // String!
    type?: NexusGenEnums['CampaignVariantEnum'] | null; // CampaignVariantEnum
    weight?: number | null; // Int
  }
  ColourSettings: prisma.ColourSettings;
  ConditionPropertyAggregate: prisma.ConditionPropertyAggregate;
  CreateBatchDeliveriesOutputType: { // root type
    failedDeliveries?: Array<NexusGenRootTypes['FailedDeliveryModel'] | null> | null; // [FailedDeliveryModel]
    nrDeliveries?: number | null; // Int
  }
  CreateWorkspaceJobType: { // root type
    createdAt?: string | null; // String
    errorMessage?: string | null; // String
    id?: string | null; // String
    message?: string | null; // String
    name?: string | null; // String
    referenceId?: string | null; // String
    referenceType?: NexusGenEnums['CloudReferenceType'] | null; // CloudReferenceType
    requiresColorExtraction?: boolean | null; // Boolean
    requiresRembg?: boolean | null; // Boolean
    requiresScreenshot?: boolean | null; // Boolean
    resourcesUrl?: string | null; // String
    status?: NexusGenEnums['JobStatusType'] | null; // JobStatusType
    updatedAt?: string | null; // String
  }
  CustomFieldType: { // root type
    id?: string | null; // String
    jobProcessLocationId?: string | null; // String
    key?: string | null; // String
    value?: string | null; // String
  }
  Customer: prisma.Customer;
  CustomerSettings: prisma.CustomerSettings;
  DateHistogram: { // root type
    id?: string | null; // ID
    items: NexusGenRootTypes['DateHistogramItem'][]; // [DateHistogramItem!]!
  }
  DateHistogramItem: { // root type
    date?: NexusGenScalars['Date'] | null; // Date
    frequency: number; // Int!
    id?: string | null; // ID
  }
  DayRange: { // root type
    index?: number | null; // Int
    label?: string | null; // String
  }
  DeleteUserOutput: { // root type
    deletedUser?: boolean | null; // Boolean
  }
  DeliveryConnectionType: { // root type
    deliveries: NexusGenRootTypes['DeliveryType'][]; // [DeliveryType!]!
    pageInfo?: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages?: number | null; // Int
  }
  DeliveryEventType: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    failureMessage?: string | null; // String
    id?: string | null; // ID
    status?: NexusGenEnums['DeliveryStatusEnum'] | null; // DeliveryStatusEnum
  }
  DeliveryType: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    currentStatus?: NexusGenEnums['DeliveryStatusEnum'] | null; // DeliveryStatusEnum
    deliveryRecipientEmail?: string | null; // String
    deliveryRecipientFirstName?: string | null; // String
    deliveryRecipientLastName?: string | null; // String
    deliveryRecipientPhone?: string | null; // String
    id: string; // ID!
    scheduledAt?: NexusGenScalars['Date'] | null; // Date
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  DeprecatedPaginationPageInfo: { // root type
    cursor?: string | null; // String
    nrPages?: number | null; // Int
    pageIndex?: number | null; // Int
  }
  Dialogue: prisma.Dialogue;
  DialogueConditionScopeModel: { // root type
    aggregate?: NexusGenRootTypes['ConditionPropertyAggregate'] | null; // ConditionPropertyAggregate
    aspect?: NexusGenEnums['DialogueAspectType'] | null; // DialogueAspectType
    createdAt?: NexusGenScalars['Date'] | null; // Date
    id?: string | null; // ID
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  DialogueConnection: { // root type
    dialogues?: Array<NexusGenRootTypes['Dialogue'] | null> | null; // [Dialogue]
    pageInfo?: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages?: number | null; // Int
  }
  DialogueFinisherObjectType: { // root type
    header?: string | null; // String
    id?: string | null; // ID
    subtext?: string | null; // String
  }
  DialogueStatistics: { // root type
    history?: Array<NexusGenRootTypes['lineChartDataType'] | null> | null; // [lineChartDataType]
    mostPopularPath?: NexusGenRootTypes['topPathType'] | null; // topPathType
    nrInteractions?: number | null; // Int
    topNegativePath?: Array<NexusGenRootTypes['topPathType'] | null> | null; // [topPathType]
    topPositivePath?: Array<NexusGenRootTypes['topPathType'] | null> | null; // [topPathType]
  }
  DialogueStatisticsSummaryModel: { // root type
    dialogue?: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogueId?: string | null; // String
    endDateTime?: NexusGenScalars['Date'] | null; // Date
    id?: string | null; // ID
    impactScore?: number | null; // Float
    nrVotes?: number | null; // Int
    startDateTime?: NexusGenScalars['Date'] | null; // Date
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  Edge: prisma.Edge;
  EdgeCondition: { // root type
    conditionType?: string | null; // String
    edgeId?: string | null; // String
    id?: number | null; // Int
    matchValue?: string | null; // String
    renderMax?: number | null; // Int
    renderMin?: number | null; // Int
  }
  FailedDeliveryModel: { // root type
    error?: string | null; // String
    record?: string | null; // String
  }
  FontSettings: prisma.FontSettings;
  FormNodeEntryType: { // root type
    id?: number | null; // Int
    values?: Array<NexusGenRootTypes['FormNodeEntryValueType'] | null> | null; // [FormNodeEntryValueType]
  }
  FormNodeEntryValueType: { // root type
    email?: string | null; // String
    longText?: string | null; // String
    number?: number | null; // Int
    phoneNumber?: string | null; // String
    relatedField?: NexusGenRootTypes['FormNodeField'] | null; // FormNodeField
    shortText?: string | null; // String
    url?: string | null; // String
  }
  FormNodeField: prisma.FormNodeField;
  FormNodeType: { // root type
    fields?: NexusGenRootTypes['FormNodeField'][] | null; // [FormNodeField!]
    helperText?: string | null; // String
    id?: string | null; // String
  }
  HealthScore: { // root type
    negativeResponseCount: number; // Int!
    nrVotes: number; // Int!
    score: number; // Float!
  }
  ImageType: { // root type
    encoding?: string | null; // String
    filename?: string | null; // String
    mimetype?: string | null; // String
    url?: string | null; // String
  }
  IndepthQuestionStatisticsSummary: { // root type
    impactScore?: number | null; // Float
    nrVotes?: number | null; // Int
    option?: string | null; // String
  }
  InviteUserOutput: { // root type
    didAlreadyExist?: boolean | null; // Boolean
    didInvite?: boolean | null; // Boolean
  }
  Issue: { // root type
    actionRequiredCount: number; // Int!
    basicStats: NexusGenRootTypes['BasicStatistics']; // BasicStatistics!
    createdAt?: NexusGenScalars['Date'] | null; // Date
    dialogueId: string; // String!
    followUpAction?: NexusGenEnums['SessionActionType'] | null; // SessionActionType
    history: NexusGenRootTypes['DateHistogram']; // DateHistogram!
    id?: string | null; // ID
    rankScore?: number | null; // Float
    status: NexusGenEnums['StatusType']; // StatusType!
    topic?: string | null; // String
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  JobObjectType: { // root type
    createWorkspaceJob?: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    createWorkspaceJobId?: string | null; // String
    createdAt?: string | null; // String
    id?: string | null; // String
    updatedAt?: string | null; // String
  }
  JobProcessLocation: prisma.JobProcessLocation;
  JobProcessLocations: { // root type
    jobProcessLocations?: Array<NexusGenRootTypes['JobProcessLocation'] | null> | null; // [JobProcessLocation]
  }
  LinkType: { // root type
    backgroundColor?: string | null; // String
    buttonText?: string | null; // String
    header?: string | null; // String
    iconUrl?: string | null; // String
    id: string; // String!
    imageUrl?: string | null; // String
    questionNodeId?: string | null; // String
    subHeader?: string | null; // String
    title?: string | null; // String
    type: string; // String!
    url: string; // String!
  }
  LoginOutput: { // root type
    expiryDate?: number | null; // Int
    token?: string | null; // String
    user?: NexusGenRootTypes['UserType'] | null; // UserType
  }
  MostChangedPath: { // root type
    group?: string | null; // String
    topNegativeChanged?: Array<NexusGenRootTypes['TopicDelta'] | null> | null; // [TopicDelta]
    topPositiveChanged?: Array<NexusGenRootTypes['TopicDelta'] | null> | null; // [TopicDelta]
  }
  MostPopularPath: { // root type
    group?: string | null; // String
    path?: Array<NexusGenRootTypes['PathTopic'] | null> | null; // [PathTopic]
  }
  MostTrendingTopic: { // root type
    group?: string | null; // String
    impactScore?: number | null; // Float
    nrVotes?: number | null; // Int
    path?: Array<string | null> | null; // [String]
  }
  Mutation: {};
  NodeEntry: prisma.NodeEntry;
  NodeEntryValue: { // root type
    choiceNodeEntry?: string | null; // String
    formNodeEntry?: NexusGenRootTypes['FormNodeEntryType'] | null; // FormNodeEntryType
    linkNodeEntry?: string | null; // String
    registrationNodeEntry?: string | null; // String
    sliderNodeEntry?: number | null; // Int
    textboxNodeEntry?: string | null; // String
    videoNodeEntry?: string | null; // String
  }
  Organization: {};
  OrganizationLayer: { // root type
    depth?: number | null; // Int
    id?: string | null; // ID
    type?: NexusGenEnums['OrganizationLayerType'] | null; // OrganizationLayerType
  }
  PaginationPageInfo: { // root type
    hasNextPage?: boolean | null; // Boolean
    hasPrevPage?: boolean | null; // Boolean
    nextPageOffset?: number | null; // Int
    pageIndex?: number | null; // Int
    prevPageOffset?: number | null; // Int
  }
  Path: { // root type
    id?: string | null; // ID
    topicStrings?: Array<string | null> | null; // [String]
  }
  PathTopic: { // root type
    depth?: number | null; // Int
    impactScore?: number | null; // Float
    nrVotes?: number | null; // Int
    topic?: string | null; // String
  }
  PathedSessionsType: { // root type
    endDateTime?: string | null; // String
    path?: Array<string | null> | null; // [String]
    pathedSessions?: NexusGenRootTypes['Session'][] | null; // [Session!]
    startDateTime?: string | null; // String
  }
  PermssionType: { // root type
    customer?: NexusGenRootTypes['Customer'] | null; // Customer
    description?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
  PreviewDataType: { // root type
    colors?: Array<string | null> | null; // [String]
    rembgLogoUrl?: string | null; // String
    websiteScreenshotUrl?: string | null; // String
  }
  PublicDialogueConnection: { // root type
    dialogues?: Array<NexusGenRootTypes['PublicDialogueInfo'] | null> | null; // [PublicDialogueInfo]
    pageInfo?: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages?: number | null; // Int
  }
  PublicDialogueInfo: { // root type
    description?: string | null; // String
    slug?: string | null; // String
    title?: string | null; // String
    url?: string | null; // String
  }
  Query: {};
  QuestionConditionScopeModel: { // root type
    aggregate?: NexusGenRootTypes['ConditionPropertyAggregate'] | null; // ConditionPropertyAggregate
    aspect?: NexusGenEnums['QuestionAspectType'] | null; // QuestionAspectType
    createdAt?: NexusGenScalars['Date'] | null; // Date
    id?: string | null; // ID
  }
  QuestionNode: prisma.QuestionNode;
  QuestionOption: prisma.QuestionOption;
  QuestionStatisticsSummary: { // root type
    dialogueId?: string | null; // String
    endDateTime?: NexusGenScalars['Date'] | null; // Date
    id?: string | null; // ID
    startDateTime?: NexusGenScalars['Date'] | null; // Date
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  RefreshAccessTokenOutput: { // root type
    accessToken?: string | null; // String
  }
  RequestInviteOutput: { // root type
    didInvite?: boolean | null; // Boolean
    loginToken?: string | null; // String
    userExists?: boolean | null; // Boolean
  }
  RoleConnection: { // root type
    cursor?: string | null; // String
    endDate?: string | null; // String
    limit?: number | null; // Int
    offset?: number | null; // Int
    pageInfo?: NexusGenRootTypes['DeprecatedPaginationPageInfo'] | null; // DeprecatedPaginationPageInfo
    roles?: Array<NexusGenRootTypes['RoleType'] | null> | null; // [RoleType]
    startDate?: string | null; // String
  }
  RoleType: { // root type
    customerId?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
    nrPermissions?: number | null; // Int
    permissions?: Array<NexusGenEnums['SystemPermission'] | null> | null; // [SystemPermission]
    roleId?: string | null; // String
  }
  Session: prisma.Session;
  SessionConnection: { // root type
    pageInfo?: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    totalPages?: number | null; // Int
  }
  ShareNodeType: { // root type
    createdAt?: string | null; // String
    id?: string | null; // String
    title?: string | null; // String
    tooltip?: string | null; // String
    updatedAt?: string | null; // String
    url?: string | null; // String
  }
  SliderNodeMarkerType: { // root type
    id?: string | null; // ID
    label?: string | null; // String
    subLabel?: string | null; // String
  }
  SliderNodeRangeType: { // root type
    end?: number | null; // Float
    id?: string | null; // ID
    start?: number | null; // Float
  }
  SliderNodeType: { // root type
    happyText?: string | null; // String
    id?: string | null; // ID
    unhappyText?: string | null; // String
  }
  Tag: prisma.Tag;
  TopicDelta: { // root type
    averageCurrent?: number | null; // Float
    averagePrevious?: number | null; // Float
    delta?: number | null; // Float
    group?: string | null; // String
    nrVotes?: number | null; // Int
    percentageChanged?: number | null; // Float
    topic?: string | null; // String
  }
  TopicNodeEntryValue: { // root type
    id?: number | null; // Int
    mainScore?: number | null; // Int
    nodeEntryId?: string | null; // String
    value?: string | null; // String
  }
  TopicType: { // root type
    basicStats?: NexusGenRootTypes['BasicStatistics'] | null; // BasicStatistics
    impactScore?: number | null; // Float
    name: string; // String!
    nrVotes?: number | null; // Int
    subTopics?: Array<NexusGenRootTypes['TopicType'] | null> | null; // [TopicType]
  }
  TriggerConditionType: { // root type
    id?: number | null; // Int
    maxValue?: number | null; // Int
    minValue?: number | null; // Int
    textValue?: string | null; // String
    triggerId?: string | null; // String
    type?: NexusGenEnums['TriggerConditionEnum'] | null; // TriggerConditionEnum
  }
  TriggerConnectionType: { // root type
    cursor?: string | null; // String
    endDate?: string | null; // String
    limit?: number | null; // Int
    offset?: number | null; // Int
    pageInfo?: NexusGenRootTypes['DeprecatedPaginationPageInfo'] | null; // DeprecatedPaginationPageInfo
    startDate?: string | null; // String
    triggers?: Array<NexusGenRootTypes['TriggerType'] | null> | null; // [TriggerType]
  }
  TriggerType: { // root type
    id?: string | null; // String
    medium?: NexusGenEnums['TriggerMediumEnum'] | null; // TriggerMediumEnum
    name?: string | null; // String
    relatedNodeId?: string | null; // String
    type?: NexusGenEnums['TriggerTypeEnum'] | null; // TriggerTypeEnum
  }
  UrgentPath: { // root type
    basicStats?: NexusGenRootTypes['BasicStatistics'] | null; // BasicStatistics
    dialogueId: string; // String!
    id?: string | null; // ID
    path?: NexusGenRootTypes['Path'] | null; // Path
  }
  UserConnection: { // root type
    pageInfo?: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages?: number | null; // Int
    userCustomers?: Array<NexusGenRootTypes['UserCustomer'] | null> | null; // [UserCustomer]
  }
  UserCustomer: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    customer?: NexusGenRootTypes['Customer'] | null; // Customer
    isActive?: boolean | null; // Boolean
    role?: NexusGenRootTypes['RoleType'] | null; // RoleType
    user?: NexusGenRootTypes['UserType'] | null; // UserType
  }
  UserType: { // root type
    email?: string | null; // String
    firstName?: string | null; // String
    id: string; // ID!
    lastActivity?: NexusGenScalars['Date'] | null; // Date
    lastLoggedIn?: NexusGenScalars['Date'] | null; // Date
    lastName?: string | null; // String
    phone?: string | null; // String
    roleId?: string | null; // String
  }
  VerifyUserTokenOutput: { // root type
    accessToken?: string | null; // String
    accessTokenExpiry?: number | null; // Int
    userData?: NexusGenRootTypes['UserType'] | null; // UserType
  }
  WorkspaceConditionScopeModel: { // root type
    aggregate?: NexusGenRootTypes['ConditionPropertyAggregate'] | null; // ConditionPropertyAggregate
    aspect?: NexusGenEnums['WorkspaceAspectType'] | null; // WorkspaceAspectType
    createdAt?: NexusGenScalars['Date'] | null; // Date
    id?: string | null; // ID
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  WorkspaceStatistics: { // root type
    id?: string | null; // ID
  }
  lineChartDataType: { // root type
    entryId?: string | null; // String
    x?: string | null; // String
    y?: number | null; // Int
  }
  topPathType: { // root type
    answer?: string | null; // String
    basicSentiment?: string | null; // String
    quantity?: number | null; // Int
  }
}

export interface NexusGenInterfaces {
  ConnectionInterface: NexusGenRootTypes['AutomationConnection'] | NexusGenRootTypes['DeliveryConnectionType'] | NexusGenRootTypes['DialogueConnection'] | NexusGenRootTypes['PublicDialogueConnection'] | NexusGenRootTypes['SessionConnection'] | NexusGenRootTypes['UserConnection'];
  DeprecatedConnectionInterface: NexusGenRootTypes['AutodeckConnectionType'] | NexusGenRootTypes['RoleConnection'] | NexusGenRootTypes['TriggerConnectionType'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AWSImageType: { // field return type
    encoding: string | null; // String
    filename: string | null; // String
    mimetype: string | null; // String
    url: string | null; // String
  }
  AssignedDialogues: { // field return type
    assignedDialogues: NexusGenRootTypes['Dialogue'][] | null; // [Dialogue!]
    privateWorkspaceDialogues: NexusGenRootTypes['Dialogue'][] | null; // [Dialogue!]
  }
  AutodeckConnectionType: { // field return type
    cursor: string | null; // String
    endDate: string | null; // String
    jobs: Array<NexusGenRootTypes['CreateWorkspaceJobType'] | null> | null; // [CreateWorkspaceJobType]
    limit: number | null; // Int
    offset: number | null; // Int
    pageInfo: NexusGenRootTypes['DeprecatedPaginationPageInfo'] | null; // DeprecatedPaginationPageInfo
    startDate: string | null; // String
  }
  AutomationActionChannel: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    payload: NexusGenScalars['JSONObject'] | null; // JSONObject
    type: NexusGenEnums['AutomationActionChannelType'] | null; // AutomationActionChannelType
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  AutomationActionModel: { // field return type
    channels: Array<NexusGenRootTypes['AutomationActionChannel'] | null> | null; // [AutomationActionChannel]
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    payload: NexusGenScalars['JSONObject'] | null; // JSONObject
    type: NexusGenEnums['AutomationActionType'] | null; // AutomationActionType
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  AutomationConditionBuilderModel: { // field return type
    childConditionBuilderId: string | null; // String
    conditions: Array<NexusGenRootTypes['AutomationConditionModel'] | null> | null; // [AutomationConditionModel]
    id: string | null; // ID
    type: NexusGenEnums['AutomationConditionBuilderType'] | null; // AutomationConditionBuilderType
  }
  AutomationConditionModel: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogueScope: NexusGenRootTypes['DialogueConditionScopeModel'] | null; // DialogueConditionScopeModel
    id: string | null; // ID
    operands: Array<NexusGenRootTypes['AutomationConditionOperandModel'] | null> | null; // [AutomationConditionOperandModel]
    operator: NexusGenEnums['AutomationConditionOperatorType'] | null; // AutomationConditionOperatorType
    question: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    questionScope: NexusGenRootTypes['QuestionConditionScopeModel'] | null; // QuestionConditionScopeModel
    scope: NexusGenEnums['AutomationConditionScopeType'] | null; // AutomationConditionScopeType
    updatedAt: NexusGenScalars['Date'] | null; // Date
    workspaceScope: NexusGenRootTypes['WorkspaceConditionScopeModel'] | null; // WorkspaceConditionScopeModel
  }
  AutomationConditionOperandModel: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    dateTimeValue: string | null; // String
    id: string | null; // ID
    numberValue: number | null; // Int
    textValue: string | null; // String
    type: NexusGenEnums['OperandType'] | null; // OperandType
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  AutomationConnection: { // field return type
    automations: Array<NexusGenRootTypes['AutomationModel'] | null> | null; // [AutomationModel]
    pageInfo: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages: number | null; // Int
  }
  AutomationEventModel: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    endDate: string | null; // String
    id: string | null; // ID
    periodType: NexusGenEnums['RecurringPeriodType'] | null; // RecurringPeriodType
    question: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    startDate: string | null; // String
    type: NexusGenEnums['AutomationEventType'] | null; // AutomationEventType
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  AutomationModel: { // field return type
    automationScheduled: NexusGenRootTypes['AutomationScheduledModel'] | null; // AutomationScheduledModel
    automationTrigger: NexusGenRootTypes['AutomationTriggerModel'] | null; // AutomationTriggerModel
    createdAt: NexusGenScalars['Date'] | null; // Date
    description: string | null; // String
    id: string | null; // ID
    isActive: boolean | null; // Boolean
    label: string | null; // String
    type: NexusGenEnums['AutomationType'] | null; // AutomationType
    updatedAt: NexusGenScalars['Date'] | null; // Date
    workspace: NexusGenRootTypes['Customer'] | null; // Customer
  }
  AutomationScheduledModel: { // field return type
    actions: Array<NexusGenRootTypes['AutomationActionModel'] | null> | null; // [AutomationActionModel]
    activeDialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    createdAt: NexusGenScalars['Date'] | null; // Date
    dayOfMonth: string | null; // String
    dayOfWeek: string | null; // String
    dayRange: Array<NexusGenRootTypes['DayRange'] | null> | null; // [DayRange]
    dialogueId: string | null; // String
    frequency: string | null; // String
    hours: string | null; // String
    id: string | null; // ID
    minutes: string | null; // String
    month: string | null; // String
    time: string | null; // String
    type: NexusGenEnums['RecurringPeriodType'] | null; // RecurringPeriodType
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  AutomationTriggerModel: { // field return type
    actions: Array<NexusGenRootTypes['AutomationActionModel'] | null> | null; // [AutomationActionModel]
    activeDialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    conditionBuilder: NexusGenRootTypes['AutomationConditionBuilderModel'] | null; // AutomationConditionBuilderModel
    createdAt: NexusGenScalars['Date'] | null; // Date
    event: NexusGenRootTypes['AutomationEventModel'] | null; // AutomationEventModel
    id: string | null; // ID
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  BasicStatistics: { // field return type
    average: number; // Float!
    responseCount: number; // Int!
  }
  CampaignType: { // field return type
    deliveryConnection: NexusGenRootTypes['DeliveryConnectionType'] | null; // DeliveryConnectionType
    id: string | null; // ID
    label: string | null; // String
    variants: Array<NexusGenRootTypes['CampaignVariantType'] | null> | null; // [CampaignVariantType]
  }
  CampaignVariantCustomVariableType: { // field return type
    id: string | null; // ID
    key: string | null; // String
  }
  CampaignVariantType: { // field return type
    body: string | null; // String
    campaign: NexusGenRootTypes['CampaignType'] | null; // CampaignType
    customVariables: Array<NexusGenRootTypes['CampaignVariantCustomVariableType'] | null> | null; // [CampaignVariantCustomVariableType]
    deliveryConnection: NexusGenRootTypes['DeliveryConnectionType'] | null; // DeliveryConnectionType
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    from: string | null; // String
    id: string; // ID!
    label: string; // String!
    type: NexusGenEnums['CampaignVariantEnum'] | null; // CampaignVariantEnum
    weight: number | null; // Int
    workspace: NexusGenRootTypes['Customer'] | null; // Customer
  }
  ColourSettings: { // field return type
    id: string | null; // ID
    primary: string | null; // String
    primaryAlt: string | null; // String
    secondary: string | null; // String
  }
  ConditionPropertyAggregate: { // field return type
    createdAt: string | null; // String
    endDate: string | null; // String
    id: string | null; // ID
    latest: number | null; // Int
    startDate: string | null; // String
    type: NexusGenEnums['ConditionPropertyAggregateType'] | null; // ConditionPropertyAggregateType
  }
  CreateBatchDeliveriesOutputType: { // field return type
    failedDeliveries: Array<NexusGenRootTypes['FailedDeliveryModel'] | null> | null; // [FailedDeliveryModel]
    nrDeliveries: number | null; // Int
  }
  CreateWorkspaceJobType: { // field return type
    createdAt: string | null; // String
    errorMessage: string | null; // String
    id: string | null; // String
    message: string | null; // String
    name: string | null; // String
    processLocation: NexusGenRootTypes['JobProcessLocation'] | null; // JobProcessLocation
    referenceId: string | null; // String
    referenceType: NexusGenEnums['CloudReferenceType'] | null; // CloudReferenceType
    requiresColorExtraction: boolean | null; // Boolean
    requiresRembg: boolean | null; // Boolean
    requiresScreenshot: boolean | null; // Boolean
    resourcesUrl: string | null; // String
    status: NexusGenEnums['JobStatusType'] | null; // JobStatusType
    updatedAt: string | null; // String
  }
  CustomFieldType: { // field return type
    id: string | null; // String
    jobProcessLocationId: string | null; // String
    key: string | null; // String
    value: string | null; // String
  }
  Customer: { // field return type
    automationConnection: NexusGenRootTypes['AutomationConnection'] | null; // AutomationConnection
    automations: Array<NexusGenRootTypes['AutomationModel'] | null> | null; // [AutomationModel]
    campaign: NexusGenRootTypes['CampaignType'] | null; // CampaignType
    campaigns: Array<NexusGenRootTypes['CampaignType'] | null> | null; // [CampaignType]
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogueConnection: NexusGenRootTypes['DialogueConnection'] | null; // DialogueConnection
    dialogues: Array<NexusGenRootTypes['Dialogue'] | null> | null; // [Dialogue]
    id: string | null; // ID
    isDemo: boolean | null; // Boolean
    issues: Array<NexusGenRootTypes['Issue'] | null> | null; // [Issue]
    name: string; // String!
    nestedDialogueStatisticsSummary: Array<NexusGenRootTypes['DialogueStatisticsSummaryModel'] | null> | null; // [DialogueStatisticsSummaryModel]
    nestedHealthScore: NexusGenRootTypes['HealthScore'] | null; // HealthScore
    nestedMostChanged: NexusGenRootTypes['MostChangedPath'] | null; // MostChangedPath
    nestedMostPopular: NexusGenRootTypes['MostPopularPath'] | null; // MostPopularPath
    nestedMostTrendingTopic: NexusGenRootTypes['MostTrendingTopic'] | null; // MostTrendingTopic
    organization: NexusGenRootTypes['Organization'] | null; // Organization
    roles: Array<NexusGenRootTypes['RoleType'] | null> | null; // [RoleType]
    sessionConnection: NexusGenRootTypes['SessionConnection'] | null; // SessionConnection
    settings: NexusGenRootTypes['CustomerSettings'] | null; // CustomerSettings
    slug: string; // String!
    statistics: NexusGenRootTypes['WorkspaceStatistics'] | null; // WorkspaceStatistics
    userCustomer: NexusGenRootTypes['UserCustomer'] | null; // UserCustomer
    users: Array<NexusGenRootTypes['UserType'] | null> | null; // [UserType]
    usersConnection: NexusGenRootTypes['UserConnection'] | null; // UserConnection
  }
  CustomerSettings: { // field return type
    colourSettings: NexusGenRootTypes['ColourSettings'] | null; // ColourSettings
    fontSettings: NexusGenRootTypes['FontSettings'] | null; // FontSettings
    id: string | null; // ID
    logoOpacity: number | null; // Int
    logoUrl: string | null; // String
  }
  DateHistogram: { // field return type
    id: string | null; // ID
    items: NexusGenRootTypes['DateHistogramItem'][]; // [DateHistogramItem!]!
  }
  DateHistogramItem: { // field return type
    date: NexusGenScalars['Date'] | null; // Date
    frequency: number; // Int!
    id: string | null; // ID
  }
  DayRange: { // field return type
    index: number | null; // Int
    label: string | null; // String
  }
  DeleteUserOutput: { // field return type
    deletedUser: boolean | null; // Boolean
  }
  DeliveryConnectionType: { // field return type
    deliveries: NexusGenRootTypes['DeliveryType'][]; // [DeliveryType!]!
    pageInfo: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages: number | null; // Int
  }
  DeliveryEventType: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    failureMessage: string | null; // String
    id: string | null; // ID
    status: NexusGenEnums['DeliveryStatusEnum'] | null; // DeliveryStatusEnum
  }
  DeliveryType: { // field return type
    campaignVariant: NexusGenRootTypes['CampaignVariantType'] | null; // CampaignVariantType
    createdAt: NexusGenScalars['Date'] | null; // Date
    currentStatus: NexusGenEnums['DeliveryStatusEnum'] | null; // DeliveryStatusEnum
    deliveryRecipientEmail: string | null; // String
    deliveryRecipientFirstName: string | null; // String
    deliveryRecipientLastName: string | null; // String
    deliveryRecipientPhone: string | null; // String
    events: Array<NexusGenRootTypes['DeliveryEventType'] | null> | null; // [DeliveryEventType]
    id: string; // ID!
    scheduledAt: NexusGenScalars['Date'] | null; // Date
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  DeprecatedPaginationPageInfo: { // field return type
    cursor: string | null; // String
    nrPages: number | null; // Int
    pageIndex: number | null; // Int
  }
  Dialogue: { // field return type
    assignees: Array<NexusGenRootTypes['UserType'] | null> | null; // [UserType]
    averageScore: number | null; // Float
    campaignVariants: NexusGenRootTypes['CampaignVariantType'][] | null; // [CampaignVariantType!]
    creationDate: string | null; // String
    customer: NexusGenRootTypes['Customer'] | null; // Customer
    customerId: string | null; // String
    description: string; // String!
    dialogueStatisticsSummary: NexusGenRootTypes['DialogueStatisticsSummaryModel'] | null; // DialogueStatisticsSummaryModel
    edges: Array<NexusGenRootTypes['Edge'] | null> | null; // [Edge]
    healthScore: NexusGenRootTypes['HealthScore'] | null; // HealthScore
    id: string; // ID!
    isPrivate: boolean | null; // Boolean
    isWithoutGenData: boolean | null; // Boolean
    language: NexusGenEnums['LanguageEnumType'] | null; // LanguageEnumType
    leafs: NexusGenRootTypes['QuestionNode'][] | null; // [QuestionNode!]
    mostChangedPath: NexusGenRootTypes['MostChangedPath'] | null; // MostChangedPath
    mostPopularPath: NexusGenRootTypes['MostPopularPath'] | null; // MostPopularPath
    mostTrendingTopic: NexusGenRootTypes['MostTrendingTopic'] | null; // MostTrendingTopic
    pathedSessionsConnection: NexusGenRootTypes['PathedSessionsType'] | null; // PathedSessionsType
    postLeafNode: NexusGenRootTypes['DialogueFinisherObjectType'] | null; // DialogueFinisherObjectType
    publicTitle: string | null; // String
    questions: NexusGenRootTypes['QuestionNode'][] | null; // [QuestionNode!]
    rootQuestion: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    sessionConnection: NexusGenRootTypes['SessionConnection'] | null; // SessionConnection
    sessions: Array<NexusGenRootTypes['Session'] | null> | null; // [Session]
    slug: string; // String!
    statistics: NexusGenRootTypes['DialogueStatistics'] | null; // DialogueStatistics
    tags: Array<NexusGenRootTypes['Tag'] | null> | null; // [Tag]
    title: string; // String!
    topic: NexusGenRootTypes['TopicType'] | null; // TopicType
    updatedAt: string | null; // String
    wasGeneratedWithGenData: boolean | null; // Boolean
  }
  DialogueConditionScopeModel: { // field return type
    aggregate: NexusGenRootTypes['ConditionPropertyAggregate'] | null; // ConditionPropertyAggregate
    aspect: NexusGenEnums['DialogueAspectType'] | null; // DialogueAspectType
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  DialogueConnection: { // field return type
    dialogues: Array<NexusGenRootTypes['Dialogue'] | null> | null; // [Dialogue]
    pageInfo: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages: number | null; // Int
  }
  DialogueFinisherObjectType: { // field return type
    header: string | null; // String
    id: string | null; // ID
    subtext: string | null; // String
  }
  DialogueStatistics: { // field return type
    history: Array<NexusGenRootTypes['lineChartDataType'] | null> | null; // [lineChartDataType]
    mostPopularPath: NexusGenRootTypes['topPathType'] | null; // topPathType
    nrInteractions: number | null; // Int
    topNegativePath: Array<NexusGenRootTypes['topPathType'] | null> | null; // [topPathType]
    topPositivePath: Array<NexusGenRootTypes['topPathType'] | null> | null; // [topPathType]
  }
  DialogueStatisticsSummaryModel: { // field return type
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogueId: string | null; // String
    endDateTime: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    impactScore: number | null; // Float
    nrVotes: number | null; // Int
    startDateTime: NexusGenScalars['Date'] | null; // Date
    title: string | null; // String
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  Edge: { // field return type
    childNode: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    childNodeId: string | null; // String
    conditions: NexusGenRootTypes['EdgeCondition'][] | null; // [EdgeCondition!]
    createdAt: string | null; // String
    id: string | null; // ID
    parentNode: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    parentNodeId: string | null; // String
    updatedAt: string | null; // String
  }
  EdgeCondition: { // field return type
    conditionType: string | null; // String
    edgeId: string | null; // String
    id: number | null; // Int
    matchValue: string | null; // String
    renderMax: number | null; // Int
    renderMin: number | null; // Int
  }
  FailedDeliveryModel: { // field return type
    error: string | null; // String
    record: string | null; // String
  }
  FontSettings: { // field return type
    id: string | null; // ID
  }
  FormNodeEntryType: { // field return type
    id: number | null; // Int
    values: Array<NexusGenRootTypes['FormNodeEntryValueType'] | null> | null; // [FormNodeEntryValueType]
  }
  FormNodeEntryValueType: { // field return type
    email: string | null; // String
    longText: string | null; // String
    number: number | null; // Int
    phoneNumber: string | null; // String
    relatedField: NexusGenRootTypes['FormNodeField'] | null; // FormNodeField
    shortText: string | null; // String
    url: string | null; // String
  }
  FormNodeField: { // field return type
    contacts: Array<NexusGenRootTypes['UserType'] | null> | null; // [UserType]
    id: string | null; // ID
    isRequired: boolean | null; // Boolean
    label: string | null; // String
    placeholder: string | null; // String
    position: number | null; // Int
    type: NexusGenEnums['FormNodeFieldTypeEnum']; // FormNodeFieldTypeEnum!
  }
  FormNodeType: { // field return type
    fields: NexusGenRootTypes['FormNodeField'][] | null; // [FormNodeField!]
    helperText: string | null; // String
    id: string | null; // String
  }
  HealthScore: { // field return type
    negativeResponseCount: number; // Int!
    nrVotes: number; // Int!
    score: number; // Float!
  }
  ImageType: { // field return type
    encoding: string | null; // String
    filename: string | null; // String
    mimetype: string | null; // String
    url: string | null; // String
  }
  IndepthQuestionStatisticsSummary: { // field return type
    impactScore: number | null; // Float
    nrVotes: number | null; // Int
    option: string | null; // String
  }
  InviteUserOutput: { // field return type
    didAlreadyExist: boolean | null; // Boolean
    didInvite: boolean | null; // Boolean
  }
  Issue: { // field return type
    actionRequiredCount: number; // Int!
    basicStats: NexusGenRootTypes['BasicStatistics']; // BasicStatistics!
    createdAt: NexusGenScalars['Date'] | null; // Date
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogueId: string; // String!
    followUpAction: NexusGenEnums['SessionActionType'] | null; // SessionActionType
    history: NexusGenRootTypes['DateHistogram']; // DateHistogram!
    id: string | null; // ID
    rankScore: number | null; // Float
    status: NexusGenEnums['StatusType']; // StatusType!
    topic: string | null; // String
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  JobObjectType: { // field return type
    createWorkspaceJob: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    createWorkspaceJobId: string | null; // String
    createdAt: string | null; // String
    id: string | null; // String
    updatedAt: string | null; // String
  }
  JobProcessLocation: { // field return type
    customFields: Array<NexusGenRootTypes['CustomFieldType'] | null> | null; // [CustomFieldType]
    id: string | null; // String
    name: string | null; // String
    path: string | null; // String
    type: NexusGenEnums['JobProcessLocationType'] | null; // JobProcessLocationType
    xMaterialDimension: number | null; // Int
    yMaterialDimension: number | null; // Int
  }
  JobProcessLocations: { // field return type
    jobProcessLocations: Array<NexusGenRootTypes['JobProcessLocation'] | null> | null; // [JobProcessLocation]
  }
  LinkType: { // field return type
    backgroundColor: string | null; // String
    buttonText: string | null; // String
    header: string | null; // String
    iconUrl: string | null; // String
    id: string; // String!
    imageUrl: string | null; // String
    questionNode: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    questionNodeId: string | null; // String
    subHeader: string | null; // String
    title: string | null; // String
    type: string; // String!
    url: string; // String!
  }
  LoginOutput: { // field return type
    expiryDate: number | null; // Int
    token: string | null; // String
    user: NexusGenRootTypes['UserType'] | null; // UserType
  }
  MostChangedPath: { // field return type
    group: string | null; // String
    topNegativeChanged: Array<NexusGenRootTypes['TopicDelta'] | null> | null; // [TopicDelta]
    topPositiveChanged: Array<NexusGenRootTypes['TopicDelta'] | null> | null; // [TopicDelta]
  }
  MostPopularPath: { // field return type
    group: string | null; // String
    path: Array<NexusGenRootTypes['PathTopic'] | null> | null; // [PathTopic]
  }
  MostTrendingTopic: { // field return type
    group: string | null; // String
    impactScore: number | null; // Float
    nrVotes: number | null; // Int
    path: Array<string | null> | null; // [String]
  }
  Mutation: { // field return type
    appendToInteraction: NexusGenRootTypes['Session'] | null; // Session
    assignTags: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    assignUserToDialogues: NexusGenRootTypes['UserType'] | null; // UserType
    authenticateLambda: string | null; // String
    confirmCreateWorkspaceJob: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    copyDialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    createAutomation: NexusGenRootTypes['AutomationModel'] | null; // AutomationModel
    createAutomationToken: string | null; // String
    createBatchDeliveries: NexusGenRootTypes['CreateBatchDeliveriesOutputType'] | null; // CreateBatchDeliveriesOutputType
    createCTA: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    createCampaign: NexusGenRootTypes['CampaignType'] | null; // CampaignType
    createDialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    createJobProcessLocation: NexusGenRootTypes['JobProcessLocation'] | null; // JobProcessLocation
    createPermission: NexusGenRootTypes['PermssionType'] | null; // PermssionType
    createQuestion: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    createRole: NexusGenRootTypes['RoleType'] | null; // RoleType
    createSession: NexusGenRootTypes['Session'] | null; // Session
    createTag: NexusGenRootTypes['Tag'] | null; // Tag
    createTrigger: NexusGenRootTypes['TriggerType'] | null; // TriggerType
    createWorkspace: NexusGenRootTypes['Customer'] | null; // Customer
    deleteAutomation: NexusGenRootTypes['AutomationModel'] | null; // AutomationModel
    deleteCTA: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    deleteCustomer: NexusGenRootTypes['Customer'] | null; // Customer
    deleteDialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    deleteQuestion: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    deleteTag: NexusGenRootTypes['Tag'] | null; // Tag
    deleteTrigger: NexusGenRootTypes['TriggerType'] | null; // TriggerType
    deleteUser: NexusGenRootTypes['DeleteUserOutput'] | null; // DeleteUserOutput
    deselectTopic: boolean | null; // Boolean
    duplicateQuestion: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    editDialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    editTrigger: NexusGenRootTypes['TriggerType'] | null; // TriggerType
    editUser: NexusGenRootTypes['UserType'] | null; // UserType
    editWorkspace: NexusGenRootTypes['Customer'] | null; // Customer
    enableAutomation: NexusGenRootTypes['AutomationModel'] | null; // AutomationModel
    generateAutodeck: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    generateWorkspaceFromCSV: NexusGenRootTypes['Customer'] | null; // Customer
    handleUserStateInWorkspace: NexusGenRootTypes['UserCustomer'] | null; // UserCustomer
    inviteUser: NexusGenRootTypes['InviteUserOutput'] | null; // InviteUserOutput
    logout: string | null; // String
    massSeed: NexusGenRootTypes['Customer'] | null; // Customer
    register: string | null; // String
    removePixelRange: NexusGenRootTypes['AWSImageType'] | null; // AWSImageType
    requestInvite: NexusGenRootTypes['RequestInviteOutput'] | null; // RequestInviteOutput
    resetWorkspaceData: boolean | null; // Boolean
    retryAutodeckJob: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    sandbox: string | null; // String
    sendAutomationDialogueLink: boolean | null; // Boolean
    sendAutomationReport: boolean | null; // Boolean
    setDialoguePrivacy: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    singleUpload: NexusGenRootTypes['ImageType'] | null; // ImageType
    updateAutomation: NexusGenRootTypes['AutomationModel'] | null; // AutomationModel
    updateCTA: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    updateCreateWorkspaceJob: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    updateDeliveryStatus: string | null; // String
    updatePermissions: NexusGenRootTypes['RoleType'] | null; // RoleType
    updateQuestion: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    updateRoles: NexusGenRootTypes['RoleType'] | null; // RoleType
    uploadJobImage: NexusGenRootTypes['AWSImageType'] | null; // AWSImageType
    uploadUpsellImage: NexusGenRootTypes['ImageType'] | null; // ImageType
    verifyUserToken: NexusGenRootTypes['VerifyUserTokenOutput'] | null; // VerifyUserTokenOutput
    whitifyImage: NexusGenRootTypes['AWSImageType'] | null; // AWSImageType
  }
  NodeEntry: { // field return type
    creationDate: string | null; // String
    depth: number | null; // Int
    id: string | null; // ID
    relatedEdgeId: string | null; // String
    relatedNode: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    relatedNodeId: string | null; // String
    value: NexusGenRootTypes['NodeEntryValue'] | null; // NodeEntryValue
  }
  NodeEntryValue: { // field return type
    choiceNodeEntry: string | null; // String
    formNodeEntry: NexusGenRootTypes['FormNodeEntryType'] | null; // FormNodeEntryType
    linkNodeEntry: string | null; // String
    registrationNodeEntry: string | null; // String
    sliderNodeEntry: number | null; // Int
    textboxNodeEntry: string | null; // String
    videoNodeEntry: string | null; // String
  }
  Organization: { // field return type
    id: string | null; // ID
    layers: Array<NexusGenRootTypes['OrganizationLayer'] | null> | null; // [OrganizationLayer]
  }
  OrganizationLayer: { // field return type
    depth: number | null; // Int
    id: string | null; // ID
    type: NexusGenEnums['OrganizationLayerType'] | null; // OrganizationLayerType
  }
  PaginationPageInfo: { // field return type
    hasNextPage: boolean | null; // Boolean
    hasPrevPage: boolean | null; // Boolean
    nextPageOffset: number | null; // Int
    pageIndex: number | null; // Int
    prevPageOffset: number | null; // Int
  }
  Path: { // field return type
    id: string | null; // ID
    topicStrings: Array<string | null> | null; // [String]
  }
  PathTopic: { // field return type
    depth: number | null; // Int
    impactScore: number | null; // Float
    nrVotes: number | null; // Int
    topic: string | null; // String
  }
  PathedSessionsType: { // field return type
    endDateTime: string | null; // String
    path: Array<string | null> | null; // [String]
    pathedSessions: NexusGenRootTypes['Session'][] | null; // [Session!]
    startDateTime: string | null; // String
  }
  PermssionType: { // field return type
    customer: NexusGenRootTypes['Customer'] | null; // Customer
    description: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
  PreviewDataType: { // field return type
    colors: Array<string | null> | null; // [String]
    rembgLogoUrl: string | null; // String
    websiteScreenshotUrl: string | null; // String
  }
  PublicDialogueConnection: { // field return type
    dialogues: Array<NexusGenRootTypes['PublicDialogueInfo'] | null> | null; // [PublicDialogueInfo]
    pageInfo: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages: number | null; // Int
  }
  PublicDialogueInfo: { // field return type
    description: string | null; // String
    slug: string | null; // String
    title: string | null; // String
    url: string | null; // String
  }
  Query: { // field return type
    UserOfCustomer: NexusGenRootTypes['UserCustomer'] | null; // UserCustomer
    automation: NexusGenRootTypes['AutomationModel'] | null; // AutomationModel
    automations: Array<NexusGenRootTypes['AutomationModel'] | null> | null; // [AutomationModel]
    customer: NexusGenRootTypes['Customer'] | null; // Customer
    customers: Array<NexusGenRootTypes['Customer'] | null> | null; // [Customer]
    delivery: NexusGenRootTypes['DeliveryType'] | null; // DeliveryType
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogueLinks: NexusGenRootTypes['PublicDialogueConnection'] | null; // PublicDialogueConnection
    dialogues: Array<NexusGenRootTypes['Dialogue'] | null> | null; // [Dialogue]
    edge: NexusGenRootTypes['Edge'] | null; // Edge
    getAdjustedLogo: NexusGenRootTypes['AWSImageType'] | null; // AWSImageType
    getAutodeckJobs: NexusGenRootTypes['AutodeckConnectionType'] | null; // AutodeckConnectionType
    getJob: NexusGenRootTypes['CreateWorkspaceJobType'] | null; // CreateWorkspaceJobType
    getJobProcessLocations: NexusGenRootTypes['JobProcessLocations'] | null; // JobProcessLocations
    getPreviewData: NexusGenRootTypes['PreviewDataType'] | null; // PreviewDataType
    me: NexusGenRootTypes['UserType'] | null; // UserType
    question: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    refreshAccessToken: NexusGenRootTypes['RefreshAccessTokenOutput'] | null; // RefreshAccessTokenOutput
    role: NexusGenRootTypes['RoleType'] | null; // RoleType
    roleConnection: NexusGenRootTypes['RoleConnection'] | null; // RoleConnection
    session: NexusGenRootTypes['Session'] | null; // Session
    sessions: Array<NexusGenRootTypes['Session'] | null> | null; // [Session]
    tags: Array<NexusGenRootTypes['Tag'] | null> | null; // [Tag]
    trigger: NexusGenRootTypes['TriggerType'] | null; // TriggerType
    triggerConnection: NexusGenRootTypes['TriggerConnectionType'] | null; // TriggerConnectionType
    triggers: Array<NexusGenRootTypes['TriggerType'] | null> | null; // [TriggerType]
    user: NexusGenRootTypes['UserType'] | null; // UserType
    users: Array<NexusGenRootTypes['UserType'] | null> | null; // [UserType]
  }
  QuestionConditionScopeModel: { // field return type
    aggregate: NexusGenRootTypes['ConditionPropertyAggregate'] | null; // ConditionPropertyAggregate
    aspect: NexusGenEnums['QuestionAspectType'] | null; // QuestionAspectType
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
  }
  QuestionNode: { // field return type
    children: NexusGenRootTypes['Edge'][] | null; // [Edge!]
    creationDate: string | null; // String
    extraContent: string | null; // String
    form: NexusGenRootTypes['FormNodeType'] | null; // FormNodeType
    id: string; // ID!
    indepthQuestionStatisticsSummary: Array<NexusGenRootTypes['IndepthQuestionStatisticsSummary'] | null> | null; // [IndepthQuestionStatisticsSummary]
    isLeaf: boolean; // Boolean!
    isRoot: boolean | null; // Boolean
    links: NexusGenRootTypes['LinkType'][]; // [LinkType!]!
    options: Array<NexusGenRootTypes['QuestionOption'] | null> | null; // [QuestionOption]
    overrideLeaf: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    overrideLeafId: string | null; // String
    questionDialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    questionDialogueId: string | null; // String
    questionStatisticsSummary: NexusGenRootTypes['QuestionStatisticsSummary'] | null; // QuestionStatisticsSummary
    share: NexusGenRootTypes['ShareNodeType'] | null; // ShareNodeType
    sliderNode: NexusGenRootTypes['SliderNodeType'] | null; // SliderNodeType
    title: string; // String!
    type: NexusGenEnums['QuestionNodeTypeEnum'] | null; // QuestionNodeTypeEnum
    updatedAt: string | null; // String
  }
  QuestionOption: { // field return type
    id: number | null; // Int
    isTopic: boolean | null; // Boolean
    overrideLeaf: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    position: number | null; // Int
    publicValue: string | null; // String
    questionId: string | null; // String
    value: string | null; // String
  }
  QuestionStatisticsSummary: { // field return type
    dialogueId: string | null; // String
    endDateTime: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    startDateTime: NexusGenScalars['Date'] | null; // Date
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  RefreshAccessTokenOutput: { // field return type
    accessToken: string | null; // String
  }
  RequestInviteOutput: { // field return type
    didInvite: boolean | null; // Boolean
    loginToken: string | null; // String
    userExists: boolean | null; // Boolean
  }
  RoleConnection: { // field return type
    cursor: string | null; // String
    endDate: string | null; // String
    limit: number | null; // Int
    offset: number | null; // Int
    pageInfo: NexusGenRootTypes['DeprecatedPaginationPageInfo'] | null; // DeprecatedPaginationPageInfo
    roles: Array<NexusGenRootTypes['RoleType'] | null> | null; // [RoleType]
    startDate: string | null; // String
  }
  RoleType: { // field return type
    allPermissions: Array<NexusGenEnums['SystemPermission'] | null> | null; // [SystemPermission]
    customerId: string | null; // String
    id: string | null; // ID
    name: string | null; // String
    nrPermissions: number | null; // Int
    permissions: Array<NexusGenEnums['SystemPermission'] | null> | null; // [SystemPermission]
    roleId: string | null; // String
  }
  Session: { // field return type
    browser: string | null; // String
    createdAt: NexusGenScalars['Date'] | null; // Date
    delivery: NexusGenRootTypes['DeliveryType'] | null; // DeliveryType
    deliveryId: string | null; // String
    device: string | null; // String
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogueId: string | null; // String
    followUpAction: NexusGenRootTypes['FormNodeEntryType'] | null; // FormNodeEntryType
    id: string; // ID!
    mainScore: number | null; // Float
    nodeEntries: NexusGenRootTypes['NodeEntry'][] | null; // [NodeEntry!]
    originUrl: string | null; // String
    paths: number | null; // Int
    score: number; // Float!
    totalTimeInSec: number | null; // Int
  }
  SessionConnection: { // field return type
    pageInfo: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    totalPages: number | null; // Int
  }
  ShareNodeType: { // field return type
    createdAt: string | null; // String
    id: string | null; // String
    title: string | null; // String
    tooltip: string | null; // String
    updatedAt: string | null; // String
    url: string | null; // String
  }
  SliderNodeMarkerType: { // field return type
    id: string | null; // ID
    label: string | null; // String
    range: NexusGenRootTypes['SliderNodeRangeType'] | null; // SliderNodeRangeType
    subLabel: string | null; // String
  }
  SliderNodeRangeType: { // field return type
    end: number | null; // Float
    id: string | null; // ID
    start: number | null; // Float
  }
  SliderNodeType: { // field return type
    happyText: string | null; // String
    id: string | null; // ID
    markers: NexusGenRootTypes['SliderNodeMarkerType'][] | null; // [SliderNodeMarkerType!]
    unhappyText: string | null; // String
  }
  Tag: { // field return type
    customerId: string | null; // String
    id: string | null; // ID
    name: string | null; // String
    type: NexusGenEnums['TagTypeEnum'] | null; // TagTypeEnum
  }
  TopicDelta: { // field return type
    averageCurrent: number | null; // Float
    averagePrevious: number | null; // Float
    delta: number | null; // Float
    group: string | null; // String
    nrVotes: number | null; // Int
    percentageChanged: number | null; // Float
    topic: string | null; // String
  }
  TopicNodeEntryValue: { // field return type
    id: number | null; // Int
    mainScore: number | null; // Int
    nodeEntryId: string | null; // String
    value: string | null; // String
  }
  TopicType: { // field return type
    basicStats: NexusGenRootTypes['BasicStatistics'] | null; // BasicStatistics
    impactScore: number | null; // Float
    name: string; // String!
    nrVotes: number | null; // Int
    subTopics: Array<NexusGenRootTypes['TopicType'] | null> | null; // [TopicType]
  }
  TriggerConditionType: { // field return type
    id: number | null; // Int
    maxValue: number | null; // Int
    minValue: number | null; // Int
    question: NexusGenRootTypes['QuestionNode'] | null; // QuestionNode
    textValue: string | null; // String
    triggerId: string | null; // String
    type: NexusGenEnums['TriggerConditionEnum'] | null; // TriggerConditionEnum
  }
  TriggerConnectionType: { // field return type
    cursor: string | null; // String
    endDate: string | null; // String
    limit: number | null; // Int
    offset: number | null; // Int
    pageInfo: NexusGenRootTypes['DeprecatedPaginationPageInfo'] | null; // DeprecatedPaginationPageInfo
    startDate: string | null; // String
    triggers: Array<NexusGenRootTypes['TriggerType'] | null> | null; // [TriggerType]
  }
  TriggerType: { // field return type
    conditions: Array<NexusGenRootTypes['TriggerConditionType'] | null> | null; // [TriggerConditionType]
    id: string | null; // String
    medium: NexusGenEnums['TriggerMediumEnum'] | null; // TriggerMediumEnum
    name: string | null; // String
    recipients: Array<NexusGenRootTypes['UserType'] | null> | null; // [UserType]
    relatedDialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    relatedNodeId: string | null; // String
    type: NexusGenEnums['TriggerTypeEnum'] | null; // TriggerTypeEnum
  }
  UrgentPath: { // field return type
    basicStats: NexusGenRootTypes['BasicStatistics'] | null; // BasicStatistics
    dialogue: NexusGenRootTypes['Dialogue'] | null; // Dialogue
    dialogueId: string; // String!
    id: string | null; // ID
    path: NexusGenRootTypes['Path'] | null; // Path
  }
  UserConnection: { // field return type
    pageInfo: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages: number | null; // Int
    userCustomers: Array<NexusGenRootTypes['UserCustomer'] | null> | null; // [UserCustomer]
  }
  UserCustomer: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    customer: NexusGenRootTypes['Customer'] | null; // Customer
    isActive: boolean | null; // Boolean
    role: NexusGenRootTypes['RoleType'] | null; // RoleType
    user: NexusGenRootTypes['UserType'] | null; // UserType
  }
  UserType: { // field return type
    assignedDialogues: NexusGenRootTypes['AssignedDialogues'] | null; // AssignedDialogues
    customers: Array<NexusGenRootTypes['Customer'] | null> | null; // [Customer]
    email: string | null; // String
    firstName: string | null; // String
    globalPermissions: Array<NexusGenEnums['SystemPermission'] | null> | null; // [SystemPermission]
    id: string; // ID!
    lastActivity: NexusGenScalars['Date'] | null; // Date
    lastLoggedIn: NexusGenScalars['Date'] | null; // Date
    lastName: string | null; // String
    phone: string | null; // String
    role: NexusGenRootTypes['RoleType'] | null; // RoleType
    roleId: string | null; // String
    userCustomers: Array<NexusGenRootTypes['UserCustomer'] | null> | null; // [UserCustomer]
  }
  VerifyUserTokenOutput: { // field return type
    accessToken: string | null; // String
    accessTokenExpiry: number | null; // Int
    userData: NexusGenRootTypes['UserType'] | null; // UserType
  }
  WorkspaceConditionScopeModel: { // field return type
    aggregate: NexusGenRootTypes['ConditionPropertyAggregate'] | null; // ConditionPropertyAggregate
    aspect: NexusGenEnums['WorkspaceAspectType'] | null; // WorkspaceAspectType
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  WorkspaceStatistics: { // field return type
    basicStats: NexusGenRootTypes['BasicStatistics'] | null; // BasicStatistics
    health: NexusGenRootTypes['HealthScore'] | null; // HealthScore
    id: string | null; // ID
    mostChangedPath: NexusGenRootTypes['MostChangedPath'] | null; // MostChangedPath
    mostPopularPath: NexusGenRootTypes['MostPopularPath'] | null; // MostPopularPath
    mostTrendingTopic: NexusGenRootTypes['MostTrendingTopic'] | null; // MostTrendingTopic
    rankedTopics: Array<NexusGenRootTypes['TopicType'] | null> | null; // [TopicType]
    workspaceStatisticsSummary: NexusGenRootTypes['DialogueStatisticsSummaryModel'][]; // [DialogueStatisticsSummaryModel!]!
  }
  lineChartDataType: { // field return type
    entryId: string | null; // String
    x: string | null; // String
    y: number | null; // Int
  }
  topPathType: { // field return type
    answer: string | null; // String
    basicSentiment: string | null; // String
    quantity: number | null; // Int
  }
  ConnectionInterface: { // field return type
    pageInfo: NexusGenRootTypes['PaginationPageInfo'] | null; // PaginationPageInfo
    totalPages: number | null; // Int
  }
  DeprecatedConnectionInterface: { // field return type
    cursor: string | null; // String
    endDate: string | null; // String
    limit: number | null; // Int
    offset: number | null; // Int
    pageInfo: NexusGenRootTypes['DeprecatedPaginationPageInfo'] | null; // DeprecatedPaginationPageInfo
    startDate: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  AWSImageType: { // field return type name
    encoding: 'String'
    filename: 'String'
    mimetype: 'String'
    url: 'String'
  }
  AssignedDialogues: { // field return type name
    assignedDialogues: 'Dialogue'
    privateWorkspaceDialogues: 'Dialogue'
  }
  AutodeckConnectionType: { // field return type name
    cursor: 'String'
    endDate: 'String'
    jobs: 'CreateWorkspaceJobType'
    limit: 'Int'
    offset: 'Int'
    pageInfo: 'DeprecatedPaginationPageInfo'
    startDate: 'String'
  }
  AutomationActionChannel: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    payload: 'JSONObject'
    type: 'AutomationActionChannelType'
    updatedAt: 'Date'
  }
  AutomationActionModel: { // field return type name
    channels: 'AutomationActionChannel'
    createdAt: 'Date'
    id: 'ID'
    payload: 'JSONObject'
    type: 'AutomationActionType'
    updatedAt: 'Date'
  }
  AutomationConditionBuilderModel: { // field return type name
    childConditionBuilderId: 'String'
    conditions: 'AutomationConditionModel'
    id: 'ID'
    type: 'AutomationConditionBuilderType'
  }
  AutomationConditionModel: { // field return type name
    createdAt: 'Date'
    dialogue: 'Dialogue'
    dialogueScope: 'DialogueConditionScopeModel'
    id: 'ID'
    operands: 'AutomationConditionOperandModel'
    operator: 'AutomationConditionOperatorType'
    question: 'QuestionNode'
    questionScope: 'QuestionConditionScopeModel'
    scope: 'AutomationConditionScopeType'
    updatedAt: 'Date'
    workspaceScope: 'WorkspaceConditionScopeModel'
  }
  AutomationConditionOperandModel: { // field return type name
    createdAt: 'Date'
    dateTimeValue: 'String'
    id: 'ID'
    numberValue: 'Int'
    textValue: 'String'
    type: 'OperandType'
    updatedAt: 'Date'
  }
  AutomationConnection: { // field return type name
    automations: 'AutomationModel'
    pageInfo: 'PaginationPageInfo'
    totalPages: 'Int'
  }
  AutomationEventModel: { // field return type name
    createdAt: 'Date'
    dialogue: 'Dialogue'
    endDate: 'String'
    id: 'ID'
    periodType: 'RecurringPeriodType'
    question: 'QuestionNode'
    startDate: 'String'
    type: 'AutomationEventType'
    updatedAt: 'Date'
  }
  AutomationModel: { // field return type name
    automationScheduled: 'AutomationScheduledModel'
    automationTrigger: 'AutomationTriggerModel'
    createdAt: 'Date'
    description: 'String'
    id: 'ID'
    isActive: 'Boolean'
    label: 'String'
    type: 'AutomationType'
    updatedAt: 'Date'
    workspace: 'Customer'
  }
  AutomationScheduledModel: { // field return type name
    actions: 'AutomationActionModel'
    activeDialogue: 'Dialogue'
    createdAt: 'Date'
    dayOfMonth: 'String'
    dayOfWeek: 'String'
    dayRange: 'DayRange'
    dialogueId: 'String'
    frequency: 'String'
    hours: 'String'
    id: 'ID'
    minutes: 'String'
    month: 'String'
    time: 'String'
    type: 'RecurringPeriodType'
    updatedAt: 'Date'
  }
  AutomationTriggerModel: { // field return type name
    actions: 'AutomationActionModel'
    activeDialogue: 'Dialogue'
    conditionBuilder: 'AutomationConditionBuilderModel'
    createdAt: 'Date'
    event: 'AutomationEventModel'
    id: 'ID'
    updatedAt: 'Date'
  }
  BasicStatistics: { // field return type name
    average: 'Float'
    responseCount: 'Int'
  }
  CampaignType: { // field return type name
    deliveryConnection: 'DeliveryConnectionType'
    id: 'ID'
    label: 'String'
    variants: 'CampaignVariantType'
  }
  CampaignVariantCustomVariableType: { // field return type name
    id: 'ID'
    key: 'String'
  }
  CampaignVariantType: { // field return type name
    body: 'String'
    campaign: 'CampaignType'
    customVariables: 'CampaignVariantCustomVariableType'
    deliveryConnection: 'DeliveryConnectionType'
    dialogue: 'Dialogue'
    from: 'String'
    id: 'ID'
    label: 'String'
    type: 'CampaignVariantEnum'
    weight: 'Int'
    workspace: 'Customer'
  }
  ColourSettings: { // field return type name
    id: 'ID'
    primary: 'String'
    primaryAlt: 'String'
    secondary: 'String'
  }
  ConditionPropertyAggregate: { // field return type name
    createdAt: 'String'
    endDate: 'String'
    id: 'ID'
    latest: 'Int'
    startDate: 'String'
    type: 'ConditionPropertyAggregateType'
  }
  CreateBatchDeliveriesOutputType: { // field return type name
    failedDeliveries: 'FailedDeliveryModel'
    nrDeliveries: 'Int'
  }
  CreateWorkspaceJobType: { // field return type name
    createdAt: 'String'
    errorMessage: 'String'
    id: 'String'
    message: 'String'
    name: 'String'
    processLocation: 'JobProcessLocation'
    referenceId: 'String'
    referenceType: 'CloudReferenceType'
    requiresColorExtraction: 'Boolean'
    requiresRembg: 'Boolean'
    requiresScreenshot: 'Boolean'
    resourcesUrl: 'String'
    status: 'JobStatusType'
    updatedAt: 'String'
  }
  CustomFieldType: { // field return type name
    id: 'String'
    jobProcessLocationId: 'String'
    key: 'String'
    value: 'String'
  }
  Customer: { // field return type name
    automationConnection: 'AutomationConnection'
    automations: 'AutomationModel'
    campaign: 'CampaignType'
    campaigns: 'CampaignType'
    dialogue: 'Dialogue'
    dialogueConnection: 'DialogueConnection'
    dialogues: 'Dialogue'
    id: 'ID'
    isDemo: 'Boolean'
    issues: 'Issue'
    name: 'String'
    nestedDialogueStatisticsSummary: 'DialogueStatisticsSummaryModel'
    nestedHealthScore: 'HealthScore'
    nestedMostChanged: 'MostChangedPath'
    nestedMostPopular: 'MostPopularPath'
    nestedMostTrendingTopic: 'MostTrendingTopic'
    organization: 'Organization'
    roles: 'RoleType'
    sessionConnection: 'SessionConnection'
    settings: 'CustomerSettings'
    slug: 'String'
    statistics: 'WorkspaceStatistics'
    userCustomer: 'UserCustomer'
    users: 'UserType'
    usersConnection: 'UserConnection'
  }
  CustomerSettings: { // field return type name
    colourSettings: 'ColourSettings'
    fontSettings: 'FontSettings'
    id: 'ID'
    logoOpacity: 'Int'
    logoUrl: 'String'
  }
  DateHistogram: { // field return type name
    id: 'ID'
    items: 'DateHistogramItem'
  }
  DateHistogramItem: { // field return type name
    date: 'Date'
    frequency: 'Int'
    id: 'ID'
  }
  DayRange: { // field return type name
    index: 'Int'
    label: 'String'
  }
  DeleteUserOutput: { // field return type name
    deletedUser: 'Boolean'
  }
  DeliveryConnectionType: { // field return type name
    deliveries: 'DeliveryType'
    pageInfo: 'PaginationPageInfo'
    totalPages: 'Int'
  }
  DeliveryEventType: { // field return type name
    createdAt: 'Date'
    failureMessage: 'String'
    id: 'ID'
    status: 'DeliveryStatusEnum'
  }
  DeliveryType: { // field return type name
    campaignVariant: 'CampaignVariantType'
    createdAt: 'Date'
    currentStatus: 'DeliveryStatusEnum'
    deliveryRecipientEmail: 'String'
    deliveryRecipientFirstName: 'String'
    deliveryRecipientLastName: 'String'
    deliveryRecipientPhone: 'String'
    events: 'DeliveryEventType'
    id: 'ID'
    scheduledAt: 'Date'
    updatedAt: 'Date'
  }
  DeprecatedPaginationPageInfo: { // field return type name
    cursor: 'String'
    nrPages: 'Int'
    pageIndex: 'Int'
  }
  Dialogue: { // field return type name
    assignees: 'UserType'
    averageScore: 'Float'
    campaignVariants: 'CampaignVariantType'
    creationDate: 'String'
    customer: 'Customer'
    customerId: 'String'
    description: 'String'
    dialogueStatisticsSummary: 'DialogueStatisticsSummaryModel'
    edges: 'Edge'
    healthScore: 'HealthScore'
    id: 'ID'
    isPrivate: 'Boolean'
    isWithoutGenData: 'Boolean'
    language: 'LanguageEnumType'
    leafs: 'QuestionNode'
    mostChangedPath: 'MostChangedPath'
    mostPopularPath: 'MostPopularPath'
    mostTrendingTopic: 'MostTrendingTopic'
    pathedSessionsConnection: 'PathedSessionsType'
    postLeafNode: 'DialogueFinisherObjectType'
    publicTitle: 'String'
    questions: 'QuestionNode'
    rootQuestion: 'QuestionNode'
    sessionConnection: 'SessionConnection'
    sessions: 'Session'
    slug: 'String'
    statistics: 'DialogueStatistics'
    tags: 'Tag'
    title: 'String'
    topic: 'TopicType'
    updatedAt: 'String'
    wasGeneratedWithGenData: 'Boolean'
  }
  DialogueConditionScopeModel: { // field return type name
    aggregate: 'ConditionPropertyAggregate'
    aspect: 'DialogueAspectType'
    createdAt: 'Date'
    id: 'ID'
    updatedAt: 'Date'
  }
  DialogueConnection: { // field return type name
    dialogues: 'Dialogue'
    pageInfo: 'PaginationPageInfo'
    totalPages: 'Int'
  }
  DialogueFinisherObjectType: { // field return type name
    header: 'String'
    id: 'ID'
    subtext: 'String'
  }
  DialogueStatistics: { // field return type name
    history: 'lineChartDataType'
    mostPopularPath: 'topPathType'
    nrInteractions: 'Int'
    topNegativePath: 'topPathType'
    topPositivePath: 'topPathType'
  }
  DialogueStatisticsSummaryModel: { // field return type name
    dialogue: 'Dialogue'
    dialogueId: 'String'
    endDateTime: 'Date'
    id: 'ID'
    impactScore: 'Float'
    nrVotes: 'Int'
    startDateTime: 'Date'
    title: 'String'
    updatedAt: 'Date'
  }
  Edge: { // field return type name
    childNode: 'QuestionNode'
    childNodeId: 'String'
    conditions: 'EdgeCondition'
    createdAt: 'String'
    id: 'ID'
    parentNode: 'QuestionNode'
    parentNodeId: 'String'
    updatedAt: 'String'
  }
  EdgeCondition: { // field return type name
    conditionType: 'String'
    edgeId: 'String'
    id: 'Int'
    matchValue: 'String'
    renderMax: 'Int'
    renderMin: 'Int'
  }
  FailedDeliveryModel: { // field return type name
    error: 'String'
    record: 'String'
  }
  FontSettings: { // field return type name
    id: 'ID'
  }
  FormNodeEntryType: { // field return type name
    id: 'Int'
    values: 'FormNodeEntryValueType'
  }
  FormNodeEntryValueType: { // field return type name
    email: 'String'
    longText: 'String'
    number: 'Int'
    phoneNumber: 'String'
    relatedField: 'FormNodeField'
    shortText: 'String'
    url: 'String'
  }
  FormNodeField: { // field return type name
    contacts: 'UserType'
    id: 'ID'
    isRequired: 'Boolean'
    label: 'String'
    placeholder: 'String'
    position: 'Int'
    type: 'FormNodeFieldTypeEnum'
  }
  FormNodeType: { // field return type name
    fields: 'FormNodeField'
    helperText: 'String'
    id: 'String'
  }
  HealthScore: { // field return type name
    negativeResponseCount: 'Int'
    nrVotes: 'Int'
    score: 'Float'
  }
  ImageType: { // field return type name
    encoding: 'String'
    filename: 'String'
    mimetype: 'String'
    url: 'String'
  }
  IndepthQuestionStatisticsSummary: { // field return type name
    impactScore: 'Float'
    nrVotes: 'Int'
    option: 'String'
  }
  InviteUserOutput: { // field return type name
    didAlreadyExist: 'Boolean'
    didInvite: 'Boolean'
  }
  Issue: { // field return type name
    actionRequiredCount: 'Int'
    basicStats: 'BasicStatistics'
    createdAt: 'Date'
    dialogue: 'Dialogue'
    dialogueId: 'String'
    followUpAction: 'SessionActionType'
    history: 'DateHistogram'
    id: 'ID'
    rankScore: 'Float'
    status: 'StatusType'
    topic: 'String'
    updatedAt: 'Date'
  }
  JobObjectType: { // field return type name
    createWorkspaceJob: 'CreateWorkspaceJobType'
    createWorkspaceJobId: 'String'
    createdAt: 'String'
    id: 'String'
    updatedAt: 'String'
  }
  JobProcessLocation: { // field return type name
    customFields: 'CustomFieldType'
    id: 'String'
    name: 'String'
    path: 'String'
    type: 'JobProcessLocationType'
    xMaterialDimension: 'Int'
    yMaterialDimension: 'Int'
  }
  JobProcessLocations: { // field return type name
    jobProcessLocations: 'JobProcessLocation'
  }
  LinkType: { // field return type name
    backgroundColor: 'String'
    buttonText: 'String'
    header: 'String'
    iconUrl: 'String'
    id: 'String'
    imageUrl: 'String'
    questionNode: 'QuestionNode'
    questionNodeId: 'String'
    subHeader: 'String'
    title: 'String'
    type: 'String'
    url: 'String'
  }
  LoginOutput: { // field return type name
    expiryDate: 'Int'
    token: 'String'
    user: 'UserType'
  }
  MostChangedPath: { // field return type name
    group: 'String'
    topNegativeChanged: 'TopicDelta'
    topPositiveChanged: 'TopicDelta'
  }
  MostPopularPath: { // field return type name
    group: 'String'
    path: 'PathTopic'
  }
  MostTrendingTopic: { // field return type name
    group: 'String'
    impactScore: 'Float'
    nrVotes: 'Int'
    path: 'String'
  }
  Mutation: { // field return type name
    appendToInteraction: 'Session'
    assignTags: 'Dialogue'
    assignUserToDialogues: 'UserType'
    authenticateLambda: 'String'
    confirmCreateWorkspaceJob: 'CreateWorkspaceJobType'
    copyDialogue: 'Dialogue'
    createAutomation: 'AutomationModel'
    createAutomationToken: 'String'
    createBatchDeliveries: 'CreateBatchDeliveriesOutputType'
    createCTA: 'QuestionNode'
    createCampaign: 'CampaignType'
    createDialogue: 'Dialogue'
    createJobProcessLocation: 'JobProcessLocation'
    createPermission: 'PermssionType'
    createQuestion: 'QuestionNode'
    createRole: 'RoleType'
    createSession: 'Session'
    createTag: 'Tag'
    createTrigger: 'TriggerType'
    createWorkspace: 'Customer'
    deleteAutomation: 'AutomationModel'
    deleteCTA: 'QuestionNode'
    deleteCustomer: 'Customer'
    deleteDialogue: 'Dialogue'
    deleteQuestion: 'QuestionNode'
    deleteTag: 'Tag'
    deleteTrigger: 'TriggerType'
    deleteUser: 'DeleteUserOutput'
    deselectTopic: 'Boolean'
    duplicateQuestion: 'QuestionNode'
    editDialogue: 'Dialogue'
    editTrigger: 'TriggerType'
    editUser: 'UserType'
    editWorkspace: 'Customer'
    enableAutomation: 'AutomationModel'
    generateAutodeck: 'CreateWorkspaceJobType'
    generateWorkspaceFromCSV: 'Customer'
    handleUserStateInWorkspace: 'UserCustomer'
    inviteUser: 'InviteUserOutput'
    logout: 'String'
    massSeed: 'Customer'
    register: 'String'
    removePixelRange: 'AWSImageType'
    requestInvite: 'RequestInviteOutput'
    resetWorkspaceData: 'Boolean'
    retryAutodeckJob: 'CreateWorkspaceJobType'
    sandbox: 'String'
    sendAutomationDialogueLink: 'Boolean'
    sendAutomationReport: 'Boolean'
    setDialoguePrivacy: 'Dialogue'
    singleUpload: 'ImageType'
    updateAutomation: 'AutomationModel'
    updateCTA: 'QuestionNode'
    updateCreateWorkspaceJob: 'CreateWorkspaceJobType'
    updateDeliveryStatus: 'String'
    updatePermissions: 'RoleType'
    updateQuestion: 'QuestionNode'
    updateRoles: 'RoleType'
    uploadJobImage: 'AWSImageType'
    uploadUpsellImage: 'ImageType'
    verifyUserToken: 'VerifyUserTokenOutput'
    whitifyImage: 'AWSImageType'
  }
  NodeEntry: { // field return type name
    creationDate: 'String'
    depth: 'Int'
    id: 'ID'
    relatedEdgeId: 'String'
    relatedNode: 'QuestionNode'
    relatedNodeId: 'String'
    value: 'NodeEntryValue'
  }
  NodeEntryValue: { // field return type name
    choiceNodeEntry: 'String'
    formNodeEntry: 'FormNodeEntryType'
    linkNodeEntry: 'String'
    registrationNodeEntry: 'String'
    sliderNodeEntry: 'Int'
    textboxNodeEntry: 'String'
    videoNodeEntry: 'String'
  }
  Organization: { // field return type name
    id: 'ID'
    layers: 'OrganizationLayer'
  }
  OrganizationLayer: { // field return type name
    depth: 'Int'
    id: 'ID'
    type: 'OrganizationLayerType'
  }
  PaginationPageInfo: { // field return type name
    hasNextPage: 'Boolean'
    hasPrevPage: 'Boolean'
    nextPageOffset: 'Int'
    pageIndex: 'Int'
    prevPageOffset: 'Int'
  }
  Path: { // field return type name
    id: 'ID'
    topicStrings: 'String'
  }
  PathTopic: { // field return type name
    depth: 'Int'
    impactScore: 'Float'
    nrVotes: 'Int'
    topic: 'String'
  }
  PathedSessionsType: { // field return type name
    endDateTime: 'String'
    path: 'String'
    pathedSessions: 'Session'
    startDateTime: 'String'
  }
  PermssionType: { // field return type name
    customer: 'Customer'
    description: 'String'
    id: 'ID'
    name: 'String'
  }
  PreviewDataType: { // field return type name
    colors: 'String'
    rembgLogoUrl: 'String'
    websiteScreenshotUrl: 'String'
  }
  PublicDialogueConnection: { // field return type name
    dialogues: 'PublicDialogueInfo'
    pageInfo: 'PaginationPageInfo'
    totalPages: 'Int'
  }
  PublicDialogueInfo: { // field return type name
    description: 'String'
    slug: 'String'
    title: 'String'
    url: 'String'
  }
  Query: { // field return type name
    UserOfCustomer: 'UserCustomer'
    automation: 'AutomationModel'
    automations: 'AutomationModel'
    customer: 'Customer'
    customers: 'Customer'
    delivery: 'DeliveryType'
    dialogue: 'Dialogue'
    dialogueLinks: 'PublicDialogueConnection'
    dialogues: 'Dialogue'
    edge: 'Edge'
    getAdjustedLogo: 'AWSImageType'
    getAutodeckJobs: 'AutodeckConnectionType'
    getJob: 'CreateWorkspaceJobType'
    getJobProcessLocations: 'JobProcessLocations'
    getPreviewData: 'PreviewDataType'
    me: 'UserType'
    question: 'QuestionNode'
    refreshAccessToken: 'RefreshAccessTokenOutput'
    role: 'RoleType'
    roleConnection: 'RoleConnection'
    session: 'Session'
    sessions: 'Session'
    tags: 'Tag'
    trigger: 'TriggerType'
    triggerConnection: 'TriggerConnectionType'
    triggers: 'TriggerType'
    user: 'UserType'
    users: 'UserType'
  }
  QuestionConditionScopeModel: { // field return type name
    aggregate: 'ConditionPropertyAggregate'
    aspect: 'QuestionAspectType'
    createdAt: 'Date'
    id: 'ID'
  }
  QuestionNode: { // field return type name
    children: 'Edge'
    creationDate: 'String'
    extraContent: 'String'
    form: 'FormNodeType'
    id: 'ID'
    indepthQuestionStatisticsSummary: 'IndepthQuestionStatisticsSummary'
    isLeaf: 'Boolean'
    isRoot: 'Boolean'
    links: 'LinkType'
    options: 'QuestionOption'
    overrideLeaf: 'QuestionNode'
    overrideLeafId: 'String'
    questionDialogue: 'Dialogue'
    questionDialogueId: 'String'
    questionStatisticsSummary: 'QuestionStatisticsSummary'
    share: 'ShareNodeType'
    sliderNode: 'SliderNodeType'
    title: 'String'
    type: 'QuestionNodeTypeEnum'
    updatedAt: 'String'
  }
  QuestionOption: { // field return type name
    id: 'Int'
    isTopic: 'Boolean'
    overrideLeaf: 'QuestionNode'
    position: 'Int'
    publicValue: 'String'
    questionId: 'String'
    value: 'String'
  }
  QuestionStatisticsSummary: { // field return type name
    dialogueId: 'String'
    endDateTime: 'Date'
    id: 'ID'
    startDateTime: 'Date'
    updatedAt: 'Date'
  }
  RefreshAccessTokenOutput: { // field return type name
    accessToken: 'String'
  }
  RequestInviteOutput: { // field return type name
    didInvite: 'Boolean'
    loginToken: 'String'
    userExists: 'Boolean'
  }
  RoleConnection: { // field return type name
    cursor: 'String'
    endDate: 'String'
    limit: 'Int'
    offset: 'Int'
    pageInfo: 'DeprecatedPaginationPageInfo'
    roles: 'RoleType'
    startDate: 'String'
  }
  RoleType: { // field return type name
    allPermissions: 'SystemPermission'
    customerId: 'String'
    id: 'ID'
    name: 'String'
    nrPermissions: 'Int'
    permissions: 'SystemPermission'
    roleId: 'String'
  }
  Session: { // field return type name
    browser: 'String'
    createdAt: 'Date'
    delivery: 'DeliveryType'
    deliveryId: 'String'
    device: 'String'
    dialogue: 'Dialogue'
    dialogueId: 'String'
    followUpAction: 'FormNodeEntryType'
    id: 'ID'
    mainScore: 'Float'
    nodeEntries: 'NodeEntry'
    originUrl: 'String'
    paths: 'Int'
    score: 'Float'
    totalTimeInSec: 'Int'
  }
  SessionConnection: { // field return type name
    pageInfo: 'PaginationPageInfo'
    sessions: 'Session'
    totalPages: 'Int'
  }
  ShareNodeType: { // field return type name
    createdAt: 'String'
    id: 'String'
    title: 'String'
    tooltip: 'String'
    updatedAt: 'String'
    url: 'String'
  }
  SliderNodeMarkerType: { // field return type name
    id: 'ID'
    label: 'String'
    range: 'SliderNodeRangeType'
    subLabel: 'String'
  }
  SliderNodeRangeType: { // field return type name
    end: 'Float'
    id: 'ID'
    start: 'Float'
  }
  SliderNodeType: { // field return type name
    happyText: 'String'
    id: 'ID'
    markers: 'SliderNodeMarkerType'
    unhappyText: 'String'
  }
  Tag: { // field return type name
    customerId: 'String'
    id: 'ID'
    name: 'String'
    type: 'TagTypeEnum'
  }
  TopicDelta: { // field return type name
    averageCurrent: 'Float'
    averagePrevious: 'Float'
    delta: 'Float'
    group: 'String'
    nrVotes: 'Int'
    percentageChanged: 'Float'
    topic: 'String'
  }
  TopicNodeEntryValue: { // field return type name
    id: 'Int'
    mainScore: 'Int'
    nodeEntryId: 'String'
    value: 'String'
  }
  TopicType: { // field return type name
    basicStats: 'BasicStatistics'
    impactScore: 'Float'
    name: 'String'
    nrVotes: 'Int'
    subTopics: 'TopicType'
  }
  TriggerConditionType: { // field return type name
    id: 'Int'
    maxValue: 'Int'
    minValue: 'Int'
    question: 'QuestionNode'
    textValue: 'String'
    triggerId: 'String'
    type: 'TriggerConditionEnum'
  }
  TriggerConnectionType: { // field return type name
    cursor: 'String'
    endDate: 'String'
    limit: 'Int'
    offset: 'Int'
    pageInfo: 'DeprecatedPaginationPageInfo'
    startDate: 'String'
    triggers: 'TriggerType'
  }
  TriggerType: { // field return type name
    conditions: 'TriggerConditionType'
    id: 'String'
    medium: 'TriggerMediumEnum'
    name: 'String'
    recipients: 'UserType'
    relatedDialogue: 'Dialogue'
    relatedNodeId: 'String'
    type: 'TriggerTypeEnum'
  }
  UrgentPath: { // field return type name
    basicStats: 'BasicStatistics'
    dialogue: 'Dialogue'
    dialogueId: 'String'
    id: 'ID'
    path: 'Path'
  }
  UserConnection: { // field return type name
    pageInfo: 'PaginationPageInfo'
    totalPages: 'Int'
    userCustomers: 'UserCustomer'
  }
  UserCustomer: { // field return type name
    createdAt: 'Date'
    customer: 'Customer'
    isActive: 'Boolean'
    role: 'RoleType'
    user: 'UserType'
  }
  UserType: { // field return type name
    assignedDialogues: 'AssignedDialogues'
    customers: 'Customer'
    email: 'String'
    firstName: 'String'
    globalPermissions: 'SystemPermission'
    id: 'ID'
    lastActivity: 'Date'
    lastLoggedIn: 'Date'
    lastName: 'String'
    phone: 'String'
    role: 'RoleType'
    roleId: 'String'
    userCustomers: 'UserCustomer'
  }
  VerifyUserTokenOutput: { // field return type name
    accessToken: 'String'
    accessTokenExpiry: 'Int'
    userData: 'UserType'
  }
  WorkspaceConditionScopeModel: { // field return type name
    aggregate: 'ConditionPropertyAggregate'
    aspect: 'WorkspaceAspectType'
    createdAt: 'Date'
    id: 'ID'
    updatedAt: 'Date'
  }
  WorkspaceStatistics: { // field return type name
    basicStats: 'BasicStatistics'
    health: 'HealthScore'
    id: 'ID'
    mostChangedPath: 'MostChangedPath'
    mostPopularPath: 'MostPopularPath'
    mostTrendingTopic: 'MostTrendingTopic'
    rankedTopics: 'TopicType'
    workspaceStatisticsSummary: 'DialogueStatisticsSummaryModel'
  }
  lineChartDataType: { // field return type name
    entryId: 'String'
    x: 'String'
    y: 'Int'
  }
  topPathType: { // field return type name
    answer: 'String'
    basicSentiment: 'String'
    quantity: 'Int'
  }
  ConnectionInterface: { // field return type name
    pageInfo: 'PaginationPageInfo'
    totalPages: 'Int'
  }
  DeprecatedConnectionInterface: { // field return type name
    cursor: 'String'
    endDate: 'String'
    limit: 'Int'
    offset: 'Int'
    pageInfo: 'DeprecatedPaginationPageInfo'
    startDate: 'String'
  }
}

export interface NexusGenArgTypes {
  CampaignType: {
    deliveryConnection: { // args
      filter?: NexusGenInputs['DeliveryConnectionFilterInput'] | null; // DeliveryConnectionFilterInput
    }
  }
  Customer: {
    automationConnection: { // args
      filter?: NexusGenInputs['AutomationConnectionFilterInput'] | null; // AutomationConnectionFilterInput
    }
    campaign: { // args
      campaignId?: string | null; // String
    }
    dialogue: { // args
      where?: NexusGenInputs['DialogueWhereUniqueInput'] | null; // DialogueWhereUniqueInput
    }
    dialogueConnection: { // args
      filter?: NexusGenInputs['DialogueConnectionFilterInput'] | null; // DialogueConnectionFilterInput
    }
    dialogues: { // args
      filter?: NexusGenInputs['DialogueFilterInputType'] | null; // DialogueFilterInputType
    }
    issues: { // args
      filter?: NexusGenInputs['IssueFilterInput'] | null; // IssueFilterInput
    }
    nestedDialogueStatisticsSummary: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    nestedHealthScore: { // args
      input?: NexusGenInputs['HealthScoreInput'] | null; // HealthScoreInput
    }
    nestedMostChanged: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    nestedMostPopular: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    nestedMostTrendingTopic: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    sessionConnection: { // args
      filter?: NexusGenInputs['SessionConnectionFilterInput'] | null; // SessionConnectionFilterInput
    }
    userCustomer: { // args
      userId?: string | null; // String
    }
    usersConnection: { // args
      customerSlug?: string | null; // String
      filter?: NexusGenInputs['UserConnectionFilterInput'] | null; // UserConnectionFilterInput
    }
  }
  Dialogue: {
    averageScore: { // args
      input?: NexusGenInputs['DialogueFilterInputType'] | null; // DialogueFilterInputType
    }
    dialogueStatisticsSummary: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    healthScore: { // args
      input?: NexusGenInputs['HealthScoreInput'] | null; // HealthScoreInput
    }
    leafs: { // args
      searchTerm?: string | null; // String
    }
    mostChangedPath: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    mostPopularPath: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    mostTrendingTopic: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    pathedSessionsConnection: { // args
      input?: NexusGenInputs['PathedSessionsInput'] | null; // PathedSessionsInput
    }
    sessionConnection: { // args
      filter?: NexusGenInputs['SessionConnectionFilterInput'] | null; // SessionConnectionFilterInput
    }
    sessions: { // args
      take?: number | null; // Int
    }
    statistics: { // args
      input?: NexusGenInputs['DialogueFilterInputType'] | null; // DialogueFilterInputType
    }
    topic: { // args
      input?: NexusGenInputs['TopicInputType'] | null; // TopicInputType
    }
  }
  Mutation: {
    appendToInteraction: { // args
      input?: NexusGenInputs['AppendToInteractionInput'] | null; // AppendToInteractionInput
    }
    assignTags: { // args
      dialogueId?: string | null; // String
      tags?: NexusGenInputs['TagsInputObjectType'] | null; // TagsInputObjectType
    }
    assignUserToDialogues: { // args
      input?: NexusGenInputs['AssignUserToDialoguesInput'] | null; // AssignUserToDialoguesInput
    }
    authenticateLambda: { // args
      input?: NexusGenInputs['AuthenticateLambdaInput'] | null; // AuthenticateLambdaInput
    }
    confirmCreateWorkspaceJob: { // args
      input?: NexusGenInputs['GenerateAutodeckInput'] | null; // GenerateAutodeckInput
    }
    copyDialogue: { // args
      input?: NexusGenInputs['CreateDialogueInputType'] | null; // CreateDialogueInputType
    }
    createAutomation: { // args
      input?: NexusGenInputs['CreateAutomationInput'] | null; // CreateAutomationInput
    }
    createAutomationToken: { // args
      email?: string | null; // String
    }
    createBatchDeliveries: { // args
      input?: NexusGenInputs['CreateBatchDeliveriesInputType'] | null; // CreateBatchDeliveriesInputType
    }
    createCTA: { // args
      input?: NexusGenInputs['CreateCTAInputType'] | null; // CreateCTAInputType
    }
    createCampaign: { // args
      input?: NexusGenInputs['CreateCampaignInputType'] | null; // CreateCampaignInputType
    }
    createDialogue: { // args
      input?: NexusGenInputs['CreateDialogueInputType'] | null; // CreateDialogueInputType
    }
    createJobProcessLocation: { // args
      input?: NexusGenInputs['createJobProcessLocationInput'] | null; // createJobProcessLocationInput
    }
    createPermission: { // args
      data?: NexusGenInputs['PermissionInput'] | null; // PermissionInput
    }
    createQuestion: { // args
      input?: NexusGenInputs['CreateQuestionNodeInputType'] | null; // CreateQuestionNodeInputType
    }
    createRole: { // args
      data?: NexusGenInputs['RoleInput'] | null; // RoleInput
    }
    createSession: { // args
      input?: NexusGenInputs['SessionInput'] | null; // SessionInput
    }
    createTag: { // args
      customerSlug?: string | null; // String
      name?: string | null; // String
      type?: NexusGenEnums['TagTypeEnum'] | null; // TagTypeEnum
    }
    createTrigger: { // args
      input?: NexusGenInputs['CreateTriggerInputType'] | null; // CreateTriggerInputType
    }
    createWorkspace: { // args
      input?: NexusGenInputs['CreateWorkspaceInput'] | null; // CreateWorkspaceInput
    }
    deleteAutomation: { // args
      input?: NexusGenInputs['DeleteAutomationInput'] | null; // DeleteAutomationInput
    }
    deleteCTA: { // args
      input?: NexusGenInputs['DeleteNodeInputType'] | null; // DeleteNodeInputType
    }
    deleteCustomer: { // args
      where?: NexusGenInputs['CustomerWhereUniqueInput'] | null; // CustomerWhereUniqueInput
    }
    deleteDialogue: { // args
      input?: NexusGenInputs['DeleteDialogueInputType'] | null; // DeleteDialogueInputType
    }
    deleteQuestion: { // args
      input?: NexusGenInputs['DeleteNodeInputType'] | null; // DeleteNodeInputType
    }
    deleteTag: { // args
      tagId?: string | null; // String
    }
    deleteTrigger: { // args
      customerSlug?: string | null; // String
      id?: string | null; // String
    }
    deleteUser: { // args
      input?: NexusGenInputs['DeleteUserInput'] | null; // DeleteUserInput
    }
    deselectTopic: { // args
      input?: NexusGenInputs['DeselectTopicInput'] | null; // DeselectTopicInput
    }
    duplicateQuestion: { // args
      questionId?: string | null; // String
    }
    editDialogue: { // args
      customerSlug?: string | null; // String
      description?: string | null; // String
      dialogueFinisherHeading?: string | null; // String
      dialogueFinisherSubheading?: string | null; // String
      dialogueSlug?: string | null; // String
      isWithoutGenData?: boolean | null; // Boolean
      language?: NexusGenEnums['LanguageEnumType'] | null; // LanguageEnumType
      publicTitle?: string | null; // String
      tags?: NexusGenInputs['TagsInputObjectType'] | null; // TagsInputObjectType
      title?: string | null; // String
    }
    editTrigger: { // args
      customerSlug?: string | null; // String
      recipients?: NexusGenInputs['RecipientsInputType'] | null; // RecipientsInputType
      trigger?: NexusGenInputs['TriggerInputType'] | null; // TriggerInputType
      triggerId?: string | null; // String
    }
    editUser: { // args
      input?: NexusGenInputs['EditUserInput'] | null; // EditUserInput
      userId?: string | null; // String
    }
    editWorkspace: { // args
      input?: NexusGenInputs['EditWorkspaceInput'] | null; // EditWorkspaceInput
    }
    enableAutomation: { // args
      input?: NexusGenInputs['EnableAutomationInput'] | null; // EnableAutomationInput
    }
    generateAutodeck: { // args
      input?: NexusGenInputs['GenerateAutodeckInput'] | null; // GenerateAutodeckInput
    }
    generateWorkspaceFromCSV: { // args
      input?: NexusGenInputs['GenerateWorkspaceCSVInputType'] | null; // GenerateWorkspaceCSVInputType
    }
    handleUserStateInWorkspace: { // args
      input?: NexusGenInputs['HandleUserStateInWorkspaceInput'] | null; // HandleUserStateInWorkspaceInput
    }
    inviteUser: { // args
      input?: NexusGenInputs['InviteUserInput'] | null; // InviteUserInput
    }
    massSeed: { // args
      input?: NexusGenInputs['MassSeedInput'] | null; // MassSeedInput
    }
    register: { // args
      input?: NexusGenInputs['RegisterInput'] | null; // RegisterInput
    }
    removePixelRange: { // args
      input?: NexusGenInputs['RemovePixelRangeInput'] | null; // RemovePixelRangeInput
    }
    requestInvite: { // args
      input?: NexusGenInputs['RequestInviteInput'] | null; // RequestInviteInput
    }
    resetWorkspaceData: { // args
      workspaceId?: string | null; // String
    }
    retryAutodeckJob: { // args
      jobId?: string | null; // String
    }
    sandbox: { // args
      input?: NexusGenInputs['SandboxInput'] | null; // SandboxInput
    }
    sendAutomationDialogueLink: { // args
      input?: NexusGenInputs['SendAutomationDialogueLinkInput'] | null; // SendAutomationDialogueLinkInput
    }
    sendAutomationReport: { // args
      input?: NexusGenInputs['SendAutomationReportInput'] | null; // SendAutomationReportInput
    }
    setDialoguePrivacy: { // args
      input?: NexusGenInputs['SetDialoguePrivacyInput'] | null; // SetDialoguePrivacyInput
    }
    singleUpload: { // args
      file: NexusGenScalars['Upload']; // Upload!
    }
    updateAutomation: { // args
      input?: NexusGenInputs['CreateAutomationInput'] | null; // CreateAutomationInput
    }
    updateCTA: { // args
      input?: NexusGenInputs['UpdateCTAInputType'] | null; // UpdateCTAInputType
    }
    updateCreateWorkspaceJob: { // args
      errorMessage?: string | null; // String
      id?: string | null; // String
      referenceId?: string | null; // String
      resourceUrl?: string | null; // String
      status?: NexusGenEnums['JobStatusType'] | null; // JobStatusType
    }
    updateDeliveryStatus: { // args
      deliveryId?: string | null; // String
      status?: NexusGenEnums['DeliveryStatusEnum'] | null; // DeliveryStatusEnum
    }
    updatePermissions: { // args
      input?: NexusGenInputs['UpdatePermissionsInput'] | null; // UpdatePermissionsInput
    }
    updateQuestion: { // args
      input?: NexusGenInputs['UpdateQuestionNodeInputType'] | null; // UpdateQuestionNodeInputType
    }
    updateRoles: { // args
      permissions?: NexusGenInputs['PermissionIdsInput'] | null; // PermissionIdsInput
      roleId?: string | null; // String
    }
    uploadJobImage: { // args
      disapproved?: boolean | null; // Boolean
      file?: NexusGenScalars['Upload'] | null; // Upload
      jobId?: string | null; // String
      type?: NexusGenEnums['UploadImageEnumType'] | null; // UploadImageEnumType
    }
    uploadUpsellImage: { // args
      input?: NexusGenInputs['UploadSellImageInputType'] | null; // UploadSellImageInputType
    }
    verifyUserToken: { // args
      token?: string | null; // String
    }
    whitifyImage: { // args
      input?: NexusGenInputs['AdjustedImageInput'] | null; // AdjustedImageInput
    }
  }
  Query: {
    UserOfCustomer: { // args
      input?: NexusGenInputs['UserOfCustomerInput'] | null; // UserOfCustomerInput
    }
    automation: { // args
      where?: NexusGenInputs['GetAutomationInput'] | null; // GetAutomationInput
    }
    automations: { // args
      where?: NexusGenInputs['GetAutomationsByWorkspaceInput'] | null; // GetAutomationsByWorkspaceInput
    }
    customer: { // args
      id?: string | null; // ID
      slug?: string | null; // String
    }
    delivery: { // args
      deliveryId?: string | null; // String
    }
    dialogue: { // args
      where?: NexusGenInputs['DialogueWhereUniqueInput'] | null; // DialogueWhereUniqueInput
    }
    dialogueLinks: { // args
      filter?: NexusGenInputs['DialogueConnectionFilterInput'] | null; // DialogueConnectionFilterInput
      workspaceId?: string | null; // String
    }
    dialogues: { // args
      filter?: NexusGenInputs['DialogueFilterInputType'] | null; // DialogueFilterInputType
    }
    edge: { // args
      id?: string | null; // String
    }
    getAdjustedLogo: { // args
      input?: NexusGenInputs['AdjustedImageInput'] | null; // AdjustedImageInput
    }
    getAutodeckJobs: { // args
      filter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
    }
    getJob: { // args
      id?: string | null; // String
    }
    getPreviewData: { // args
      id?: string | null; // String
    }
    question: { // args
      where?: NexusGenInputs['QuestionWhereUniqueInput'] | null; // QuestionWhereUniqueInput
    }
    role: { // args
      input?: NexusGenInputs['FindRoleInput'] | null; // FindRoleInput
    }
    roleConnection: { // args
      customerId?: string | null; // String
      filter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
    }
    session: { // args
      id?: string | null; // String
    }
    sessions: { // args
      where?: NexusGenInputs['SessionWhereUniqueInput'] | null; // SessionWhereUniqueInput
    }
    tags: { // args
      customerSlug?: string | null; // String
      dialogueId?: string | null; // String
    }
    trigger: { // args
      triggerId?: string | null; // String
    }
    triggerConnection: { // args
      customerSlug?: string | null; // String
      filter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
    }
    triggers: { // args
      customerSlug?: string | null; // String
      dialogueId?: string | null; // String
      filter?: NexusGenInputs['PaginationWhereInput'] | null; // PaginationWhereInput
      userId?: string | null; // String
    }
    user: { // args
      userId?: string | null; // String
    }
    users: { // args
      customerSlug?: string | null; // String
    }
  }
  QuestionNode: {
    indepthQuestionStatisticsSummary: { // args
      input?: NexusGenInputs['QuestionStatisticsSummaryFilterInput'] | null; // QuestionStatisticsSummaryFilterInput
    }
    questionStatisticsSummary: { // args
      input?: NexusGenInputs['QuestionStatisticsSummaryFilterInput'] | null; // QuestionStatisticsSummaryFilterInput
    }
  }
  UserType: {
    assignedDialogues: { // args
      input?: NexusGenInputs['UserOfCustomerInput'] | null; // UserOfCustomerInput
    }
  }
  WorkspaceStatistics: {
    basicStats: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    health: { // args
      input?: NexusGenInputs['HealthScoreInput'] | null; // HealthScoreInput
    }
    mostChangedPath: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    mostPopularPath: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    mostTrendingTopic: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    rankedTopics: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
    workspaceStatisticsSummary: { // args
      input?: NexusGenInputs['DialogueStatisticsSummaryFilterInput'] | null; // DialogueStatisticsSummaryFilterInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  ConnectionInterface: "AutomationConnection" | "DeliveryConnectionType" | "DialogueConnection" | "PublicDialogueConnection" | "SessionConnection" | "UserConnection"
  DeprecatedConnectionInterface: "AutodeckConnectionType" | "RoleConnection" | "TriggerConnectionType"
}

export interface NexusGenTypeInterfaces {
  AutodeckConnectionType: "DeprecatedConnectionInterface"
  AutomationConnection: "ConnectionInterface"
  DeliveryConnectionType: "ConnectionInterface"
  DialogueConnection: "ConnectionInterface"
  PublicDialogueConnection: "ConnectionInterface"
  RoleConnection: "DeprecatedConnectionInterface"
  SessionConnection: "ConnectionInterface"
  TriggerConnectionType: "DeprecatedConnectionInterface"
  UserConnection: "ConnectionInterface"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "ConnectionInterface" | "DeprecatedConnectionInterface";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: APIContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
    useParentResolve?: boolean
    useTimeResolve?: boolean
    useQueryCounter?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}