### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input AddDialogueInput {
  customerSlug: String
  description: String
  dialogueSlug: String
  isSeed: Boolean
  publicTitle: String
  tags: TagsInputObjectType
  title: String
}

type ColourSettings {
  id: ID!
  primary: String!
  primaryAlt: String
  secondary: String
}

type Customer {
  dialogue(where: DialogueWhereUniqueInput): Dialogue
  dialogues(filter: DialogueFilterInputType): [Dialogue!]!
  id: ID!
  name: String!
  settings: CustomerSettings!
  slug: String!
}

input CustomerCreateOptions {
  isSeed: Boolean = false
  logo: String
  primaryColour: String!
  slug: String!
}

input CustomerEditOptions {
  logo: String
  name: String!
  primaryColour: String!
  slug: String!
}

type CustomerSettings {
  colourSettings: ColourSettings!
  fontSettings: FontSettings
  id: ID!
  logoUrl: String
}

input CustomerWhereUniqueInput {
  id: ID!
}

type Dialogue {
  averageScore: Float
  countInteractions: Int
  creationDate: String
  customer: Customer!
  customerId: String!
  description: String!
  edges: [Edge!]!
  id: ID!
  interactionFeedItems: [Session!]
  interactions(filter: FilterInput): InteractionType!
  leafs: [QuestionNode!]!
  publicTitle: String
  questions(where: QuestionNodeWhereInput): [QuestionNode!]!
  rootQuestion: QuestionNode!
  sessions: [Session!]!
  slug: String!
  statistics: DialogueStatistics!
  tags: [TagType!]
  title: String!
  updatedAt: String
}

input DialogueFilterInputType {
  searchTerm: String
}

type DialogueStatistics {
  lineChartData: [lineChartDataType!]
  topNegativePath: [topPathType!]
  topPositivePath: [topPathType!]
}

input DialogueWhereUniqueInput {
  id: ID
  slug: String
}

type Edge {
  childNode: QuestionNode!
  childNodeId: String!
  conditions: [EdgeCondition!]!
  createdAt: String!
  dialogueId: String!
  id: ID!
  parentNode: QuestionNode!
  parentNodeId: String!
  updatedAt: String!
}

input EdgeChildInput {
  childNode: EdgeNodeInput
  conditions: [QuestionConditionInput!]
  id: ID
  parentNode: EdgeNodeInput
}

type EdgeCondition {
  conditionType: String!
  edgeId: String!
  id: Int!
  matchValue: String
  renderMax: Int
  renderMin: Int
}

input EdgeNodeInput {
  id: ID
  title: String
}

input FilterInput {
  endDate: String
  limit: Int
  offset: Int
  orderBy: [SortFilterInputObject!]
  pageIndex: Int
  searchTerm: String
  startDate: String
}

type FontSettings {
  id: ID!
}

type ImageType {
  encoding: String
  filename: String
  mimetype: String
  url: String
}

type InteractionSessionType {
  createdAt: String!
  id: String!
  index: Int!
  nodeEntries: [NodeEntry!]!
  paths: Int!
  score: Float
}

type InteractionType {
  endDate: String
  orderBy: [SortFilterObject!]!
  pageIndex: Int!
  pages: Int!
  pageSize: Int!
  sessions: [InteractionSessionType!]!
  startDate: String
}

input LeafNodeInput {
  id: ID
  title: String
  type: String
}

type lineChartDataType {
  x: String
  y: Int
}

type Mutation {
  assignTags(dialogueId: String, tags: TagsInputObjectType): Dialogue!
  createCustomer(name: String, options: CustomerCreateOptions): Customer!
  createDialogue(data: AddDialogueInput): Dialogue!
  createPermission(data: PermissionInput): PermssionType!
  createRole(data: RoleInput): RoleType!
  createTag(customerSlug: String, name: String, type: TagTypeEnum): TagType!
  createTrigger(customerSlug: String, questionId: String, recipients: RecipientsInputType, trigger: TriggerInputType): TriggerType!
  createUser(customerSlug: String, input: UserInput): UserType!
  deleteCustomer(where: CustomerWhereUniqueInput): Customer!
  deleteDialogue(where: DialogueWhereUniqueInput): Dialogue!
  deleteTag(tagId: String): TagType!
  deleteTrigger(id: String): TriggerType!
  deleteUser(id: String): UserType!
  editCustomer(id: String, options: CustomerEditOptions): Customer!
  editDialogue(description: String, dialogueId: String, publicTitle: String, tags: TagsInputObjectType, title: String): Dialogue!
  editTrigger(questionId: String, recipients: RecipientsInputType, trigger: TriggerInputType, triggerId: String): TriggerType!
  editUser(id: String, input: UserInput): UserType!
  singleUpload(file: Upload): ImageType!
  updateRoles(permissions: PermissionIdsInput, roleId: String): RoleType!
  updateTopicBuilder(customerSlug: String, dialogueSlug: String, topicData: TopicDataEntry): String!
  uploadUserSession(uploadUserSessionInput: UploadUserSessionInput): Session!
}

type NodeEntry {
  creationDate: String!
  depth: Int!
  id: ID
  relatedEdgeId: String
  relatedNode: QuestionNode
  relatedNodeId: String
  sessionId: String!
  values: [NodeEntryValue!]!
}

type NodeEntryValue {
  id: ID!
  multiValues: [NodeEntryValue!]!
  nodeEntryId: String
  numberValue: Int
  parentNodeEntryValueId: Int
  textValue: String
}

input OptionInput {
  id: Int
  publicValue: String
  value: String
}

input PermissionIdsInput {
  ids: [String!]
}

input PermissionInput {
  customerId: String
  description: String
  name: String
}

type PermssionType {
  description: String
  id: ID!
  name: String!
}

type Query {
  customer(id: ID, slug: String): Customer!
  customers: [Customer!]!
  dialogue(where: DialogueWhereUniqueInput): Dialogue!
  dialogues(customerId: ID, filter: DialogueFilterInputType): [Dialogue!]!
  edge(id: String): Edge!
  getSessionAnswerFlow(sessionId: ID): Session!
  interactions(filter: FilterInput, where: SessionWhereUniqueInput): InteractionType!
  lineChartData(dialogueId: String, limit: Int, numberOfDaysBack: Int, offset: Int): [lineChartDataType!]!
  questionNode(where: QuestionNodeWhereUniqueInput): QuestionNode!
  questionNodes: [QuestionNode!]!
  roles(customerSlug: String): [RoleType!]!
  roleTable(customerId: String, filter: FilterInput): RoleTableType!
  session(where: SessionWhereUniqueInput): Session!
  sessions(where: SessionWhereUniqueInput): [Session!]!
  tags(customerSlug: String, dialogueId: String): [TagType!]!
  trigger(triggerId: String): TriggerType!
  triggers(customerSlug: String, dialogueId: String, filter: FilterInput, userId: String): [TriggerType!]!
  triggerTable(customerSlug: String, filter: FilterInput): TriggerTableType!
  user(userId: String): UserType!
  users(customerSlug: String): [UserType!]!
  userTable(customerSlug: String, filter: FilterInput): UserTable!
}

input QuestionConditionInput {
  conditionType: String
  id: Int
  matchValue: String
  renderMax: Int
  renderMin: Int
}

input QuestionInput {
  children: [EdgeChildInput!]
  id: ID
  isLeaf: Boolean
  isRoot: Boolean
  options: [OptionInput!]
  overrideLeaf: LeafNodeInput
  title: String
  type: String
}

type QuestionNode {
  children: [Edge!]!
  creationDate: String
  id: ID!
  isLeaf: Boolean!
  isRoot: Boolean!
  options: [QuestionOption!]!
  overrideLeaf: QuestionNode
  overrideLeafId: String
  questionDialogue: Dialogue
  questionDialogueId: String!
  title: String!
  type: String!
}

input QuestionNodeWhereInput {
  id: ID
  isRoot: Boolean
}

input QuestionNodeWhereUniqueInput {
  id: String!
}

type QuestionOption {
  id: Int!
  publicValue: String
  questionId: String!
  value: String!
}

input RecipientsInputType {
  ids: [String!]
}

input RoleDataInput {
  description: String
  name: String
}

input RoleInput {
  customerId: String
  description: String
  name: String
}

type RoleTableType {
  pageIndex: Int
  permissions: [PermssionType!]!
  roles: [RoleType!]!
  totalPages: Int
}

type RoleType {
  amtPermissions: Int
  customer: Customer!
  id: ID!
  name: String!
  permissions: [PermssionType!]
}

type Session {
  createdAt: String!
  dialogueId: String!
  id: ID!
  nodeEntries: [NodeEntry!]!
  score: Float
}

input SessionWhereUniqueInput {
  dialogueId: ID
  id: ID
}

input SortFilterInputObject {
  desc: Boolean
  id: String
}

type SortFilterObject {
  desc: Boolean!
  id: String!
}

input TagsInputObjectType {
  entries: [String!]
}

type TagType {
  customerId: String!
  id: String!
  name: String!
  type: String!
}

enum TagTypeEnum {
  AGENT
  DEFAULT
  LOCATION
}

input TopicDataEntry {
  id: ID
  questions: [QuestionInput!]
}

type topPathType {
  answer: String!
  quantity: Int!
}

input TriggerConditionInputType {
  id: Int
  maxValue: Int
  minValue: Int
  textValue: String
  type: TriggerConditionTypeEnum
}

type TriggerConditionType {
  id: Int!
  maxValue: Int
  minValue: Int
  textValue: String
  triggerId: String!
  type: TriggerConditionTypeEnum!
}

enum TriggerConditionTypeEnum {
  HIGH_THRESHOLD
  INNER_RANGE
  LOW_THRESHOLD
  OUTER_RANGE
  TEXT_MATCH
}

input TriggerInputType {
  conditions: [TriggerConditionInputType!]
  medium: TriggerMediumEnum
  name: String
  type: TriggerTypeEnum
}

enum TriggerMediumEnum {
  BOTH
  EMAIL
  PHONE
}

type TriggerTableType {
  endDate: String
  orderBy: [SortFilterObject!]!
  pageIndex: Int!
  pageSize: Int!
  startDate: String
  totalPages: Int!
  triggers: [TriggerType!]!
}

type TriggerType {
  conditions: [TriggerConditionType!]!
  id: String!
  medium: TriggerMediumEnum!
  name: String!
  recipients: [UserType!]!
  relatedNode: QuestionNode
  type: TriggerTypeEnum!
}

enum TriggerTypeEnum {
  QUESTION
  SCHEDULED
}

type UniqueDataResultEntry {
  createdAt: String!
  sessionId: String!
  value: Int!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadUserSessionInput {
  dialogueId: String!
  entries: [UserSessionEntryInput!]
}

input UserInput {
  customerId: String
  email: String
  firstName: String
  lastName: String
  password: String
  phone: String
  roleId: String
}

input UserSessionEntryDataInput {
  multiValues: [UserSessionEntryDataInput!]
  numberValue: Int
  textValue: String
}

input UserSessionEntryInput {
  data: UserSessionEntryDataInput
  depth: Int
  edgeId: String
  nodeId: String
}

type UserTable {
  pageIndex: Int
  totalPages: Int
  users: [UserType!]!
}

type UserType {
  email: String!
  firstName: String
  id: ID!
  lastName: String
  phone: String
  role: RoleType!
}
