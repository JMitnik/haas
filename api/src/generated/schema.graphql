### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type ColourSettings {
  id: ID!
  primary: String!
  primaryAlt: String
  secondary: String
}

type Customer {
  dialogues: [Dialogue!]!
  id: ID!
  name: String!
  settings: CustomerSettings!
}

type CustomerSettings {
  colourSettings: ColourSettings!
  fontSettings: FontSettings!
  id: ID!
  logoUrl: String
}

type Dialogue {
  creationDate: String
  customer: Customer!
  customerId: String!
  description: String!
  id: ID!
  leafs: [QuestionNode!]!
  publicTitle: String
  questions(where: QuestionNodeWhereInput): [QuestionNode!]!
  title: String!
  updatedAt: String
}

type DialogueDetailResult {
  average: String!
  creationDate: String!
  customerName: String!
  description: String!
  timelineEntries: [UniqueDataResultEntry!]!
  title: String!
  totalNodeEntries: Int!
  updatedAt: String!
}

input DialogueWhereUniqueInput {
  id: String!
}

type Edge {
  childNodeId: String!
  conditions: [EdgeCondition!]!
  createdAt: String!
  dialogueId: String!
  id: ID!
  parentNodeId: String!
  updatedAt: String!
}

type EdgeCondition {
  conditionType: String!
  edgeId: String!
  id: ID!
  matchValue: String
  renderMax: Int
  renderMin: Int
}

type FontSettings {
  id: ID!
}

type Mutation {
  uploadUserSession(uploadUserSessionInput: UploadUserSessionInput): Session!
}

type NodeEntry {
  creationDate: String!
  depth: Int!
  id: ID!
  relatedEdgeId: String
  relatedNode: QuestionNode!
  relatedNodeId: String!
  sessionId: String!
  values: [NodeEntryValue!]!
}

type NodeEntryValue {
  id: ID!
  multiValues: [NodeEntryValue!]!
  nodeEntryId: String
  numberValue: Int
  parentNodeEntryValueId: Int
  textValue: String
}

type Query {
  customers: [Customer!]!
  dialogue(where: DialogueWhereUniqueInput): Dialogue!
  dialogues(customerId: String): [Dialogue!]!
  getQuestionnaireData(dialogueId: String): DialogueDetailResult!
  getQuestionNode(id: String): QuestionNode!
  getSessionAnswerFlow(sessionId: ID): Session!
  questionNode(where: QuestionNodeWhereUniqueInput): QuestionNode!
  session(where: SessionWhereUniqueInput): Session!
}

type QuestionNode {
  children: [Edge!]!
  id: ID!
  isLeaf: Boolean!
  isRoot: Boolean!
  options: [QuestionOption!]!
  overrideLeaf: QuestionNode
  overrideLeafId: String
  questionDialogueId: String!
  title: String!
  type: String!
}

input QuestionNodeWhereInput {
  isRoot: Boolean
}

input QuestionNodeWhereUniqueInput {
  id: String!
}

type QuestionOption {
  id: ID!
  publicValue: String
  questionId: String!
  value: String!
}

type Session {
  createdAt: String!
  dialogueId: String!
  id: ID!
  nodeEntries: [NodeEntry!]!
}

input SessionWhereUniqueInput {
  id: ID!
}

type UniqueDataResultEntry {
  createdAt: String!
  sessionId: String!
  value: Int!
}

input UploadUserSessionInput {
  entries: [UserSessionEntryInput!]
  questionnaireId: String!
}

input UserSessionEntryDataInput {
  multiValues: [UserSessionEntryDataInput!]
  numberValue: Int
  textValue: String
}

input UserSessionEntryInput {
  data: UserSessionEntryDataInput
  depth: Int
  edgeId: String
  nodeId: String
}
