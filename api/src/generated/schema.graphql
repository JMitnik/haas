### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type ColourSettings {
  id: ID!
  primary: String!
  primaryAlt: String
  secondary: String
}

type Customer {
  dialogues: [Dialogue!]!
  id: ID!
  name: String!
  settings: CustomerSettings!
  slug: String!
}

input CustomerCreateOptions {
  isSeed: Boolean = false
  logo: String
  name: String
  primaryColour: String
  slug: String!
}

type CustomerSettings {
  colourSettings: ColourSettings!
  fontSettings: FontSettings
  id: ID!
  logoUrl: String
}

input CustomerWhereUniqueInput {
  id: ID!
}

type Dialogue {
  averageScore: String
  creationDate: String
  customer: Customer!
  customerId: String!
  description: String!
  id: ID!
  leafs: [QuestionNode!]!
  lineChartData: String
  publicTitle: String
  questions(where: QuestionNodeWhereInput): [QuestionNode!]!
  title: String!
  updatedAt: String
}

type DialogueDetailResult {
  average: String!
  creationDate: String!
  customerName: String!
  description: String!
  lineChartData: [lineChartDataType!]
  timelineEntries: [UniqueDataResultEntry!]!
  title: String!
  topNegativePath: [topPathType!]
  topPositivePath: [topPathType!]
  totalNodeEntries: Int!
  updatedAt: String!
}

input DialogueWhereUniqueInput {
  id: ID!
}

type Edge {
  childNode: QuestionNode!
  childNodeId: String!
  conditions: [EdgeCondition!]!
  createdAt: String!
  dialogueId: String!
  id: ID!
  parentNode: QuestionNode!
  parentNodeId: String!
  updatedAt: String!
}

input EdgeChildInput {
  childNode: EdgeNodeInput
  conditions: [QuestionConditionInput!]
  id: ID
  parentNode: EdgeNodeInput
}

type EdgeCondition {
  conditionType: String!
  edgeId: String!
  id: Int!
  matchValue: String
  renderMax: Int
  renderMin: Int
}

input EdgeNodeInput {
  id: ID
  title: String
}

type FontSettings {
  id: ID!
}

type ImageType {
  encoding: String
  filename: String
  mimetype: String
  url: String
}

input InteractionFilterInput {
  endDate: String
  limit: Int
  offset: Int
  startDate: String
}

type InteractionType {
  createdAt: String!
  index: Int!
  paths: Int!
  score: Float!
  sessionId: String!
}

input LeafNodeInput {
  id: ID
  title: String
  type: String
}

type lineChartDataType {
  x: String!
  y: Int!
}

type Mutation {
  createCustomer(name: String, options: CustomerCreateOptions): Customer!
  createDialogue(customerId: String, description: String, isSeed: Boolean, publicTitle: String, title: String): Dialogue!
  deleteCustomer(where: CustomerWhereUniqueInput): Customer!
  deleteDialogue(where: DialogueWhereUniqueInput): Dialogue!
  editCustomer(id: String, options: CustomerCreateOptions): Customer!
  editDialogue(description: String, dialogueId: String, publicTitle: String, title: String): Dialogue!
  singleUpload(file: Upload): ImageType!
  updateTopicBuilder(id: String, topicData: TopicDataEntry): String!
  uploadUserSession(uploadUserSessionInput: UploadUserSessionInput): Session!
}

type NodeEntry {
  creationDate: String!
  depth: Int!
  id: ID!
  relatedEdgeId: String
  relatedNode: QuestionNode!
  relatedNodeId: String!
  sessionId: String!
  values: [NodeEntryValue!]!
}

type NodeEntryValue {
  id: ID!
  multiValues: [NodeEntryValue!]!
  nodeEntryId: String
  numberValue: Int
  parentNodeEntryValueId: Int
  textValue: String
}

input OptionInput {
  id: Int
  publicValue: String
  value: String
}

type Query {
  customer(id: ID, slug: String): Customer!
  customers: [Customer!]!
  dialogue(where: DialogueWhereUniqueInput): Dialogue!
  dialogues(customerId: ID): [Dialogue!]!
  edge(id: String): Edge!
  getQuestionnaireData(dialogueId: String, filter: Int): DialogueDetailResult!
  getSessionAnswerFlow(sessionId: ID): Session!
  interactions(filter: InteractionFilterInput, where: SessionWhereUniqueInput): [InteractionType!]!
  lineChartData(dialogueId: String, limit: Int, numberOfDaysBack: Int, offset: Int): [lineChartDataType!]!
  questionNode(where: QuestionNodeWhereUniqueInput): QuestionNode!
  questionNodes: [QuestionNode!]!
  session(where: SessionWhereUniqueInput): Session!
  sessions(where: SessionWhereUniqueInput): [Session!]!
}

input QuestionConditionInput {
  conditionType: String
  id: Int
  matchValue: String
  renderMax: Int
  renderMin: Int
}

input QuestionInput {
  children: [EdgeChildInput!]
  id: ID
  isLeaf: Boolean
  isRoot: Boolean
  options: [OptionInput!]
  overrideLeaf: LeafNodeInput
  title: String
  type: String
}

type QuestionNode {
  children: [Edge!]!
  creationDate: String
  id: ID!
  isLeaf: Boolean!
  isRoot: Boolean!
  options: [QuestionOption!]!
  overrideLeaf: QuestionNode
  overrideLeafId: String
  questionDialogueId: String!
  title: String!
  type: String!
}

input QuestionNodeWhereInput {
  id: ID
  isRoot: Boolean
}

input QuestionNodeWhereUniqueInput {
  id: String!
}

type QuestionOption {
  id: Int!
  publicValue: String
  questionId: String!
  value: String!
}

type Session {
  createdAt: String!
  dialogueId: String!
  id: ID!
  nodeEntries: [NodeEntry!]!
}

input SessionWhereUniqueInput {
  dialogueId: ID
  id: ID
}

input TopicDataEntry {
  id: ID
  questions: [QuestionInput!]
}

type topPathType {
  answer: String!
  quantity: Int!
}

type UniqueDataResultEntry {
  createdAt: String!
  sessionId: String!
  value: Int!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadUserSessionInput {
  dialogueId: String!
  entries: [UserSessionEntryInput!]
}

input UserSessionEntryDataInput {
  multiValues: [UserSessionEntryDataInput!]
  numberValue: Int
  textValue: String
}

input UserSessionEntryInput {
  data: UserSessionEntryDataInput
  depth: Int
  edgeId: String
  nodeId: String
}
