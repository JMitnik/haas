### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


"""Append new data to an uploaded session"""
input AppendToInteractionInput {
  data: NodeEntryDataInput
  edgeId: String
  nodeId: String
  sessionId: ID
}

"""Input type for a choice node"""
input ChoiceNodeEntryInput {
  value: String
}

type ColourSettings {
  id: ID!
  primary: String!
  primaryAlt: String
  secondary: String
}

"""Interface all pagination-based models should implement"""
interface ConnectionInterface {
  endDate: String
  limit: Int!
  offset: Int!
  pageInfo: PaginationPageInfo!
  startDate: String
}

input CreateCTAInputType {
  customerSlug: String
  dialogueSlug: String
  form: FormNodeInputType
  links: CTALinksInputType
  share: ShareNodeInputType
  title: String
  type: String
}

input CreateDialogueInputType {
  contentType: String
  customerSlug: String
  description: String
  dialogueSlug: String
  isSeed: Boolean
  publicTitle: String
  tags: TagsInputObjectType
  templateDialogueId: String
  title: String
}

input CreateQuestionNodeInputType {
  customerId: ID
  dialogueSlug: String
  edgeCondition: EdgeConditionInputType
  optionEntries: OptionsInputType
  overrideLeafId: ID
  parentQuestionId: ID
  title: String
  type: String
}

input CreateTriggerInputType {
  customerSlug: String
  recipients: RecipientsInputType
  trigger: TriggerInputType
}

"""Creates a workspace"""
input CreateWorkspaceInput {
  isSeed: Boolean = false
  logo: String
  name: String!
  primaryColour: String!
  slug: String!
  willGenerateFakeData: Boolean = false
}

input CTALinkInputObjectType {
  backgroundColor: String
  iconUrl: String
  id: String
  title: String
  type: LinkTypeEnumType
  url: String
}

input CTALinksInputType {
  linkTypes: [CTALinkInputObjectType!]
}

input CTAShareInputObjectType {
  id: String
  title: String
  tooltip: String
  url: String
}

type Customer {
  dialogue(where: DialogueWhereUniqueInput): Dialogue
  dialogues(filter: DialogueFilterInputType): [Dialogue!]
  id: ID!
  name: String!
  settings: CustomerSettings
  slug: String!
  userCustomer(userId: String): UserCustomer
  users: [UserType!]
  usersConnection(customerSlug: String, filter: PaginationWhereInput): UserConnection
}

type CustomerSettings {
  colourSettings: ColourSettings
  fontSettings: FontSettings
  id: ID!
  logoUrl: String
}

input CustomerWhereUniqueInput {
  id: ID!
}

"""Date custom scalar type"""
scalar Date

type Debug {
  debugResolver: String
}

input DeleteDialogueInputType {
  customerSlug: String
  id: ID
}

"""Delete Node Input type"""
input DeleteNodeInputType {
  customerId: ID
  dialogueSlug: String
  id: String
}

input DeleteUserInput {
  customerId: ID
  userId: ID
}

type DeleteUserOutput {
  deletedUser: Boolean!
}

type Dialogue {
  averageScore(input: DialogueFilterInputType): Float!
  creationDate: String
  customer: Customer
  customerId: String!
  description: String!
  edges: [Edge!]!
  id: ID!
  isWithoutGenData: Boolean!
  leafs(searchTerm: String): [QuestionNode!]!
  publicTitle: String
  questions: [QuestionNode!]!
  rootQuestion: QuestionNode!
  sessionConnection(filter: PaginationWhereInput): SessionConnection
  sessions(take: Int): [Session!]!
  slug: String!
  statistics(input: DialogueFilterInputType): DialogueStatistics
  tags: [Tag!]
  title: String!
  updatedAt: String
  wasGeneratedWithGenData: Boolean!
}

input DialogueFilterInputType {
  endDate: String
  searchTerm: String
  startDate: String
}

type DialogueStatistics {
  history: [lineChartDataType!]
  mostPopularPath: topPathType
  nrInteractions: Int!
  topNegativePath: [topPathType!]
  topPositivePath: [topPathType!]
}

input DialogueWhereUniqueInput {
  id: ID
  slug: String
}

type Edge {
  childNode: QuestionNode
  childNodeId: String!
  conditions: [EdgeCondition!]
  createdAt: String!
  id: ID!
  parentNode: QuestionNode
  parentNodeId: String!
  updatedAt: String!
}

type EdgeCondition {
  conditionType: String!
  edgeId: String
  id: Int!
  matchValue: String
  renderMax: Int
  renderMin: Int
}

input EdgeConditionInputType {
  conditionType: String
  id: Int
  matchValue: String
  renderMax: Int
  renderMin: Int
}

input EditUserInput {
  customerId: String
  email: String!
  firstName: String
  lastName: String
  phone: String
  roleId: String
}

"""Edit a workspace"""
input EditWorkspaceInput {
  id: ID!
  logo: String
  name: String!
  primaryColour: String!
  slug: String!
}

type FontSettings {
  id: ID!
}

"""FormNodeEntryInput"""
input FormNodeEntryFieldInput {
  email: String = ""
  longText: String = ""
  number: Int = 0
  phoneNumber: String = ""
  relatedFieldId: ID
  shortText: String = ""
  url: String = ""
}

"""FormNodeEntryInput"""
input FormNodeEntryInput {
  fields: [FormNodeEntryFieldInput!]
}

input FormNodeFieldInput {
  isRequired: Boolean = false
  label: String
  position: Int
  type: FormNodeFieldTypeEnum
}

"""The types a field can assume"""
enum FormNodeFieldTypeEnum {
  email
  longText
  number
  phoneNumber
  shortText
  url
}

input FormNodeInputType {
  fields: [FormNodeFieldInput!]
  id: String
}

type ImageType {
  encoding: String
  filename: String
  mimetype: String
  url: String
}

input InviteUserInput {
  customerId: String!
  email: String!
  roleId: String!
}

type InviteUserOutput {
  didAlreadyExist: Boolean!
  didInvite: Boolean!
}

type lineChartDataType {
  entryId: String
  x: String
  y: Int
}

type LinkType {
  backgroundColor: String
  iconUrl: String
  id: String!
  questionNode: QuestionNode!
  questionNodeId: String
  title: String
  type: String!
  url: String!
}

enum LinkTypeEnumType {
  API
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  SOCIAL
  TWITTER
  WHATSAPP
}

"""Login credential"""
input LoginInput {
  email: String!
}

"""Information you get after you log out"""
type LoginOutput {
  expiryDate: Int!
  token: String!
  user: UserType!
}

type Mutation {
  appendToInteraction(input: AppendToInteractionInput): Session!
  assignTags(dialogueId: String, tags: TagsInputObjectType): Dialogue!
  copyDialogue(input: CreateDialogueInputType): Dialogue!

  """Create Call to Actions"""
  createCTA(input: CreateCTAInputType): QuestionNode!
  createDialogue(input: CreateDialogueInputType): Dialogue!
  createPermission(data: PermissionInput): PermssionType
  createQuestion(input: CreateQuestionNodeInputType): QuestionNode
  createRole(data: RoleInput): RoleType!
  createSession(input: SessionInput): Session!
  createTag(customerSlug: String, name: String, type: TagTypeEnum): Tag!
  createTrigger(input: CreateTriggerInputType): TriggerType!
  createUser(customerSlug: String, input: UserInput): UserType!
  createWorkspace(input: CreateWorkspaceInput): Customer!
  debugMutation: String
  deleteCTA(input: DeleteNodeInputType): QuestionNode!
  deleteCustomer(where: CustomerWhereUniqueInput): Customer
  deleteDialogue(input: DeleteDialogueInputType): Dialogue!
  deleteQuestion(input: DeleteNodeInputType): QuestionNode!
  deleteTag(tagId: String): Tag!
  deleteTrigger(id: String): TriggerType
  deleteUser(input: DeleteUserInput): DeleteUserOutput!
  editDialogue(customerSlug: String, description: String, dialogueSlug: String, isWithoutGenData: Boolean, publicTitle: String, tags: TagsInputObjectType, title: String): Dialogue!
  editTrigger(recipients: RecipientsInputType, trigger: TriggerInputType, triggerId: String): TriggerType!
  editUser(input: EditUserInput, userId: String): UserType!
  editWorkspace(input: EditWorkspaceInput): Customer!

  """Invite a user to a particular customer domain, given an email and role"""
  inviteUser(input: InviteUserInput): InviteUserOutput!

  """Logs a user out by removing their refresh token"""
  logout: String!
  register(input: RegisterInput): String
  requestInvite(input: RequestInviteInput): RequestInviteOutput!
  singleUpload(file: Upload): ImageType!
  updateCTA(input: UpdateCTAInputType): QuestionNode!
  updateQuestion(input: UpdateQuestionNodeInputType): QuestionNode!
  updateRoles(permissions: PermissionIdsInput, roleId: String): RoleType!

  """
  Given a token, checks in the database whether token has been set and has not expired yet
  """
  verifyUserToken(token: String): VerifyUserTokenOutput!
}

type NodeEntry {
  creationDate: String!
  depth: Int
  id: ID
  relatedEdgeId: String
  relatedNode: QuestionNode
  relatedNodeId: String

  """The core scoring value associated with the node entry."""
  value: NodeEntryValue
}

"""Data type for the actual node entry"""
input NodeEntryDataInput {
  choice: ChoiceNodeEntryInput
  form: FormNodeEntryInput
  register: RegisterNodeEntryInput
  slider: SliderNodeEntryInput
  textbox: TextboxNodeEntryInput
}

"""Input type for node-entry metadata"""
input NodeEntryInput {
  data: NodeEntryDataInput
  depth: Int
  edgeId: String
  nodeId: String
}

type NodeEntryValue {
  choiceNodeEntry: String
  linkNodeEntry: String
  registrationNodeEntry: String
  sliderNodeEntry: Int
  textboxNodeEntry: String
}

input OptionInputType {
  id: Int
  publicValue: String
  value: String
}

input OptionsInputType {
  options: [OptionInputType!]
}

"""Information with regards to current page, and total number of pages"""
type PaginationPageInfo {
  nrPages: Int!
  pageIndex: Int!
}

"""Ways to sort a pagination object"""
enum PaginationSortByEnum {
  createdAt
  email
  firstName
  id
  lastName
  medium
  name
  paths
  role
  score
  type
  user
  when
}

"""Sorting of pagination (type and whether it ascends)"""
input PaginationSortInput {
  by: PaginationSortByEnum!
  desc: Boolean = true
}

input PaginationWhereInput {
  endDate: String
  limit: Int
  offset: Int
  orderBy: [PaginationSortInput!]
  pageIndex: Int
  search: String
  searchTerm: String
  startDate: String
}

input PermissionIdsInput {
  ids: [String!]
}

input PermissionInput {
  customerId: String
  description: String
  name: String
}

type PermssionType {
  customer: Customer
  description: String
  id: ID!
  name: String!
}

type Query {
  customer(id: ID, slug: String): Customer
  customers: [Customer!]!
  dialogue(where: DialogueWhereUniqueInput): Dialogue
  dialogues(filter: DialogueFilterInputType): [Dialogue!]!
  edge(id: String): Edge
  lineChartData(dialogueId: String, limit: Int, numberOfDaysBack: Int, offset: Int): [lineChartDataType!]!
  me: UserType!
  questionNode(where: QuestionNodeWhereUniqueInput): QuestionNode
  questionNodes: [QuestionNode!]!
  refreshAccessToken: RefreshAccessTokenOutput!
  roleConnection(customerId: String, filter: PaginationWhereInput): RoleConnection!
  roles(customerSlug: String): [RoleType!]
  session(where: SessionWhereUniqueInput): Session
  sessions(where: SessionWhereUniqueInput): [Session!]!
  tags(customerSlug: String, dialogueId: String): [Tag!]!
  trigger(triggerId: String): TriggerType
  triggerConnection(customerSlug: String, filter: PaginationWhereInput): TriggerConnectionType
  triggers(customerSlug: String, dialogueId: String, filter: PaginationWhereInput, userId: String): [TriggerType!]!
  user(userId: String): UserType
  UserOfCustomer(input: UserOfCustomerInput): UserCustomer
  users(customerSlug: String): [UserType!]!
}

type QuestionNode {
  children: [Edge!]!
  creationDate: String
  id: ID!
  isLeaf: Boolean!
  isRoot: Boolean!
  links: [LinkType!]!
  options: [QuestionOption!]!
  overrideLeaf: QuestionNode
  overrideLeafId: String
  questionDialogue: Dialogue
  questionDialogueId: String
  share: ShareNodeType
  title: String!
  type: QuestionNodeTypeEnum!
  updatedAt: String
}

"""The different types a node can assume"""
enum QuestionNodeTypeEnum {
  CHOICE
  FORM
  GENERIC
  LINK
  REGISTRATION
  SHARE
  SLIDER
  TEXTBOX
}

input QuestionNodeWhereInputType {
  id: ID
  isRoot: Boolean
}

input QuestionNodeWhereUniqueInput {
  id: String!
}

type QuestionOption {
  id: Int!
  publicValue: String
  questionId: String
  value: String!
}

input RecipientsInputType {
  ids: [String!]
}

type RefreshAccessTokenOutput {
  accessToken: String!
}

"""Registration credentials"""
input RegisterInput {
  customerId: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  roleId: String
}

"""Input type for a register node"""
input RegisterNodeEntryInput {
  value: String
}

input RequestInviteInput {
  email: String!
}

type RequestInviteOutput {
  didInvite: Boolean!
}

type RoleConnection implements ConnectionInterface {
  endDate: String
  limit: Int!
  offset: Int!
  pageInfo: PaginationPageInfo!
  roles: [RoleType!]!
  startDate: String
}

input RoleDataInput {
  description: String
  name: String
}

input RoleInput {
  customerId: String
  description: String
  name: String
  permissions: [SystemPermission!]
}

type RoleType {
  customerId: String
  id: ID!
  name: String!
  nrPermissions: Int
  permissions: [SystemPermission!]
  roleId: String
}

type Session {
  createdAt: String!
  dialogueId: String!
  id: ID!
  nodeEntries: [NodeEntry!]!
  paths: Int!
  score: Float!
}

type SessionConnection implements ConnectionInterface {
  endDate: String
  limit: Int!
  offset: Int!
  pageInfo: PaginationPageInfo!
  sessions: [Session!]!
  startDate: String
}

"""Input for session"""
input SessionInput {
  dialogueId: String!
  entries: [NodeEntryInput!]
}

input SessionWhereUniqueInput {
  dialogueId: ID
  id: ID
}

input ShareNodeInputType {
  id: String
  title: String
  tooltip: String
  url: String
}

type ShareNodeType {
  createdAt: String
  id: String!
  title: String!
  tooltip: String
  updatedAt: String
  url: String!
}

"""Input type for a slider node"""
input SliderNodeEntryInput {
  value: Int
}

"""Details regarding interaction with social node"""
input SocialNodeEntryInput {
  visitedLink: String
}

enum SystemPermission {
  CAN_ACCESS_ADMIN_PANEL
  CAN_ADD_USERS
  CAN_BUILD_DIALOGUE
  CAN_CREATE_TRIGGERS
  CAN_DELETE_DIALOGUE
  CAN_DELETE_TRIGGERS
  CAN_DELETE_USERS
  CAN_DELETE_WORKSPACE
  CAN_EDIT_DIALOGUE
  CAN_EDIT_USERS
  CAN_EDIT_WORKSPACE
  CAN_VIEW_DIALOGUE
  CAN_VIEW_DIALOGUE_ANALYTICS
  CAN_VIEW_USERS
}

type Tag {
  customerId: String!
  id: ID!
  name: String!
  type: TagTypeEnum!
}

input TagsInputObjectType {
  entries: [String!]
}

enum TagTypeEnum {
  AGENT
  DEFAULT
  LOCATION
}

"""Input type for a textbox node"""
input TextboxNodeEntryInput {
  value: String
}

type topPathType {
  answer: String
  basicSentiment: String
  quantity: Int
}

enum TriggerConditionEnum {
  HIGH_THRESHOLD
  INNER_RANGE
  LOW_THRESHOLD
  OUTER_RANGE
  TEXT_MATCH
}

input TriggerConditionInputType {
  id: Int
  maxValue: Int
  minValue: Int
  questionId: String
  textValue: String
  type: TriggerConditionEnum
}

type TriggerConditionType {
  id: Int!
  maxValue: Int
  minValue: Int
  question: QuestionNode
  textValue: String
  triggerId: String!
  type: TriggerConditionEnum!
}

type TriggerConnectionType implements ConnectionInterface {
  endDate: String
  limit: Int!
  offset: Int!
  pageInfo: PaginationPageInfo!
  startDate: String
  triggers: [TriggerType!]!
}

input TriggerInputType {
  conditions: [TriggerConditionInputType!]
  medium: TriggerMediumEnum
  name: String
  type: TriggerTypeEnum
}

enum TriggerMediumEnum {
  BOTH
  EMAIL
  PHONE
}

type TriggerType {
  conditions: [TriggerConditionType!]!
  id: String!
  medium: TriggerMediumEnum!
  name: String!
  recipients: [UserType!]!
  relatedDialogue: Dialogue
  relatedNodeId: String
  type: TriggerTypeEnum!
}

enum TriggerTypeEnum {
  QUESTION
  SCHEDULED
}

input UpdateCTAInputType {
  customerId: ID
  form: FormNodeInputType
  id: String
  links: CTALinksInputType
  share: ShareNodeInputType
  title: String
  type: String
}

input UpdateQuestionNodeInputType {
  customerId: ID
  edgeCondition: EdgeConditionInputType
  edgeId: ID
  id: ID
  optionEntries: OptionsInputType
  overrideLeafId: ID
  title: String
  type: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserConnection {
  pageIndex: Int
  totalPages: Int
  userCustomers: [UserCustomer!]!
}

type UserCustomer {
  customer: Customer!
  role: RoleType!
  user: UserType!
}

input UserInput {
  customerId: String
  email: String!
  firstName: String
  lastName: String
  password: String
  phone: String
  roleId: String
}

input UserOfCustomerInput {
  customerId: String
  customerSlug: String
  userId: String
}

type UserType {
  customers: [Customer!]!
  email: String!
  firstName: String
  globalPermissions: [SystemPermission!]
  id: ID!
  lastName: String
  phone: String
  role: RoleType
  roleId: String
  userCustomers: [UserCustomer!]!
}

type VerifyUserTokenOutput {
  accessToken: String!
  accessTokenExpiry: Int!
  userData: UserType!
}
