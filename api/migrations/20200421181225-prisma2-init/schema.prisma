datasource postgresql {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Dialogue {
  creationDate DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  description  String
  id           String         @default(cuid()) @id
  publicTitle  String?
  title        String
  edges        Edge[]
  questions    QuestionNode[]
}
model QuestionNode {
  id                 String    @default(cuid()) @id
  isLeaf             Boolean   @default(false)
  isRoot             Boolean   @default(false)
  title              String
  type               String
  options            QuestionOption[]
  children                                Edge[]
  overrideLeafId                          String?           @map("overrideLeaf")
  overrideLeaf                            QuestionNode?     @relation("QNodeToOverrideLeaf", fields: [overrideLeafId], references: [id])
  isOverrideLeafOf                        QuestionNode[]    @relation("QNodeToOverrideLeaf")         
  questionDialogue   Dialogue? @relation(fields: [questionDialogueId], references: [id])
  questionDialogueId String?   @map("questionDialogue")

  isChildNodeOf                           Edge[]           @relation("Edge_childNodeToQuestionNode")
  isParentNodeOf                          Edge[]           @relation("Edge_parentNodeToQuestionNode")
  // NodeEntry                               NodeEntry[] //// yea geen idee waar deze voor is maar ik laat em staan
}

model Edge {
  childNodeId                                String              @map("childNode")
  createdAt                                  DateTime            @default(now())
  updatedAt                                  DateTime            @updatedAt
  id                                         String              @default(cuid()) @id
  parentNodeId                               String              @map("parentNode")
  dialogueId                                 String?             @map("dialogue")
  conditions                                 QuestionCondition[]  @relation("EdgeQQonditions")
  isEdgeOf                                   QuestionNode[]       @relation("EdgeChildrenRelation")
  childNode                                  QuestionNode       @relation("Edge_childNodeToQuestionNode", fields: [childNodeId], references: [id])
  parentNode                                 QuestionNode       @relation("Edge_parentNodeToQuestionNode", fields: [parentNodeId], references: [id])
  dialogue                                   Dialogue?           @relation(fields: [dialogueId], references: [id])
  // NodeEntry                                  NodeEntry[] //// yea geen idee waar deze voor is maar ik laat em staan
}

model QuestionCondition {
  conditionType String
  id            Int  @default(autoincrement()) @id
  matchValue    String?
  renderMax     Int?
  renderMin     Int?
  edgeId        String @map("edge")
  edge          Edge    @relation("EdgeQQonditions", fields: [edgeId], references: [id])
}

model QuestionOption {
  id           Int         @default(autoincrement()) @id
  publicValue  String?
  value        String
  questionId   String?         @map("question")
  question     QuestionNode?   @relation("QuestionNodeOptions", fields: [questionId], references: [id])
}