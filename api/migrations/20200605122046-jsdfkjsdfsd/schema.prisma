datasource postgresql {
  provider = "postgresql"
  url = "***"
}

// binaryTargets = ["debian-openssl-1.1.x"]
generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

model ColourSettings {
  dark             String?
  darkest          String?
  error            String?
  id               Int               @default(autoincrement()) @id
  light            String?
  lightest         String?
  muted            String?
  normal           String?
  primary          String
  primaryAlt       String?
  secondary        String?
  success          String?
  tertiary         String?
  text             String?
  warning          String?
  customerSettings CustomerSettings?
}

model FontSettings {
  body             String?
  fontTitle        String?
  id               Int               @default(autoincrement()) @id
  settingTitle     String?
  special          String?
  customerSettings CustomerSettings?
}

model CustomerSettings {
  id               Int             @default(autoincrement()) @id
  logoUrl          String?
  colourSettingsId Int?
  colourSettings   ColourSettings? @relation(fields: [colourSettingsId], references: [id])
  fontSettingsId   Int?
  fontSettings     FontSettings?   @relation(fields: [fontSettingsId], references: [id])
  customerId       String?         @unique
  customer         Customer?       @relation(fields: [customerId], references: [id])
}

model Customer {
  id          String            @default(cuid()) @id
  slug        String            @unique
  name        String
  settings    CustomerSettings?
  dialogues   Dialogue[]
  users       User[]
  roles       Role[]
  permissions Permission[]
}

model Dialogue {
  creationDate DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  description  String
  id           String         @default(cuid()) @id
  customerId   String
  customer     Customer       @relation(fields: [customerId], references: [id])
  publicTitle  String?
  title        String
  edges        Edge[]
  questions    QuestionNode[]
  sessions     Session[]
}

model QuestionNode {
  id                         String           @default(cuid()) @id
  creationDate               DateTime         @default(now())
  updatedAt                  DateTime?        @updatedAt
  isLeaf                     Boolean          @default(false)
  isRoot                     Boolean          @default(false)
  title                      String
  type                       String
  options                    QuestionOption[]
  children                   Edge[]
  overrideLeafId             String?
  overrideLeaf               QuestionNode?    @relation("QNodeToOverrideLeaf", fields: [overrideLeafId], references: [id])
  isOverrideLeafOf           QuestionNode[]   @relation("QNodeToOverrideLeaf")
  questionDialogue           Dialogue?        @relation(fields: [questionDialogueId], references: [id])
  questionDialogueId         String?
  isChildNodeOf              Edge[]           @relation("Edge_childNodeToQuestionNode")
  isParentNodeOf             Edge[]           @relation("Edge_parentNodeToQuestionNode")
  isRelatedNodeOfNodeEntries NodeEntry[]
  edgeId                     String?
  Edge                       Edge?            @relation("EdgeChildrenRelation", fields: [edgeId], references: [id])
  QuestionOption             QuestionOption[] @relation("QuestionNodeOptions")
}

model Edge {
  childNodeId                String
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  id                         String              @default(cuid()) @id
  parentNodeId               String
  dialogueId                 String?
  conditions                 QuestionCondition[]
  isEdgeOf                   QuestionNode[]      @relation("EdgeChildrenRelation")
  childNode                  QuestionNode        @relation("Edge_childNodeToQuestionNode", fields: [childNodeId], references: [id])
  parentNode                 QuestionNode        @relation("Edge_parentNodeToQuestionNode", fields: [parentNodeId], references: [id])
  dialogue                   Dialogue?           @relation(fields: [dialogueId], references: [id])
  isRelatedNodeOfNodeEntries NodeEntry[]
  questionNodeId             String?
  QuestionNode               QuestionNode?       @relation(fields: [questionNodeId], references: [id])
}

model QuestionCondition {
  conditionType String
  id            Int     @default(autoincrement()) @id
  matchValue    String?
  renderMax     Int?
  renderMin     Int?
  edgeId        String?
  Edge          Edge?   @relation(fields: [edgeId], references: [id])
}

model QuestionOption {
  id             Int           @default(autoincrement()) @id
  publicValue    String?
  value          String
  questionId     String?
  question       QuestionNode? @relation("QuestionNodeOptions", fields: [questionId], references: [id])
  questionNodeId String?
  QuestionNode   QuestionNode? @relation(fields: [questionNodeId], references: [id])
}

model Session {
  createdAt   DateTime    @default(now())
  id          String      @default(cuid()) @id
  dialogueId  String
  dialogue    Dialogue    @relation(fields: [dialogueId], references: [id])
  nodeEntries NodeEntry[]
}

model NodeEntry {
  id            String           @default(cuid()) @id
  creationDate  DateTime         @default(now())
  depth         Int?
  relatedEdgeId String?
  relatedNodeId String?
  sessionId     String?
  session       Session?         @relation(fields: [sessionId], references: [id])
  relatedNode   QuestionNode?    @relation(fields: [relatedNodeId], references: [id])
  relatedEdge   Edge?            @relation(fields: [relatedEdgeId], references: [id])
  values        NodeEntryValue[]
}

model NodeEntryValue {
  id                     Int              @default(autoincrement()) @id
  numberValue            Int?
  textValue              String?
  parentNodeEntryValueId Int?
  parentNodeEntryValue   NodeEntryValue?  @relation("NodeEntryValueToNodeEntryValue", fields: [parentNodeEntryValueId], references: [id])
  multiValues            NodeEntryValue[] @relation("NodeEntryValueToNodeEntryValue")
  nodeEntryId            String?
  NodeEntry              NodeEntry?       @relation(fields: [nodeEntryId], references: [id])
}

model Permission {
  id                 String    @default(cuid()) @id
  name               String
  description        String?
  isPermissionOfRole Role[]    @relation(references: [id])
  Customer           Customer? @relation(fields: [customerId], references: [id])
  customerId         String?
}

model Role {
  id          String       @default(cuid()) @id
  name        String
  roleId      String?
  permissions Permission[] @relation(references: [id])
  User        User[]
  Customer    Customer?    @relation(fields: [customerId], references: [id])
  customerId  String?
}

model User {
  id         String    @default(cuid()) @id
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  email      String    @unique
  phone      String?
  firstName  String?
  lastName   String?
  roleId     String
  role       Role      @relation(fields: [roleId], references: [id])
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}
