generator client {
  provider        = "prisma-client-js"
  output          = "./node_modules/@prisma/client"
  previewFeatures = ["orderByRelation"]
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DB_STRING")
}

enum TopicType {
  SYSTEM
  WORKSPACE
}

model Topic {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String    @unique
  type        TopicType @default(SYSTEM)
  workspaceId String?

  subTopics     Topic[]          @relation("topics_to_sub_topics")
  parentTopics  Topic[]          @relation(name: "topics_to_sub_topics")
  workspace     Customer?        @relation(fields: [workspaceId], references: [id])
  usedByOptions QuestionOption[]
  QuestionNode  QuestionNode[]
}

model DialogueTopicCache {
  id              String               @id @default(cuid())
  updatedAt       DateTime             @updatedAt
  startDateTime   DateTime?
  endDateTime     DateTime?
  dialogueId      String?
  name            String
  nrVotes         Int
  impactScore     Float
  impactScoreType DialogueImpactScore
  parentTopicId   String?
  parentTopic     DialogueTopicCache?  @relation("DialogueTopicToDialogueTopic", fields: [parentTopicId], references: [id])
  subTopics       DialogueTopicCache[] @relation("DialogueTopicToDialogueTopic")
}

model PathedSessionsCache {
  id             String    @id @default(cuid())
  updatedAt      DateTime  @updatedAt
  startDateTime  DateTime?
  endDateTime    DateTime?
  path           String[]
  dialogueId     String
  pathedSessions Session[]
}

model QuestionStatisticsSummaryCache {
  id              String              @id @default(cuid())
  updatedAt       DateTime            @updatedAt
  startDateTime   DateTime?
  endDateTime     DateTime?
  nrVotes         Int?
  impactScore     Float
  questionId      String
  impactScoreType QuestionImpactScore
}

model DialogueStatisticsSummaryCache {
  id              String              @id @default(cuid())
  updatedAt       DateTime            @updatedAt
  startDateTime   DateTime?
  endDateTime     DateTime?
  impactScore     Float
  dialogueId      String
  impactScoreType DialogueImpactScore
  nrVotes         Int?
  dialogue        Dialogue            @relation(fields: [dialogueId], references: [id], onDelete: Cascade)

  @@unique([startDateTime, endDateTime, dialogueId, impactScoreType], name: "filterId", map: "filterId")
}

model ColourSettings {
  dark             String?
  darkest          String?
  error            String?
  id               Int               @id @default(autoincrement())
  light            String?
  lightest         String?
  muted            String?
  normal           String?
  primary          String
  primaryAlt       String?
  secondary        String?
  success          String?
  tertiary         String?
  text             String?
  warning          String?
  customerSettings CustomerSettings?
}

model FontSettings {
  body             String?
  fontTitle        String?
  id               Int               @id @default(autoincrement())
  settingTitle     String?
  special          String?
  customerSettings CustomerSettings?
}

model CustomerSettings {
  id               Int             @id @default(autoincrement())
  logoUrl          String?
  logoOpacity      Int?            @default(30)
  colourSettingsId Int?            @unique(map: "CustomerSettings.colourSettingsId_unique")
  fontSettingsId   Int?            @unique(map: "CustomerSettings.fontSettingsId_unique")
  customerId       String?         @unique(map: "CustomerSettings.customerId_unique")
  colourSettings   ColourSettings? @relation(fields: [colourSettingsId], references: [id])
  customer         Customer?       @relation(fields: [customerId], references: [id])
  fontSettings     FontSettings?   @relation(fields: [fontSettingsId], references: [id])
}

model Customer {
  id              String            @id @default(cuid())
  slug            String            @unique(map: "Customer.slug_unique")
  name            String
  isDemo          Boolean           @default(false)
  automations     Automation[]
  campaigns       Campaign[]
  CampaignVariant CampaignVariant[]
  settings        CustomerSettings?
  dialogues       Dialogue[]
  permissions     Permission[]
  roles           Role[]
  tags            Tag[]
  triggers        Trigger[]
  users           UserOfCustomer[]
  topics          Topic[]
}

model Tag {
  id         String     @id @default(cuid())
  type       TagEnum    @default(DEFAULT)
  name       String
  customerId String
  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  isTagOf    Dialogue[]
}

model PostLeafNode {
  id       String    @id @default(cuid())
  header   String
  subtext  String
  dialogue Dialogue?
}

model Dialogue {
  id                          String                           @id @default(cuid())
  title                       String
  slug                        String
  isPrivate                   Boolean                          @default(false)
  description                 String
  creationDate                DateTime                         @default(now())
  updatedAt                   DateTime?                        @updatedAt
  publicTitle                 String?
  customerId                  String
  postLeafNodeId              String?                          @unique(map: "Dialogue.postLeafNodeId_unique")
  language                    LanguageEnum                     @default(ENGLISH)
  isOnline                    Boolean                          @default(false)
  isWithoutGenData            Boolean                          @default(false)
  endScreenText               String?
  wasGeneratedWithGenData     Boolean                          @default(false)
  template                    DialogueTemplateType?            @default(DEFAULT)
  customer                    Customer                         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  postLeafNode                PostLeafNode?                    @relation(fields: [postLeafNodeId], references: [id])
  automationConditions        AutomationCondition[]
  automationEvents            AutomationEvent[]
  CampaignVariant             CampaignVariant[]
  dialogueStatisticsSummaries DialogueStatisticsSummaryCache[]
  edges                       Edge[]
  questions                   QuestionNode[]
  assignees                   User[]
  sessions                    Session[]
  tags                        Tag[]

  @@unique([slug, customerId], map: "Dialogue.slug_customerId_unique")
}

model FormNodeField {
  id                     String                   @id @default(cuid())
  label                  String
  placeholder            String?
  type                   FormNodeFieldType        @default(shortText)
  isRequired             Boolean                  @default(false)
  position               Int
  formNodeId             String?
  FormNode               FormNode?                @relation(fields: [formNodeId], references: [id])
  FormNodeFieldEntryData FormNodeFieldEntryData[]
}

model FormNode {
  id           String          @id @default(cuid())
  helperText   String?
  createdAt    DateTime        @default(now())
  fields       FormNodeField[]
  QuestionNode QuestionNode[]
}

model FormNodeFieldEntryData {
  id              Int            @id @default(autoincrement())
  email           String?
  phoneNumber     String?
  url             String?
  shortText       String?
  longText        String?
  number          Int?
  relatedFieldId  String
  formNodeEntryId Int?
  FormNodeEntry   FormNodeEntry? @relation(fields: [formNodeEntryId], references: [id])
  relatedField    FormNodeField  @relation(fields: [relatedFieldId], references: [id], onDelete: Cascade)
}

model FormNodeEntry {
  id          Int                      @id @default(autoincrement())
  nodeEntryId String                   @unique(map: "FormNodeEntry.nodeEntryId_unique")
  nodeEntry   NodeEntry                @relation(fields: [nodeEntryId], references: [id], onDelete: Cascade)
  values      FormNodeFieldEntryData[]
}

model SliderNodeRange {
  id               String             @id @default(cuid())
  start            Float?
  end              Float?
  SliderNodeMarker SliderNodeMarker[]
}

model SliderNodeMarker {
  id                String          @id @default(cuid())
  label             String
  subLabel          String
  sliderNodeId      String
  sliderNodeRangeId String
  sliderNode        SliderNode      @relation(fields: [sliderNodeId], references: [id], onDelete: Cascade)
  range             SliderNodeRange @relation(fields: [sliderNodeRangeId], references: [id], onDelete: Cascade)
}

model SliderNode {
  id               String             @id @default(cuid())
  unhappyText      String?
  happyText        String?
  earlyReleaseText String?
  QuestionNode     QuestionNode[]
  markers          SliderNodeMarker[]
}

model VideoEmbeddedNode {
  id           String         @id @default(cuid())
  videoUrl     String?
  QuestionNode QuestionNode[]
}

model QuestionNode {
  id                  String   @id @default(cuid())
  creationDate        DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isLeaf              Boolean  @default(false)
  isRoot              Boolean  @default(false)
  title               String
  type                NodeType @default(GENERIC)
  overrideLeafId      String?
  questionDialogueId  String?
  edgeId              String?
  videoEmbeddedNodeId String?
  sliderNodeId        String?
  formNodeId          String?
  topicId             String?

  topic                      Topic?                @relation(fields: [topicId], references: [id])
  Edge                       Edge?                 @relation("EdgeChildrenRelation", fields: [edgeId], references: [id])
  form                       FormNode?             @relation(fields: [formNodeId], references: [id])
  overrideLeaf               QuestionNode?         @relation("QNodeToOverrideLeaf", fields: [overrideLeafId], references: [id])
  questionDialogue           Dialogue?             @relation(fields: [questionDialogueId], references: [id])
  sliderNode                 SliderNode?           @relation(fields: [sliderNodeId], references: [id])
  videoEmbeddedNode          VideoEmbeddedNode?    @relation(fields: [videoEmbeddedNodeId], references: [id])
  automationConditions       AutomationCondition[]
  automationEvents           AutomationEvent[]
  isChildNodeOf              Edge[]                @relation("Edge_childNodeToQuestionNode")
  isParentNodeOf             Edge[]                @relation("Edge_parentNodeToQuestionNode")
  children                   Edge[]
  links                      Link[]
  isRelatedNodeOfNodeEntries NodeEntry[]
  isOverrideLeafOf           QuestionNode[]        @relation("QNodeToOverrideLeaf")
  QuestionOfTrigger          QuestionOfTrigger[]
  overridesChoices           QuestionOption[]      @relation("ChoiceCTANode")
  QuestionOption             QuestionOption[]      @relation("QuestionNodeOptions")
  options                    QuestionOption[]
  share                      Share?
  triggers                   Trigger[]
}

model Share {
  id             String        @id @default(cuid())
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  url            String
  title          String
  tooltip        String?
  questionNodeId String?       @unique(map: "Share.questionNodeId_unique")
  questionNode   QuestionNode? @relation(fields: [questionNodeId], references: [id])
}

model Link {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt
  title           String?
  type            LinkTypeEnum
  url             String
  iconUrl         String?
  backgroundColor String?
  questionNodeId  String?
  buttonText      String?
  header          String?
  imageUrl        String?
  subHeader       String?
  questionNode    QuestionNode? @relation(fields: [questionNodeId], references: [id])
}

model Edge {
  childNodeId                String
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  id                         String              @id @default(cuid())
  parentNodeId               String
  dialogueId                 String?
  questionNodeId             String?
  childNode                  QuestionNode        @relation("Edge_childNodeToQuestionNode", fields: [childNodeId], references: [id], onDelete: Cascade)
  dialogue                   Dialogue?           @relation(fields: [dialogueId], references: [id])
  parentNode                 QuestionNode        @relation("Edge_parentNodeToQuestionNode", fields: [parentNodeId], references: [id], onDelete: Cascade)
  QuestionNode               QuestionNode?       @relation(fields: [questionNodeId], references: [id])
  isRelatedNodeOfNodeEntries NodeEntry[]
  conditions                 QuestionCondition[]
  isEdgeOf                   QuestionNode[]      @relation("EdgeChildrenRelation")
}

model QuestionCondition {
  conditionType String
  id            Int     @id @default(autoincrement())
  matchValue    String?
  renderMax     Int?
  renderMin     Int?
  edgeId        String?
  Edge          Edge?   @relation(fields: [edgeId], references: [id])
}

model QuestionOption {
  id             Int     @id @default(autoincrement())
  publicValue    String?
  value          String
  overrideLeafId String?
  questionId     String?
  questionNodeId String?
  position       Int?
  isTopic        Boolean @default(true)
  topicId        String?

  topic        Topic?        @relation(fields: [topicId], references: [id])
  overrideLeaf QuestionNode? @relation("ChoiceCTANode", fields: [overrideLeafId], references: [id])
  question     QuestionNode? @relation("QuestionNodeOptions", fields: [questionId], references: [id])
  QuestionNode QuestionNode? @relation(fields: [questionNodeId], references: [id])
}

model Session {
  createdAt                DateTime              @default(now())
  id                       String                @id @default(cuid())
  dialogueId               String
  deliveryId               String?
  originUrl                String?
  totalTimeInSec           Int?
  device                   String?
  browser                  String?
  mainScore                Float                 @default(0)
  delivery                 Delivery?             @relation(fields: [deliveryId], references: [id])
  dialogue                 Dialogue              @relation(fields: [dialogueId], references: [id], onDelete: Cascade)
  nodeEntries              NodeEntry[]
  isInPathedSessionsCaches PathedSessionsCache[]
}

model NodeEntry {
  id                    String                 @id @default(cuid())
  creationDate          DateTime               @default(now())
  depth                 Int?
  relatedEdgeId         String?
  relatedNodeId         String?
  sessionId             String?
  inputSource           InputSource            @default(CLIENT)
  relatedEdge           Edge?                  @relation(fields: [relatedEdgeId], references: [id])
  relatedNode           QuestionNode?          @relation(fields: [relatedNodeId], references: [id])
  session               Session?               @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  choiceNodeEntry       ChoiceNodeEntry?
  formNodeEntry         FormNodeEntry?
  linkNodeEntry         LinkNodeEntry?
  registrationNodeEntry RegistrationNodeEntry?
  sliderNodeEntry       SliderNodeEntry?
  textboxNodeEntry      TextboxNodeEntry?
  videoNodeEntry        VideoNodeEntry?
}

model VideoNodeEntry {
  id          Int       @id @default(autoincrement())
  value       String?
  nodeEntryId String    @unique(map: "VideoNodeEntry.nodeEntryId_unique")
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id], onDelete: Cascade)
}

model LinkNodeEntry {
  id          Int       @id @default(autoincrement())
  value       Json?
  nodeEntryId String    @unique(map: "LinkNodeEntry.nodeEntryId_unique")
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id], onDelete: Cascade)
}

model SliderNodeEntry {
  id          Int       @id @default(autoincrement())
  value       Int?
  nodeEntryId String    @unique(map: "SliderNodeEntry.nodeEntryId_unique")
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id], onDelete: Cascade)
}

model ChoiceNodeEntry {
  id          Int       @id @default(autoincrement())
  value       String?
  nodeEntryId String    @unique(map: "ChoiceNodeEntry.nodeEntryId_unique")
  createdAt   DateTime  @default(now())
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id], onDelete: Cascade)
}

model TextboxNodeEntry {
  id          Int       @id @default(autoincrement())
  value       String?
  nodeEntryId String    @unique(map: "TextboxNodeEntry.nodeEntryId_unique")
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id], onDelete: Cascade)
}

model RegistrationNodeEntry {
  id          Int       @id @default(autoincrement())
  value       Json?
  nodeEntryId String    @unique(map: "RegistrationNodeEntry.nodeEntryId_unique")
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id], onDelete: Cascade)
}

model Permission {
  id          String    @id @default(cuid())
  name        String
  description String?
  customerId  String?
  Customer    Customer? @relation(fields: [customerId], references: [id])
}

model Role {
  id          String                 @id @default(cuid())
  name        String
  type        RoleTypeEnum           @default(USER)
  isPrivate   Boolean                @default(false)
  permissions SystemPermissionEnum[]
  customerId  String?
  Customer    Customer?              @relation(fields: [customerId], references: [id])
  users       UserOfCustomer[]

  @@unique([id, name], map: "Role.id_name_unique")
}

model User {
  id                String                 @id @default(cuid())
  createdAt         DateTime               @default(now())
  updatedAt         DateTime?              @updatedAt
  email             String                 @unique(map: "User.email_unique")
  password          String?
  phone             String?
  firstName         String?
  lastName          String?
  globalPermissions SystemPermissionEnum[]

  loginToken         String?
  loginTokenExpiry   DateTime?
  lastLoggedIn       DateTime?
  refreshToken       String?
  refreshTokenExpiry DateTime?
  lastActivity       DateTime?
  customers          UserOfCustomer[]
  triggers           Trigger[]

  isAssignedTo Dialogue[]
}

model UserOfCustomer {
  userId     String
  customerId String
  roleId     String
  createdAt  DateTime @default(now())
  isActive   Boolean  @default(true)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Restrict)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, customerId])
}

model TriggerCondition {
  id                Int                  @id @default(autoincrement())
  createdAt         DateTime?            @default(now())
  type              TriggerConditionEnum @default(LOW_THRESHOLD)
  minValue          Int?
  maxValue          Int?
  textValue         String?
  triggerId         String
  trigger           Trigger              @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  QuestionOfTrigger QuestionOfTrigger[]
}

model Trigger {
  id                String              @id @default(cuid())
  lastSent          DateTime?
  name              String
  type              TriggerEnum         @default(QUESTION)
  medium            TriggerMedium
  relatedNodeId     String?
  customerId        String?
  customer          Customer?           @relation(fields: [customerId], references: [id])
  relatedNode       QuestionNode?       @relation(fields: [relatedNodeId], references: [id])
  QuestionOfTrigger QuestionOfTrigger[]
  conditions        TriggerCondition[]
  recipients        User[]
}

model QuestionOfTrigger {
  questionId         String
  triggerId          String
  triggerConditionId Int
  createdAt          DateTime         @default(now())
  question           QuestionNode     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  triggerCondition   TriggerCondition @relation(fields: [triggerConditionId], references: [id], onDelete: Cascade)
  trigger            Trigger          @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@id([questionId, triggerId])
}

model Job {
  id                   String              @id @default(cuid())
  createdAt            DateTime?           @default(now())
  updatedAt            DateTime?           @updatedAt
  type                 JobType
  createWorkspaceJobId String?             @unique(map: "Job.createWorkspaceJobId_unique")
  createWorkspaceJob   CreateWorkspaceJob? @relation(fields: [createWorkspaceJobId], references: [id])
}

model JobProcessLocation {
  id                 String                 @id @default(cuid())
  name               String
  path               String
  xMaterialDimension Int                    @default(0)
  yMaterialDimension Int                    @default(0)
  type               JobProcessLocationType
  job                CreateWorkspaceJob[]
  fields             CustomField[]
}

model CustomField {
  id                   String             @id @default(cuid())
  key                  String
  value                String
  jobProcessLocationId String
  jobProcessLocation   JobProcessLocation @relation(fields: [jobProcessLocationId], references: [id], onDelete: Cascade)
}

model CreateWorkspaceJob {
  id                      String             @id @default(cuid())
  createdAt               DateTime?          @default(now())
  updatedAt               DateTime?          @updatedAt
  name                    String?
  referenceId             String?
  message                 String?
  errorMessage            String?
  referenceType           CloudReferenceType
  status                  JobStatusType      @default(PENDING)
  resourcesUrl            String?
  requiresRembg           Boolean            @default(true)
  requiresScreenshot      Boolean            @default(true)
  requiresColorExtraction Boolean            @default(true)
  jobProcessLocationId    String
  processLocation         JobProcessLocation @relation(fields: [jobProcessLocationId], references: [id], onDelete: Cascade)
  Job                     Job?
}

model Campaign {
  id            String                      @id @default(cuid())
  label         String
  workspaceId   String
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  workspace     Customer                    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  variantsEdges CampaignVariantToCampaign[]
  deliveries    Delivery[]
}

model CampaignVariantToCampaign {
  campaignId        String
  campaignVariantId String
  weight            Int
  campaign          Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignVariant   CampaignVariant @relation(fields: [campaignVariantId], references: [id], onDelete: Cascade)

  @@id([campaignId, campaignVariantId])
}

model CampaignVariantCustomVariable {
  id                String          @id @default(cuid())
  campaignVariantId String
  key               String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  campaignVariant   CampaignVariant @relation(fields: [campaignVariantId], references: [id], onDelete: Cascade)
}

model CampaignVariant {
  id                        String                          @id @default(cuid())
  label                     String
  body                      String
  from                      String?
  subject                   String?
  type                      CampaignVariantTypeEnum
  customerId                String
  dialogueId                String
  workspace                 Customer                        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  dialogue                  Dialogue                        @relation(fields: [dialogueId], references: [id], onDelete: Cascade)
  customVariables           CampaignVariantCustomVariable[]
  CampaignVariantToCampaign CampaignVariantToCampaign[]
  Delivery                  Delivery[]
}

model Delivery {
  id                         String                 @id
  deliveryRecipientFirstName String?
  deliveryRecipientLastName  String?
  deliveryRecipientEmail     String?
  deliveryRecipientPhone     String?
  deliveryRecipientPrefix    String?
  campaignId                 String
  campaignVariantId          String
  currentStatus              DeliveryStatusTypeEnum
  scheduledAt                DateTime
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime?              @updatedAt
  customVariables            Json?
  campaign                   Campaign               @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignVariant            CampaignVariant        @relation(fields: [campaignVariantId], references: [id], onDelete: Cascade)
  events                     DeliveryEvents[]
  Session                    Session[]
}

model DeliveryEvents {
  id             String                 @id @default(cuid())
  status         DeliveryStatusTypeEnum
  createdAt      DateTime               @default(now())
  deliveryId     String?
  failureMessage String?
  Delivery       Delivery?              @relation(fields: [deliveryId], references: [id])
}

model AutomationEvent {
  id                String               @id @default(cuid())
  createdAt         DateTime             @default(now())
  updatedAt         DateTime?            @updatedAt
  type              AutomationEventType
  questionId        String?
  dialogueId        String?
  periodType        RecurringPeriodType?
  startDate         DateTime?
  endDate           DateTime?
  dialogue          Dialogue?            @relation(fields: [dialogueId], references: [id])
  question          QuestionNode?        @relation(fields: [questionId], references: [id])
  automationTrigger AutomationTrigger[]
}

model AutomationConditionOperand {
  id                    String              @id @default(cuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?           @updatedAt
  type                  OperandType
  numberValue           Int?
  textValue             String?
  dateTimeValue         DateTime?
  automationConditionId String
  automationCondition   AutomationCondition @relation(fields: [automationConditionId], references: [id], onDelete: Cascade)
}

model ConditionPropertyAggregate {
  id                        String                         @id @default(cuid())
  createdAt                 DateTime                       @default(now())
  updatedAt                 DateTime?                      @updatedAt
  startDate                 DateTime?
  endDate                   DateTime?
  latest                    Int?
  type                      ConditionPropertyAggregateType
  dialogueConditionScopeId  String?                        @unique(map: "ConditionPropertyAggregate.dialogueConditionScopeId_unique")
  questionConditionScopeId  String?                        @unique(map: "ConditionPropertyAggregate.questionConditionScopeId_unique")
  workspaceConditionScopeId String?                        @unique(map: "ConditionPropertyAggregate.workspaceConditionScopeId_unique")
  dialogueConditionScope    DialogueConditionScope?        @relation(fields: [dialogueConditionScopeId], references: [id])
  questionConditionScope    QuestionConditionScope?        @relation(fields: [questionConditionScopeId], references: [id])
  workspaceConditionScope   WorkspaceConditionScope?       @relation(fields: [workspaceConditionScopeId], references: [id])
}

model QuestionConditionScope {
  id                    String                      @id @default(cuid())
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime?                   @updatedAt
  aspect                QuestionAspect
  automationConditionId String                      @unique(map: "QuestionConditionScope.automationConditionId_unique")
  automationCondition   AutomationCondition         @relation(fields: [automationConditionId], references: [id], onDelete: Cascade)
  aggregate             ConditionPropertyAggregate?
}

model DialogueConditionScope {
  id                    String                      @id @default(cuid())
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime?                   @updatedAt
  aspect                DialogueAspect
  automationConditionId String                      @unique(map: "DialogueConditionScope.automationConditionId_unique")
  automationCondition   AutomationCondition         @relation(fields: [automationConditionId], references: [id], onDelete: Cascade)
  aggregate             ConditionPropertyAggregate?
}

model WorkspaceConditionScope {
  id                    String                      @id @default(cuid())
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime?                   @updatedAt
  aspect                WorkspaceAspect
  automationConditionId String                      @unique(map: "WorkspaceConditionScope.automationConditionId_unique")
  automationCondition   AutomationCondition         @relation(fields: [automationConditionId], references: [id], onDelete: Cascade)
  aggregate             ConditionPropertyAggregate?
}

model AutomationConditionBuilder {
  id                      String                         @id @default(cuid())
  type                    AutomationConditionBuilderType
  childConditionBuilderId String?                        @unique(map: "AutomationConditionBuilder.childConditionBuilderId_unique")
  childConditionBuilder   AutomationConditionBuilder?    @relation("AutomationConditionBuilderToAutomationConditionBuilder", fields: [childConditionBuilderId], references: [id])
  conditions              AutomationCondition[]
  parentConditionBuilder  AutomationConditionBuilder?    @relation("AutomationConditionBuilderToAutomationConditionBuilder")
  automationTrigger       AutomationTrigger?
}

model AutomationCondition {
  id                           String                          @id @default(cuid())
  createdAt                    DateTime                        @default(now())
  updatedAt                    DateTime?                       @updatedAt
  scope                        AutomationConditionScopeType
  operator                     AutomationConditionOperatorType
  questionId                   String?
  dialogueId                   String?
  automationConditionBuilderId String
  automationConditionBuilder   AutomationConditionBuilder      @relation(fields: [automationConditionBuilderId], references: [id], onDelete: Cascade)
  dialogue                     Dialogue?                       @relation(fields: [dialogueId], references: [id])
  question                     QuestionNode?                   @relation(fields: [questionId], references: [id])
  operands                     AutomationConditionOperand[]
  dialogueScope                DialogueConditionScope?
  questionScope                QuestionConditionScope?
  workspaceScope               WorkspaceConditionScope?
}

model AutomationAction {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  type               AutomationActionType
  apiKey             String?
  endpoint           String?
  payload            Json?
  automationTriggers AutomationTrigger[]
}

model AutomationTrigger {
  id                           String                     @id @default(cuid())
  createdAt                    DateTime                   @default(now())
  updatedAt                    DateTime?                  @updatedAt
  eventId                      String
  automationConditionBuilderId String                     @unique(map: "AutomationTrigger.automationConditionBuilderId_unique")
  conditionBuilder             AutomationConditionBuilder @relation(fields: [automationConditionBuilderId], references: [id], onDelete: Cascade)
  event                        AutomationEvent            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  automations                  Automation[]
  actions                      AutomationAction[]
}

model Automation {
  id                  String             @id @default(cuid())
  createdAt           DateTime           @default(now())
  updatedAt           DateTime?          @updatedAt
  isActive            Boolean            @default(false)
  label               String
  description         String?
  type                AutomationType
  automationTriggerId String?
  workspaceId         String
  automationTrigger   AutomationTrigger? @relation(fields: [automationTriggerId], references: [id], onDelete: SetNull)
  workspace           Customer           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum DialogueTemplateType {
  STUDENT_ENG
  TEACHER_ENG
  SPORT_ENG
  SPORT_NL
  BUSINESS_ENG
  BUSINESS_NL
  DEFAULT
  MASS_SEED
  TEST
}

enum QuestionImpactScore {
  PERCENTAGE
}

enum DialogueImpactScore {
  AVERAGE
}

enum TagEnum {
  DEFAULT
  AGENT
  LOCATION
}

enum LanguageEnum {
  DUTCH
  GERMAN
  ENGLISH
}

enum NodeType {
  GENERIC
  SLIDER
  FORM
  CHOICE
  REGISTRATION
  TEXTBOX
  LINK
  SHARE
  VIDEO_EMBEDDED
}

enum FormNodeFieldType {
  email
  phoneNumber
  url
  shortText
  longText
  number
}

enum LinkTypeEnum {
  SOCIAL
  API
  FACEBOOK
  LINKEDIN
  WHATSAPP
  INSTAGRAM
  TWITTER
  SINGLE
}

enum InputSource {
  CLIENT
  INIT_GENERATED
}

enum SystemPermissionEnum {
  CAN_RESET_WORKSPACE_DATA
  CAN_ACCESS_ADMIN_PANEL
  CAN_GENERATE_WORKSPACE_FROM_CSV
  CAN_ASSIGN_USERS_TO_DIALOGUE
  CAN_EDIT_DIALOGUE
  CAN_BUILD_DIALOGUE
  CAN_VIEW_DIALOGUE
  CAN_DELETE_DIALOGUE
  CAN_VIEW_DIALOGUE_ANALYTICS
  CAN_VIEW_USERS
  CAN_ADD_USERS
  CAN_DELETE_USERS
  CAN_EDIT_USERS
  CAN_CREATE_TRIGGERS
  CAN_DELETE_TRIGGERS
  CAN_DELETE_WORKSPACE
  CAN_EDIT_WORKSPACE
  CAN_VIEW_CAMPAIGNS
  CAN_CREATE_CAMPAIGNS
  CAN_CREATE_DELIVERIES
  CAN_CREATE_AUTOMATIONS
  CAN_UPDATE_AUTOMATIONS
  CAN_VIEW_AUTOMATIONS
  CAN_ACCESS_REPORT_PAGE
  CAN_DOWNLOAD_REPORTS
}

enum RoleTypeEnum {
  ADMIN
  MANAGER
  USER
  GUEST
  CUSTOM
  BOT
}

enum TriggerEnum {
  QUESTION
  SCHEDULED
}

enum TriggerMedium {
  EMAIL
  PHONE
  BOTH
}

enum TriggerConditionEnum {
  LOW_THRESHOLD
  HIGH_THRESHOLD
  INNER_RANGE
  OUTER_RANGE
  TEXT_MATCH
}

enum JobType {
  CREATE_WORKSPACE_JOB
}

enum CloudReferenceType {
  AWS
  GCP
  Azure
  IBM
}

enum JobStatusType {
  PRE_PROCESSING
  PRE_PROCESSING_LOGO
  PRE_PROCESSING_WEBSITE_SCREENSHOT
  READY_FOR_PROCESSING
  IN_PHOTOSHOP_QUEUE
  PHOTOSHOP_PROCESSING
  PROCESSING
  WRAPPING_UP
  PENDING
  COMPLETED
  FAILED
  TRANSFORMING_PSDS_TO_PNGS
  STITCHING_SLIDES
  COMPRESSING_SALES_MATERIAL
}

enum JobProcessLocationType {
  ONE_PAGER
  PITCHDECK
  BROCHURE
}

enum CampaignVariantTypeEnum {
  EMAIL
  SMS
  QUEUE
}

enum DeliveryStatusTypeEnum {
  SCHEDULED
  DEPLOYED
  SENT
  OPENED
  FINISHED
  FAILED
  DELIVERED
}

enum AutomationType {
  TRIGGER
  CAMPAIGN
}

enum AutomationEventType {
  RECURRING
  NEW_INTERACTION_QUESTION
  NEW_INTERACTION_DIALOGUE
  API_CALL
}

enum RecurringPeriodType {
  EVERY_WEEK
  EVERY_DAY
  START_OF_DAY
  END_OF_DAY
  START_OF_WEEK
  END_OF_WEEK
}

enum AutomationConditionScopeType {
  QUESTION
  DIALOGUE
  WORKSPACE
}

enum AutomationConditionOperatorType {
  SMALLER_THAN
  SMALLER_OR_EQUAL_THAN
  GREATER_THAN
  GREATER_OR_EQUAL_THAN
  INNER_RANGE
  OUTER_RANGE
  IS_EQUAL
  IS_NOT_EQUAL
  IS_TRUE
  IS_FALSE
  EVERY_N_TH_TIME
}

enum OperandType {
  STRING
  INT
  DATE_TIME
}

enum QuestionAspect {
  NODE_VALUE
  ANSWER_SPEED
}

enum DialogueAspect {
  NR_INTERACTIONS
  NR_VISITORS
  GENERAL_SCORE
  LATEST_SCORE
}

enum WorkspaceAspect {
  NR_INTERACTIONS
  NR_VISITORS
  GENERAL_SCORE
}

enum ConditionPropertyAggregateType {
  COUNT
  MIN
  MAX
  AVG
}

enum AutomationActionType {
  SEND_SMS
  SEND_EMAIL
  API_CALL
  GENERATE_REPORT
  WEBHOOK
}

enum AutomationConditionBuilderType {
  AND
  OR
}
