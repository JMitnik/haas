generator client {
  provider        = "prisma-client-js"
  output          = "./node_modules/@prisma/client"
  previewFeatures = ["transactionApi"]
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DB_STRING")
}

model ColourSettings {
  dark             String?
  darkest          String?
  error            String?
  id               Int               @id @default(autoincrement())
  light            String?
  lightest         String?
  muted            String?
  normal           String?
  primary          String
  primaryAlt       String?
  secondary        String?
  success          String?
  tertiary         String?
  text             String?
  warning          String?
  customerSettings CustomerSettings?
}

model FontSettings {
  body             String?
  fontTitle        String?
  id               Int               @id @default(autoincrement())
  settingTitle     String?
  special          String?
  customerSettings CustomerSettings?
}

model CustomerSettings {
  id               Int             @id @default(autoincrement())
  logoUrl          String?
  colourSettingsId Int?            @unique
  fontSettingsId   Int?            @unique
  customerId       String?         @unique
  logoOpacity      Int?            @default(30)
  colourSettings   ColourSettings? @relation(fields: [colourSettingsId], references: [id])
  customer         Customer?       @relation(fields: [customerId], references: [id])
  fontSettings     FontSettings?   @relation(fields: [fontSettingsId], references: [id])
}

model Customer {
  id              String            @id @default(cuid())
  slug            String            @unique
  name            String
  campaigns       Campaign[]
  CampaignVariant CampaignVariant[]
  settings        CustomerSettings?
  dialogues       Dialogue[]
  permissions     Permission[]
  roles           Role[]
  tags            Tag[]
  triggers        Trigger[]
  users           UserOfCustomer[]
}

model Tag {
  id         String     @id @default(cuid())
  type       TagEnum    @default(DEFAULT)
  name       String
  customerId String
  customer   Customer   @relation(fields: [customerId], references: [id])
  Dialogue   Dialogue[]
}

model PostLeafNode {
  id       String    @id @default(cuid())
  header   String
  subtext  String
  dialogue Dialogue?
}

model Dialogue {
  id                      String            @id @default(cuid())
  title                   String
  slug                    String
  description             String
  creationDate            DateTime          @default(now())
  updatedAt               DateTime?         @updatedAt
  publicTitle             String?
  customerId              String
  isOnline                Boolean           @default(false)
  isWithoutGenData        Boolean           @default(false)
  endScreenText           String?
  wasGeneratedWithGenData Boolean           @default(false)
  postLeafNodeId          String?           @unique
  language                LanguageEnum      @default(ENGLISH)
  customer                Customer          @relation(fields: [customerId], references: [id])
  postLeafNode            PostLeafNode?     @relation(fields: [postLeafNodeId], references: [id])
  CampaignVariant         CampaignVariant[]
  edges                   Edge[]
  questions               QuestionNode[]
  sessions                Session[]
  Tag                     Tag[]

  @@unique([slug, customerId], name: "Dialogue.slug_customerId_unique")
}

model FormNodeField {
  id                     String                   @id @default(cuid())
  label                  String
  type                   FormNodeFieldType        @default(shortText)
  isRequired             Boolean                  @default(false)
  position               Int
  formNodeId             String?
  placeholder            String?
  FormNode               FormNode?                @relation(fields: [formNodeId], references: [id])
  FormNodeFieldEntryData FormNodeFieldEntryData[]
}

model FormNode {
  id           String          @id @default(cuid())
  createdAt    DateTime        @default(now())
  helperText   String?
  fields       FormNodeField[]
  QuestionNode QuestionNode[]
}

model FormNodeFieldEntryData {
  id              Int            @id @default(autoincrement())
  email           String?
  phoneNumber     String?
  url             String?
  shortText       String?
  longText        String?
  number          Int?
  relatedFieldId  String
  formNodeEntryId Int?
  FormNodeEntry   FormNodeEntry? @relation(fields: [formNodeEntryId], references: [id])
  relatedField    FormNodeField  @relation(fields: [relatedFieldId], references: [id])
}

model FormNodeEntry {
  id          Int                      @id @default(autoincrement())
  nodeEntryId String                   @unique
  nodeEntry   NodeEntry                @relation(fields: [nodeEntryId], references: [id])
  values      FormNodeFieldEntryData[]
}

model SliderNodeRange {
  id               String             @id @default(cuid())
  start            Decimal?
  end              Decimal?
  SliderNodeMarker SliderNodeMarker[]
}

model SliderNodeMarker {
  id                String          @id @default(cuid())
  label             String
  subLabel          String
  sliderNodeId      String
  sliderNodeRangeId String
  sliderNode        SliderNode      @relation(fields: [sliderNodeId], references: [id])
  range             SliderNodeRange @relation(fields: [sliderNodeRangeId], references: [id])
}

model SliderNode {
  id               String             @id @default(cuid())
  earlyReleaseText String?
  unhappyText      String?
  happyText        String?
  QuestionNode     QuestionNode[]
  markers          SliderNodeMarker[]
}

model VideoEmbeddedNode {
  id           String         @id @default(cuid())
  videoUrl     String?
  QuestionNode QuestionNode[]
}

model QuestionNode {
  id                         String              @id @default(cuid())
  creationDate               DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  isLeaf                     Boolean             @default(false)
  isRoot                     Boolean             @default(false)
  title                      String
  type                       NodeType            @default(GENERIC)
  overrideLeafId             String?
  questionDialogueId         String?
  edgeId                     String?
  videoEmbeddedNodeId        String?
  sliderNodeId               String?
  formNodeId                 String?
  Edge                       Edge?               @relation("EdgeChildrenRelation", fields: [edgeId], references: [id])
  form                       FormNode?           @relation(fields: [formNodeId], references: [id])
  overrideLeaf               QuestionNode?       @relation("QNodeToOverrideLeaf", fields: [overrideLeafId], references: [id])
  questionDialogue           Dialogue?           @relation(fields: [questionDialogueId], references: [id])
  sliderNode                 SliderNode?         @relation(fields: [sliderNodeId], references: [id])
  videoEmbeddedNode          VideoEmbeddedNode?  @relation(fields: [videoEmbeddedNodeId], references: [id])
  isChildNodeOf              Edge[]              @relation("Edge_childNodeToQuestionNode")
  isParentNodeOf             Edge[]              @relation("Edge_parentNodeToQuestionNode")
  children                   Edge[]
  links                      Link[]
  isRelatedNodeOfNodeEntries NodeEntry[]
  isOverrideLeafOf           QuestionNode[]      @relation("QNodeToOverrideLeaf")
  QuestionOfTrigger          QuestionOfTrigger[]
  overridesChoices           QuestionOption[]    @relation("ChoiceCTANode")
  QuestionOption             QuestionOption[]    @relation("QuestionNodeOptions")
  options                    QuestionOption[]
  share                      Share?
  triggers                   Trigger[]
}

model Share {
  id             String        @id @default(cuid())
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  url            String
  title          String
  tooltip        String?
  questionNodeId String?       @unique
  questionNode   QuestionNode? @relation(fields: [questionNodeId], references: [id])
}

model Link {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt
  title           String?
  type            LinkTypeEnum
  url             String
  iconUrl         String?
  backgroundColor String?
  questionNodeId  String?
  questionNode    QuestionNode? @relation(fields: [questionNodeId], references: [id])
}

model Edge {
  childNodeId                String
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  id                         String              @id @default(cuid())
  parentNodeId               String
  dialogueId                 String?
  questionNodeId             String?
  childNode                  QuestionNode        @relation("Edge_childNodeToQuestionNode", fields: [childNodeId], references: [id])
  dialogue                   Dialogue?           @relation(fields: [dialogueId], references: [id])
  parentNode                 QuestionNode        @relation("Edge_parentNodeToQuestionNode", fields: [parentNodeId], references: [id])
  QuestionNode               QuestionNode?       @relation(fields: [questionNodeId], references: [id])
  isRelatedNodeOfNodeEntries NodeEntry[]
  conditions                 QuestionCondition[]
  isEdgeOf                   QuestionNode[]      @relation("EdgeChildrenRelation")
}

model QuestionCondition {
  conditionType String
  id            Int     @id @default(autoincrement())
  matchValue    String?
  renderMax     Int?
  renderMin     Int?
  edgeId        String?
  Edge          Edge?   @relation(fields: [edgeId], references: [id])
}

model QuestionOption {
  id             Int           @id @default(autoincrement())
  publicValue    String?
  value          String
  overrideLeafId String?
  questionId     String?
  questionNodeId String?
  position       Int?
  overrideLeaf   QuestionNode? @relation("ChoiceCTANode", fields: [overrideLeafId], references: [id])
  question       QuestionNode? @relation("QuestionNodeOptions", fields: [questionId], references: [id])
  QuestionNode   QuestionNode? @relation(fields: [questionNodeId], references: [id])
}

model Session {
  createdAt      DateTime    @default(now())
  id             String      @id @default(cuid())
  dialogueId     String
  deliveryId     String?
  originUrl      String?
  totalTimeInSec Int?
  device         String?
  delivery       Delivery?   @relation(fields: [deliveryId], references: [id])
  dialogue       Dialogue    @relation(fields: [dialogueId], references: [id])
  nodeEntries    NodeEntry[]
}

model NodeEntry {
  id                    String                 @id @default(cuid())
  creationDate          DateTime               @default(now())
  depth                 Int?
  relatedEdgeId         String?
  relatedNodeId         String?
  sessionId             String?
  inputSource           InputSource            @default(CLIENT)
  relatedEdge           Edge?                  @relation(fields: [relatedEdgeId], references: [id])
  relatedNode           QuestionNode?          @relation(fields: [relatedNodeId], references: [id])
  session               Session?               @relation(fields: [sessionId], references: [id])
  choiceNodeEntry       ChoiceNodeEntry?
  formNodeEntry         FormNodeEntry?
  linkNodeEntry         LinkNodeEntry?
  registrationNodeEntry RegistrationNodeEntry?
  sliderNodeEntry       SliderNodeEntry?
  textboxNodeEntry      TextboxNodeEntry?
  videoNodeEntry        VideoNodeEntry?
}

model VideoNodeEntry {
  id          Int       @id @default(autoincrement())
  value       String?
  nodeEntryId String    @unique
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id])
}

model LinkNodeEntry {
  id          Int       @id @default(autoincrement())
  value       Json?
  nodeEntryId String    @unique
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id])
}

model SliderNodeEntry {
  id          Int       @id @default(autoincrement())
  value       Int?
  nodeEntryId String    @unique
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id])
}

model ChoiceNodeEntry {
  id          Int       @id @default(autoincrement())
  value       String?
  nodeEntryId String    @unique
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id])
}

model TextboxNodeEntry {
  id          Int       @id @default(autoincrement())
  value       String?
  nodeEntryId String    @unique
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id])
}

model RegistrationNodeEntry {
  id          Int       @id @default(autoincrement())
  value       Json?
  nodeEntryId String    @unique
  nodeEntry   NodeEntry @relation(fields: [nodeEntryId], references: [id])
}

model Permission {
  id          String    @id @default(cuid())
  name        String
  description String?
  customerId  String?
  Customer    Customer? @relation(fields: [customerId], references: [id])
}

model Role {
  id          String                 @id @default(cuid())
  name        String
  type        RoleTypeEnum           @default(USER)
  isPrivate   Boolean                @default(false)
  permissions SystemPermissionEnum[]
  customerId  String?
  Customer    Customer?              @relation(fields: [customerId], references: [id])
  users       UserOfCustomer[]

  @@unique([id, name], name: "Role.id_name_unique")
}

model User {
  id                 String                 @id @default(cuid())
  createdAt          DateTime               @default(now())
  updatedAt          DateTime?              @updatedAt
  email              String                 @unique
  password           String?
  phone              String?
  firstName          String?
  lastName           String?
  globalPermissions  SystemPermissionEnum[]
  loginToken         String?
  loginTokenExpiry   DateTime?
  refreshToken       String?
  refreshTokenExpiry DateTime?
  lastActivity       DateTime?
  customers          UserOfCustomer[]
  triggers           Trigger[]
}

model UserOfCustomer {
  userId     String
  customerId String
  roleId     String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, customerId])
}

model TriggerCondition {
  id                Int                  @id @default(autoincrement())
  createdAt         DateTime?            @default(now())
  type              TriggerConditionEnum @default(LOW_THRESHOLD)
  minValue          Int?
  maxValue          Int?
  textValue         String?
  triggerId         String
  trigger           Trigger              @relation(fields: [triggerId], references: [id])
  QuestionOfTrigger QuestionOfTrigger[]
}

model Trigger {
  id                String              @id @default(cuid())
  lastSent          DateTime?
  name              String
  type              TriggerEnum         @default(QUESTION)
  medium            TriggerMedium
  relatedNodeId     String?
  customerId        String?
  customer          Customer?           @relation(fields: [customerId], references: [id])
  relatedNode       QuestionNode?       @relation(fields: [relatedNodeId], references: [id])
  QuestionOfTrigger QuestionOfTrigger[]
  conditions        TriggerCondition[]
  recipients        User[]
}

model QuestionOfTrigger {
  questionId         String
  triggerId          String
  triggerConditionId Int
  createdAt          DateTime         @default(now())
  question           QuestionNode     @relation(fields: [questionId], references: [id])
  triggerCondition   TriggerCondition @relation(fields: [triggerConditionId], references: [id])
  trigger            Trigger          @relation(fields: [triggerId], references: [id])

  @@id([questionId, triggerId])
}

model Job {
  id                   String              @id @default(cuid())
  createdAt            DateTime?           @default(now())
  updatedAt            DateTime?           @updatedAt
  type                 JobType
  createWorkspaceJobId String?             @unique
  createWorkspaceJob   CreateWorkspaceJob? @relation(fields: [createWorkspaceJobId], references: [id])
}

model JobProcessLocation {
  id                 String                 @id @default(cuid())
  name               String
  path               String
  xMaterialDimension Int                    @default(0)
  yMaterialDimension Int                    @default(0)
  type               JobProcessLocationType
  job                CreateWorkspaceJob[]
  fields             CustomField[]
}

model CustomField {
  id                   String             @id @default(cuid())
  key                  String
  value                String
  jobProcessLocationId String
  jobProcessLocation   JobProcessLocation @relation(fields: [jobProcessLocationId], references: [id])
}

model CreateWorkspaceJob {
  id                      String             @id @default(cuid())
  createdAt               DateTime?          @default(now())
  updatedAt               DateTime?          @updatedAt
  name                    String?
  referenceId             String?
  message                 String?
  errorMessage            String?
  referenceType           CloudReferenceType
  status                  JobStatusType      @default(PENDING)
  resourcesUrl            String?
  requiresRembg           Boolean            @default(true)
  requiresScreenshot      Boolean            @default(true)
  requiresColorExtraction Boolean            @default(true)
  jobProcessLocationId    String
  processLocation         JobProcessLocation @relation(fields: [jobProcessLocationId], references: [id])
  Job                     Job?
}

model Campaign {
  id            String                      @id @default(cuid())
  label         String
  workspaceId   String
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  workspace     Customer                    @relation(fields: [workspaceId], references: [id])
  variantsEdges CampaignVariantToCampaign[]
  deliveries    Delivery[]
}

model CampaignVariantToCampaign {
  campaignId        String
  campaignVariantId String
  weight            Int
  campaign          Campaign        @relation(fields: [campaignId], references: [id])
  campaignVariant   CampaignVariant @relation(fields: [campaignVariantId], references: [id])

  @@id([campaignId, campaignVariantId])
}

model CampaignVariant {
  id                        String                      @id @default(cuid())
  label                     String
  body                      String
  subject                   String?
  type                      CampaignVariantTypeEnum
  customerId                String
  dialogueId                String
  workspace                 Customer                    @relation(fields: [customerId], references: [id])
  dialogue                  Dialogue                    @relation(fields: [dialogueId], references: [id])
  CampaignVariantToCampaign CampaignVariantToCampaign[]
  Delivery                  Delivery[]
}

model Delivery {
  id                         String                 @id
  deliveryRecipientFirstName String?
  deliveryRecipientLastName  String?
  deliveryRecipientEmail     String?
  deliveryRecipientPhone     String?
  campaignId                 String
  campaignVariantId          String
  currentStatus              DeliveryStatusTypeEnum
  scheduledAt                DateTime
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime?              @updatedAt
  campaign                   Campaign               @relation(fields: [campaignId], references: [id])
  campaignVariant            CampaignVariant        @relation(fields: [campaignVariantId], references: [id])
  events                     DeliveryEvents[]
  Session                    Session[]
}

model DeliveryEvents {
  id         String                 @id @default(cuid())
  status     DeliveryStatusTypeEnum
  createdAt  DateTime               @default(now())
  deliveryId String?
  Delivery   Delivery?              @relation(fields: [deliveryId], references: [id])
}

enum TagEnum {
  DEFAULT
  AGENT
  LOCATION
}

enum LanguageEnum {
  DUTCH
  GERMAN
  ENGLISH
}

enum NodeType {
  GENERIC
  SLIDER
  FORM
  CHOICE
  REGISTRATION
  TEXTBOX
  LINK
  SHARE
  VIDEO_EMBEDDED
}

enum FormNodeFieldType {
  email
  phoneNumber
  url
  shortText
  longText
  number
}

enum LinkTypeEnum {
  SOCIAL
  API
  FACEBOOK
  LINKEDIN
  WHATSAPP
  INSTAGRAM
  TWITTER
}

enum InputSource {
  CLIENT
  INIT_GENERATED
}

enum SystemPermissionEnum {
  CAN_ACCESS_ADMIN_PANEL
  CAN_EDIT_DIALOGUE
  CAN_BUILD_DIALOGUE
  CAN_VIEW_DIALOGUE
  CAN_DELETE_DIALOGUE
  CAN_VIEW_DIALOGUE_ANALYTICS
  CAN_VIEW_USERS
  CAN_ADD_USERS
  CAN_DELETE_USERS
  CAN_EDIT_USERS
  CAN_CREATE_TRIGGERS
  CAN_DELETE_TRIGGERS
  CAN_DELETE_WORKSPACE
  CAN_EDIT_WORKSPACE
  CAN_VIEW_CAMPAIGNS
  CAN_CREATE_CAMPAIGNS
  CAN_CREATE_DELIVERIES
}

enum RoleTypeEnum {
  ADMIN
  MANAGER
  USER
  GUEST
  CUSTOM
}

enum TriggerEnum {
  QUESTION
  SCHEDULED
}

enum TriggerMedium {
  EMAIL
  PHONE
  BOTH
}

enum TriggerConditionEnum {
  LOW_THRESHOLD
  HIGH_THRESHOLD
  INNER_RANGE
  OUTER_RANGE
  TEXT_MATCH
}

enum JobType {
  CREATE_WORKSPACE_JOB
}

enum CloudReferenceType {
  AWS
  GCP
  Azure
  IBM
}

enum JobStatusType {
  PRE_PROCESSING
  PRE_PROCESSING_LOGO
  PRE_PROCESSING_WEBSITE_SCREENSHOT
  READY_FOR_PROCESSING
  IN_PHOTOSHOP_QUEUE
  PHOTOSHOP_PROCESSING
  PROCESSING
  WRAPPING_UP
  PENDING
  COMPLETED
  FAILED
  TRANSFORMING_PSDS_TO_PNGS
  STITCHING_SLIDES
  COMPRESSING_SALES_MATERIAL
}

enum JobProcessLocationType {
  ONE_PAGER
  PITCHDECK
  BROCHURE
}

enum CampaignVariantTypeEnum {
  EMAIL
  SMS
  QUEUE
}

enum DeliveryStatusTypeEnum {
  SCHEDULED
  DEPLOYED
  SENT
  OPENED
  FINISHED
}
